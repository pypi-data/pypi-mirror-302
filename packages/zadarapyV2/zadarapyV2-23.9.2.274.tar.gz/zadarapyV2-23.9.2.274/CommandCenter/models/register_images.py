# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class RegisterImages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package': 'str',
        'components': 'list[str]',
        'set_default': 'bool'
    }

    attribute_map = {
        'package': 'package',
        'components': 'components',
        'set_default': 'set_default'
    }

    def __init__(self, package=None, components=None, set_default=None, _configuration=None):  # noqa: E501
        """RegisterImages - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package = None
        self._components = None
        self._set_default = None
        self.discriminator = None

        self.package = package
        self.components = components
        if set_default is not None:
            self.set_default = set_default

    @property
    def package(self):
        """Gets the package of this RegisterImages.  # noqa: E501


        :return: The package of this RegisterImages.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this RegisterImages.


        :param package: The package of this RegisterImages.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and package is None:
            raise ValueError("Invalid value for `package`, must not be `None`")  # noqa: E501

        self._package = package

    @property
    def components(self):
        """Gets the components of this RegisterImages.  # noqa: E501

        Register only the specified component types. vpsa - register VPSA image. ccvm - register CCVM image. zios - register VPSA Object Storage image  # noqa: E501

        :return: The components of this RegisterImages.  # noqa: E501
        :rtype: list[str]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this RegisterImages.

        Register only the specified component types. vpsa - register VPSA image. ccvm - register CCVM image. zios - register VPSA Object Storage image  # noqa: E501

        :param components: The components of this RegisterImages.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501
        allowed_values = ["vpsa", "ccvm", "zios"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(components).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `components` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(components) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._components = components

    @property
    def set_default(self):
        """Gets the set_default of this RegisterImages.  # noqa: E501

        Sets the image as the default for its cloud.  # noqa: E501

        :return: The set_default of this RegisterImages.  # noqa: E501
        :rtype: bool
        """
        return self._set_default

    @set_default.setter
    def set_default(self, set_default):
        """Sets the set_default of this RegisterImages.

        Sets the image as the default for its cloud.  # noqa: E501

        :param set_default: The set_default of this RegisterImages.  # noqa: E501
        :type: bool
        """

        self._set_default = set_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterImages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterImages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterImages):
            return True

        return self.to_dict() != other.to_dict()
