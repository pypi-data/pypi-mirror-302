# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class UpdateVersionBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'when': 'str',
        'password': 'str',
        'scheduled_datetime': 'str'
    }

    attribute_map = {
        'when': 'when',
        'password': 'password',
        'scheduled_datetime': 'scheduled_datetime'
    }

    def __init__(self, when=None, password=None, scheduled_datetime=None, _configuration=None):  # noqa: E501
        """UpdateVersionBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._when = None
        self._password = None
        self._scheduled_datetime = None
        self.discriminator = None

        self.when = when
        self.password = password
        if scheduled_datetime is not None:
            self.scheduled_datetime = scheduled_datetime

    @property
    def when(self):
        """Gets the when of this UpdateVersionBody.  # noqa: E501

        When to perform the update. \"now\" to peform immediately. \"schedule\" to schedule update in the next 7 days, must include the scheduled_datetime parameter.  # noqa: E501

        :return: The when of this UpdateVersionBody.  # noqa: E501
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this UpdateVersionBody.

        When to perform the update. \"now\" to peform immediately. \"schedule\" to schedule update in the next 7 days, must include the scheduled_datetime parameter.  # noqa: E501

        :param when: The when of this UpdateVersionBody.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and when is None:
            raise ValueError("Invalid value for `when`, must not be `None`")  # noqa: E501
        allowed_values = ["now", "schedule"]  # noqa: E501
        if (self._configuration.client_side_validation and
                when not in allowed_values):
            raise ValueError(
                "Invalid value for `when` ({0}), must be one of {1}"  # noqa: E501
                .format(when, allowed_values)
            )

        self._when = when

    @property
    def password(self):
        """Gets the password of this UpdateVersionBody.  # noqa: E501

        Your Provisioning Portal password  # noqa: E501

        :return: The password of this UpdateVersionBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateVersionBody.

        Your Provisioning Portal password  # noqa: E501

        :param password: The password of this UpdateVersionBody.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def scheduled_datetime(self):
        """Gets the scheduled_datetime of this UpdateVersionBody.  # noqa: E501

        Date and time within 30 minutes from now to the next 7 days to schedule the software update.  # noqa: E501

        :return: The scheduled_datetime of this UpdateVersionBody.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_datetime

    @scheduled_datetime.setter
    def scheduled_datetime(self, scheduled_datetime):
        """Sets the scheduled_datetime of this UpdateVersionBody.

        Date and time within 30 minutes from now to the next 7 days to schedule the software update.  # noqa: E501

        :param scheduled_datetime: The scheduled_datetime of this UpdateVersionBody.  # noqa: E501
        :type: str
        """

        self._scheduled_datetime = scheduled_datetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateVersionBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateVersionBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateVersionBody):
            return True

        return self.to_dict() != other.to_dict()
