"""A web3.py Contract class for the IHyperdriveCheckpointSubrewarder contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ABIFunction, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    combomethod_typed,
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from .IHyperdriveCheckpointSubrewarderTypes import (
    AdminUpdatedEvent,
    MinterRewardAmountUpdatedEvent,
    RegistryUpdatedEvent,
    RewardTokenUpdatedEvent,
    SourceUpdatedEvent,
    TraderRewardAmountUpdatedEvent,
)

structs = {}


class IHyperdriveCheckpointSubrewarderAdminContractFunction(ContractFunction):
    """ContractFunction for the admin method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderAdminContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderKindContractFunction(ContractFunction):
    """ContractFunction for the kind method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction(
    ContractFunction
):
    """ContractFunction for the minterRewardAmount method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderProcessRewardContractFunction(
    ContractFunction
):
    """ContractFunction for the processReward method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for ProcessReward."""

        arg1: str
        arg2: int

    def __call__(self, instance: str, claimant: str, checkpointTime: int, isTrader: bool) -> IHyperdriveCheckpointSubrewarderProcessRewardContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(instance),
            dataclass_to_tuple(claimant),
            dataclass_to_tuple(checkpointTime),
            dataclass_to_tuple(isTrader),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [str, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderRegistryContractFunction(
    ContractFunction
):
    """ContractFunction for the registry method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderRegistryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderRewardTokenContractFunction(
    ContractFunction
):
    """ContractFunction for the rewardToken method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderRewardTokenContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderRewarderContractFunction(
    ContractFunction
):
    """ContractFunction for the rewarder method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderRewarderContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderSourceContractFunction(ContractFunction):
    """ContractFunction for the source method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderSourceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction(
    ContractFunction
):
    """ContractFunction for the traderRewardAmount method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderUpdateAdminContractFunction(
    ContractFunction
):
    """ContractFunction for the updateAdmin method."""

    def __call__(self, admin: str) -> IHyperdriveCheckpointSubrewarderUpdateAdminContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(admin))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction(
    ContractFunction
):
    """ContractFunction for the updateMinterRewardAmount method."""

    def __call__(self, minterRewardAmount: int) -> IHyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minterRewardAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveCheckpointSubrewarderUpdateRegistryContractFunction(
    ContractFunction
):
    """ContractFunction for the updateRegistry method."""

    def __call__(self, registry: str) -> IHyperdriveCheckpointSubrewarderUpdateRegistryContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(registry))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction(
    ContractFunction
):
    """ContractFunction for the updateRewardToken method."""

    def __call__(self, rewardToken: str) -> IHyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(rewardToken))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveCheckpointSubrewarderUpdateSourceContractFunction(
    ContractFunction
):
    """ContractFunction for the updateSource method."""

    def __call__(self, source: str) -> IHyperdriveCheckpointSubrewarderUpdateSourceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(source))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction(
    ContractFunction
):
    """ContractFunction for the updateTraderRewardAmount method."""

    def __call__(self, traderRewardAmount: int) -> IHyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(traderRewardAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveCheckpointSubrewarderVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> IHyperdriveCheckpointSubrewarderVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveCheckpointSubrewarderContractFunctions(ContractFunctions):
    """ContractFunctions for the IHyperdriveCheckpointSubrewarder contract."""

    admin: IHyperdriveCheckpointSubrewarderAdminContractFunction

    kind: IHyperdriveCheckpointSubrewarderKindContractFunction

    minterRewardAmount: (
        IHyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction
    )

    name: IHyperdriveCheckpointSubrewarderNameContractFunction

    processReward: IHyperdriveCheckpointSubrewarderProcessRewardContractFunction

    registry: IHyperdriveCheckpointSubrewarderRegistryContractFunction

    rewardToken: IHyperdriveCheckpointSubrewarderRewardTokenContractFunction

    rewarder: IHyperdriveCheckpointSubrewarderRewarderContractFunction

    source: IHyperdriveCheckpointSubrewarderSourceContractFunction

    traderRewardAmount: (
        IHyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction
    )

    updateAdmin: IHyperdriveCheckpointSubrewarderUpdateAdminContractFunction

    updateMinterRewardAmount: (
        IHyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction
    )

    updateRegistry: (
        IHyperdriveCheckpointSubrewarderUpdateRegistryContractFunction
    )

    updateRewardToken: (
        IHyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction
    )

    updateSource: IHyperdriveCheckpointSubrewarderUpdateSourceContractFunction

    updateTraderRewardAmount: (
        IHyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction
    )

    version: IHyperdriveCheckpointSubrewarderVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.admin = (
            IHyperdriveCheckpointSubrewarderAdminContractFunction.factory(
                "admin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="admin",
            )
        )
        self.kind = (
            IHyperdriveCheckpointSubrewarderKindContractFunction.factory(
                "kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="kind",
            )
        )
        self.minterRewardAmount = IHyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction.factory(
            "minterRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="minterRewardAmount",
        )
        self.name = (
            IHyperdriveCheckpointSubrewarderNameContractFunction.factory(
                "name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="name",
            )
        )
        self.processReward = IHyperdriveCheckpointSubrewarderProcessRewardContractFunction.factory(
            "processReward",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="processReward",
        )
        self.registry = (
            IHyperdriveCheckpointSubrewarderRegistryContractFunction.factory(
                "registry",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="registry",
            )
        )
        self.rewardToken = (
            IHyperdriveCheckpointSubrewarderRewardTokenContractFunction.factory(
                "rewardToken",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="rewardToken",
            )
        )
        self.rewarder = (
            IHyperdriveCheckpointSubrewarderRewarderContractFunction.factory(
                "rewarder",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="rewarder",
            )
        )
        self.source = (
            IHyperdriveCheckpointSubrewarderSourceContractFunction.factory(
                "source",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="source",
            )
        )
        self.traderRewardAmount = IHyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction.factory(
            "traderRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="traderRewardAmount",
        )
        self.updateAdmin = (
            IHyperdriveCheckpointSubrewarderUpdateAdminContractFunction.factory(
                "updateAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateAdmin",
            )
        )
        self.updateMinterRewardAmount = IHyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction.factory(
            "updateMinterRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateMinterRewardAmount",
        )
        self.updateRegistry = IHyperdriveCheckpointSubrewarderUpdateRegistryContractFunction.factory(
            "updateRegistry",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateRegistry",
        )
        self.updateRewardToken = IHyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction.factory(
            "updateRewardToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateRewardToken",
        )
        self.updateSource = IHyperdriveCheckpointSubrewarderUpdateSourceContractFunction.factory(
            "updateSource",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateSource",
        )
        self.updateTraderRewardAmount = IHyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction.factory(
            "updateTraderRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateTraderRewardAmount",
        )
        self.version = (
            IHyperdriveCheckpointSubrewarderVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="version",
            )
        )


class IHyperdriveCheckpointSubrewarderAdminUpdatedContractEvent(ContractEvent):
    """ContractEvent for AdminUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AdminUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AdminUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AdminUpdatedEvent.AdminUpdatedEventArgs(
                    admin=abi_event.args["admin"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AdminUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AdminUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AdminUpdatedEvent.AdminUpdatedEventArgs(
                    admin=abi_event.args["admin"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MinterRewardAmountUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinterRewardAmountUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinterRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinterRewardAmountUpdatedEvent.MinterRewardAmountUpdatedEventArgs(
                    minterRewardAmount=abi_event.args["minterRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinterRewardAmountUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinterRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinterRewardAmountUpdatedEvent.MinterRewardAmountUpdatedEventArgs(
                    minterRewardAmount=abi_event.args["minterRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for RegistryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RegistryUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RegistryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RegistryUpdatedEvent.RegistryUpdatedEventArgs(
                    registry=abi_event.args["registry"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RegistryUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RegistryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RegistryUpdatedEvent.RegistryUpdatedEventArgs(
                    registry=abi_event.args["registry"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for RewardTokenUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RewardTokenUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RewardTokenUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RewardTokenUpdatedEvent.RewardTokenUpdatedEventArgs(
                    rewardToken=abi_event.args["rewardToken"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RewardTokenUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RewardTokenUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RewardTokenUpdatedEvent.RewardTokenUpdatedEventArgs(
                    rewardToken=abi_event.args["rewardToken"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveCheckpointSubrewarderSourceUpdatedContractEvent(ContractEvent):
    """ContractEvent for SourceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SourceUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SourceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SourceUpdatedEvent.SourceUpdatedEventArgs(
                    source=abi_event.args["source"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SourceUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SourceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SourceUpdatedEvent.SourceUpdatedEventArgs(
                    source=abi_event.args["source"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for TraderRewardAmountUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TraderRewardAmountUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TraderRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TraderRewardAmountUpdatedEvent.TraderRewardAmountUpdatedEventArgs(
                    traderRewardAmount=abi_event.args["traderRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TraderRewardAmountUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TraderRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TraderRewardAmountUpdatedEvent.TraderRewardAmountUpdatedEventArgs(
                    traderRewardAmount=abi_event.args["traderRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveCheckpointSubrewarderContractEvents(ContractEvents):
    """ContractEvents for the IHyperdriveCheckpointSubrewarder contract."""

    AdminUpdated: Type[
        IHyperdriveCheckpointSubrewarderAdminUpdatedContractEvent
    ]

    MinterRewardAmountUpdated: Type[
        IHyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent
    ]

    RegistryUpdated: Type[
        IHyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent
    ]

    RewardTokenUpdated: Type[
        IHyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent
    ]

    SourceUpdated: Type[
        IHyperdriveCheckpointSubrewarderSourceUpdatedContractEvent
    ]

    TraderRewardAmountUpdated: Type[
        IHyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent
    ]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AdminUpdated = cast(
            Type[IHyperdriveCheckpointSubrewarderAdminUpdatedContractEvent],
            IHyperdriveCheckpointSubrewarderAdminUpdatedContractEvent.factory(
                "AdminUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AdminUpdated",
            ),
        )
        self.MinterRewardAmountUpdated = cast(
            Type[
                IHyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent
            ],
            IHyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent.factory(
                "MinterRewardAmountUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinterRewardAmountUpdated",
            ),
        )
        self.RegistryUpdated = cast(
            Type[IHyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent],
            IHyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent.factory(
                "RegistryUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RegistryUpdated",
            ),
        )
        self.RewardTokenUpdated = cast(
            Type[
                IHyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent
            ],
            IHyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent.factory(
                "RewardTokenUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RewardTokenUpdated",
            ),
        )
        self.SourceUpdated = cast(
            Type[IHyperdriveCheckpointSubrewarderSourceUpdatedContractEvent],
            IHyperdriveCheckpointSubrewarderSourceUpdatedContractEvent.factory(
                "SourceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="SourceUpdated",
            ),
        )
        self.TraderRewardAmountUpdated = cast(
            Type[
                IHyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent
            ],
            IHyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent.factory(
                "TraderRewardAmountUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TraderRewardAmountUpdated",
            ),
        )


class IHyperdriveCheckpointSubrewarderUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IHyperdriveCheckpointSubrewarderUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivecheckpointsubrewarder_abi
                if item.get("name") == "Unauthorized"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IHyperdriveCheckpointSubrewarderContractErrors:
    """ContractErrors for the IHyperdriveCheckpointSubrewarder contract."""

    Unauthorized: IHyperdriveCheckpointSubrewarderUnauthorizedContractError

    def __init__(
        self,
    ) -> None:
        self.Unauthorized = (
            IHyperdriveCheckpointSubrewarderUnauthorizedContractError()
        )

        self._all = [
            self.Unauthorized,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"IHyperdriveCheckpointSubrewarder does not have a selector matching {selector}"
        )


ihyperdrivecheckpointsubrewarder_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "admin",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "minterRewardAmount",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "processReward",
            "inputs": [
                {
                    "name": "_instance",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_claimant",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_checkpointTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_isTrader", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "registry",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IHyperdriveRegistry",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "rewardToken",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IERC20",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "rewarder",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "source",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "traderRewardAmount",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "updateAdmin",
            "inputs": [
                {"name": "_admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinterRewardAmount",
            "inputs": [
                {
                    "name": "_minterRewardAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateRegistry",
            "inputs": [
                {
                    "name": "_registry",
                    "type": "address",
                    "internalType": "contract IHyperdriveRegistry",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateRewardToken",
            "inputs": [
                {
                    "name": "_rewardToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateSource",
            "inputs": [
                {
                    "name": "_source",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateTraderRewardAmount",
            "inputs": [
                {
                    "name": "_traderRewardAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "event",
            "name": "AdminUpdated",
            "inputs": [
                {
                    "name": "admin",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinterRewardAmountUpdated",
            "inputs": [
                {
                    "name": "minterRewardAmount",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RegistryUpdated",
            "inputs": [
                {
                    "name": "registry",
                    "type": "address",
                    "indexed": True,
                    "internalType": "contract IHyperdriveRegistry",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RewardTokenUpdated",
            "inputs": [
                {
                    "name": "rewardToken",
                    "type": "address",
                    "indexed": True,
                    "internalType": "contract IERC20",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SourceUpdated",
            "inputs": [
                {
                    "name": "source",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TraderRewardAmountUpdated",
            "inputs": [
                {
                    "name": "traderRewardAmount",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "Unauthorized", "inputs": []},
    ],
)


class IHyperdriveCheckpointSubrewarderContract(Contract):
    """A web3.py Contract class for the IHyperdriveCheckpointSubrewarder contract."""

    abi: ABI = ihyperdrivecheckpointsubrewarder_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IHyperdriveCheckpointSubrewarderContractFunctions(ihyperdrivecheckpointsubrewarder_abi, self.w3, address)  # type: ignore
        self.events = IHyperdriveCheckpointSubrewarderContractEvents(ihyperdrivecheckpointsubrewarder_abi, self.w3, address)  # type: ignore
        self.errors = IHyperdriveCheckpointSubrewarderContractErrors()

    events: IHyperdriveCheckpointSubrewarderContractEvents

    errors: IHyperdriveCheckpointSubrewarderContractErrors = (
        IHyperdriveCheckpointSubrewarderContractErrors()
    )

    functions: IHyperdriveCheckpointSubrewarderContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IHyperdriveCheckpointSubrewarderContractFunctions(
            ihyperdrivecheckpointsubrewarder_abi, w3, None
        )
        contract.errors = IHyperdriveCheckpointSubrewarderContractErrors()

        return contract
