# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200242ResponseSnapshotPolicies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'create_policy': 'str',
        'delete_policy': 'str',
        'destination_delete_policy': 'str',
        'paused': 'str',
        'create_empty': 'str',
        'attach': 'str',
        'destination': 'str',
        'type': 'str',
        'snapshot_rule': 'str',
        'created_at': 'str',
        'modified_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'create_policy': 'create_policy',
        'delete_policy': 'delete_policy',
        'destination_delete_policy': 'destination_delete_policy',
        'paused': 'paused',
        'create_empty': 'create_empty',
        'attach': 'attach',
        'destination': 'destination',
        'type': 'type',
        'snapshot_rule': 'snapshot_rule',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, name=None, display_name=None, create_policy=None, delete_policy=None, destination_delete_policy=None, paused=None, create_empty=None, attach=None, destination=None, type=None, snapshot_rule=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """InlineResponse200242ResponseSnapshotPolicies - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._create_policy = None
        self._delete_policy = None
        self._destination_delete_policy = None
        self._paused = None
        self._create_empty = None
        self._attach = None
        self._destination = None
        self._type = None
        self._snapshot_rule = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if create_policy is not None:
            self.create_policy = create_policy
        if delete_policy is not None:
            self.delete_policy = delete_policy
        if destination_delete_policy is not None:
            self.destination_delete_policy = destination_delete_policy
        if paused is not None:
            self.paused = paused
        if create_empty is not None:
            self.create_empty = create_empty
        if attach is not None:
            self.attach = attach
        if destination is not None:
            self.destination = destination
        if type is not None:
            self.type = type
        if snapshot_rule is not None:
            self.snapshot_rule = snapshot_rule
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The name of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200242ResponseSnapshotPolicies.


        :param name: The name of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The display_name of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200242ResponseSnapshotPolicies.


        :param display_name: The display_name of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def create_policy(self):
        """Gets the create_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The create_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._create_policy

    @create_policy.setter
    def create_policy(self, create_policy):
        """Sets the create_policy of this InlineResponse200242ResponseSnapshotPolicies.


        :param create_policy: The create_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._create_policy = create_policy

    @property
    def delete_policy(self):
        """Gets the delete_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The delete_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._delete_policy

    @delete_policy.setter
    def delete_policy(self, delete_policy):
        """Sets the delete_policy of this InlineResponse200242ResponseSnapshotPolicies.


        :param delete_policy: The delete_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._delete_policy = delete_policy

    @property
    def destination_delete_policy(self):
        """Gets the destination_delete_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The destination_delete_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._destination_delete_policy

    @destination_delete_policy.setter
    def destination_delete_policy(self, destination_delete_policy):
        """Sets the destination_delete_policy of this InlineResponse200242ResponseSnapshotPolicies.


        :param destination_delete_policy: The destination_delete_policy of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._destination_delete_policy = destination_delete_policy

    @property
    def paused(self):
        """Gets the paused of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The paused of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this InlineResponse200242ResponseSnapshotPolicies.


        :param paused: The paused of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._paused = paused

    @property
    def create_empty(self):
        """Gets the create_empty of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The create_empty of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._create_empty

    @create_empty.setter
    def create_empty(self, create_empty):
        """Sets the create_empty of this InlineResponse200242ResponseSnapshotPolicies.


        :param create_empty: The create_empty of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._create_empty = create_empty

    @property
    def attach(self):
        """Gets the attach of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The attach of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._attach

    @attach.setter
    def attach(self, attach):
        """Sets the attach of this InlineResponse200242ResponseSnapshotPolicies.


        :param attach: The attach of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._attach = attach

    @property
    def destination(self):
        """Gets the destination of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The destination of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this InlineResponse200242ResponseSnapshotPolicies.


        :param destination: The destination of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def type(self):
        """Gets the type of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The type of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200242ResponseSnapshotPolicies.


        :param type: The type of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def snapshot_rule(self):
        """Gets the snapshot_rule of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The snapshot_rule of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_rule

    @snapshot_rule.setter
    def snapshot_rule(self, snapshot_rule):
        """Sets the snapshot_rule of this InlineResponse200242ResponseSnapshotPolicies.


        :param snapshot_rule: The snapshot_rule of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._snapshot_rule = snapshot_rule

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The created_at of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200242ResponseSnapshotPolicies.


        :param created_at: The created_at of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501


        :return: The modified_at of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200242ResponseSnapshotPolicies.


        :param modified_at: The modified_at of this InlineResponse200242ResponseSnapshotPolicies.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200242ResponseSnapshotPolicies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200242ResponseSnapshotPolicies):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200242ResponseSnapshotPolicies):
            return True

        return self.to_dict() != other.to_dict()
