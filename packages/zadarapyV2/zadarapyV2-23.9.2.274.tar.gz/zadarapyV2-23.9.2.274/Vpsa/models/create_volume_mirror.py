# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class CreateVolumeMirror(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'remote_pool': 'str',
        'dedupe': 'str',
        'compress': 'str',
        'policy': 'str',
        'new_cg_name': 'str',
        'wan_optimization': 'bool'
    }

    attribute_map = {
        'display_name': 'display_name',
        'remote_pool': 'remote_pool',
        'dedupe': 'dedupe',
        'compress': 'compress',
        'policy': 'policy',
        'new_cg_name': 'new_cg_name',
        'wan_optimization': 'wan_optimization'
    }

    def __init__(self, display_name=None, remote_pool=None, dedupe=None, compress=None, policy=None, new_cg_name=None, wan_optimization=None, _configuration=None):  # noqa: E501
        """CreateVolumeMirror - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._display_name = None
        self._remote_pool = None
        self._dedupe = None
        self._compress = None
        self._policy = None
        self._new_cg_name = None
        self._wan_optimization = None
        self.discriminator = None

        self.display_name = display_name
        self.remote_pool = remote_pool
        if dedupe is not None:
            self.dedupe = dedupe
        if compress is not None:
            self.compress = compress
        self.policy = policy
        self.new_cg_name = new_cg_name
        if wan_optimization is not None:
            self.wan_optimization = wan_optimization

    @property
    def display_name(self):
        """Gets the display_name of this CreateVolumeMirror.  # noqa: E501

        The name for the Mirror Job.  # noqa: E501

        :return: The display_name of this CreateVolumeMirror.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateVolumeMirror.

        The name for the Mirror Job.  # noqa: E501

        :param display_name: The display_name of this CreateVolumeMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def remote_pool(self):
        """Gets the remote_pool of this CreateVolumeMirror.  # noqa: E501

        Pool ID on the remote VPSA where the Mirrored Volume will be created  # noqa: E501

        :return: The remote_pool of this CreateVolumeMirror.  # noqa: E501
        :rtype: str
        """
        return self._remote_pool

    @remote_pool.setter
    def remote_pool(self, remote_pool):
        """Sets the remote_pool of this CreateVolumeMirror.

        Pool ID on the remote VPSA where the Mirrored Volume will be created  # noqa: E501

        :param remote_pool: The remote_pool of this CreateVolumeMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and remote_pool is None:
            raise ValueError("Invalid value for `remote_pool`, must not be `None`")  # noqa: E501

        self._remote_pool = remote_pool

    @property
    def dedupe(self):
        """Gets the dedupe of this CreateVolumeMirror.  # noqa: E501

        Enable Dedupe For Mirror.  # noqa: E501

        :return: The dedupe of this CreateVolumeMirror.  # noqa: E501
        :rtype: str
        """
        return self._dedupe

    @dedupe.setter
    def dedupe(self, dedupe):
        """Sets the dedupe of this CreateVolumeMirror.

        Enable Dedupe For Mirror.  # noqa: E501

        :param dedupe: The dedupe of this CreateVolumeMirror.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                dedupe not in allowed_values):
            raise ValueError(
                "Invalid value for `dedupe` ({0}), must be one of {1}"  # noqa: E501
                .format(dedupe, allowed_values)
            )

        self._dedupe = dedupe

    @property
    def compress(self):
        """Gets the compress of this CreateVolumeMirror.  # noqa: E501

        Enable compress For Mirror.  # noqa: E501

        :return: The compress of this CreateVolumeMirror.  # noqa: E501
        :rtype: str
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this CreateVolumeMirror.

        Enable compress For Mirror.  # noqa: E501

        :param compress: The compress of this CreateVolumeMirror.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                compress not in allowed_values):
            raise ValueError(
                "Invalid value for `compress` ({0}), must be one of {1}"  # noqa: E501
                .format(compress, allowed_values)
            )

        self._compress = compress

    @property
    def policy(self):
        """Gets the policy of this CreateVolumeMirror.  # noqa: E501

        Snapshot Policy ID for Remote Mirroring.  # noqa: E501

        :return: The policy of this CreateVolumeMirror.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this CreateVolumeMirror.

        Snapshot Policy ID for Remote Mirroring.  # noqa: E501

        :param policy: The policy of this CreateVolumeMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501

        self._policy = policy

    @property
    def new_cg_name(self):
        """Gets the new_cg_name of this CreateVolumeMirror.  # noqa: E501

        Name for the mirrored Volume on the Remote VPSA.  # noqa: E501

        :return: The new_cg_name of this CreateVolumeMirror.  # noqa: E501
        :rtype: str
        """
        return self._new_cg_name

    @new_cg_name.setter
    def new_cg_name(self, new_cg_name):
        """Sets the new_cg_name of this CreateVolumeMirror.

        Name for the mirrored Volume on the Remote VPSA.  # noqa: E501

        :param new_cg_name: The new_cg_name of this CreateVolumeMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and new_cg_name is None:
            raise ValueError("Invalid value for `new_cg_name`, must not be `None`")  # noqa: E501

        self._new_cg_name = new_cg_name

    @property
    def wan_optimization(self):
        """Gets the wan_optimization of this CreateVolumeMirror.  # noqa: E501


        :return: The wan_optimization of this CreateVolumeMirror.  # noqa: E501
        :rtype: bool
        """
        return self._wan_optimization

    @wan_optimization.setter
    def wan_optimization(self, wan_optimization):
        """Sets the wan_optimization of this CreateVolumeMirror.


        :param wan_optimization: The wan_optimization of this CreateVolumeMirror.  # noqa: E501
        :type: bool
        """

        self._wan_optimization = wan_optimization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVolumeMirror, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVolumeMirror):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateVolumeMirror):
            return True

        return self.to_dict() != other.to_dict()
