# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20041CachePartitionsCachePartition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'drive': 'InlineResponse20041CachePartitionsCachePartitionDrive',
        'size': 'int'
    }

    attribute_map = {
        'id': 'id',
        'drive': 'drive',
        'size': 'size'
    }

    def __init__(self, id=None, drive=None, size=None, _configuration=None):  # noqa: E501
        """InlineResponse20041CachePartitionsCachePartition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._drive = None
        self._size = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if drive is not None:
            self.drive = drive
        if size is not None:
            self.size = size

    @property
    def id(self):
        """Gets the id of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501


        :return: The id of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20041CachePartitionsCachePartition.


        :param id: The id of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def drive(self):
        """Gets the drive of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501


        :return: The drive of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501
        :rtype: InlineResponse20041CachePartitionsCachePartitionDrive
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """Sets the drive of this InlineResponse20041CachePartitionsCachePartition.


        :param drive: The drive of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501
        :type: InlineResponse20041CachePartitionsCachePartitionDrive
        """

        self._drive = drive

    @property
    def size(self):
        """Gets the size of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501


        :return: The size of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse20041CachePartitionsCachePartition.


        :param size: The size of this InlineResponse20041CachePartitionsCachePartition.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20041CachePartitionsCachePartition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20041CachePartitionsCachePartition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20041CachePartitionsCachePartition):
            return True

        return self.to_dict() != other.to_dict()
