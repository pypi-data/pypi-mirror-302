# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_analysis_utility.ipynb.

# %% auto 0
__all__ = ['report_missing_arguments', 'check_arguments', 'generic_analysis', 'input_manager', 'unit_test_1', 'unit_test_2',
           'cli']

# %% ../nbs/02_analysis_utility.ipynb 2
# That export there, it makes sure this code goes into the module.

# standard libs
import os
import re

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv  # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml  # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore  # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore import (
    test,
)
from fastcore.script import (
    call_parse,
)  # for @call_parse, https://fastcore.fast.ai/script
import json  # for nicely printing json and yaml
from fastcore import test
from fastcore.script import call_parse
from Strep_typer import (
    core,
    sample_manager,
)
from pathlib import Path  # to be able write :Path in cli function

# Project specific libraries

# %% ../nbs/02_analysis_utility.ipynb 5
def report_missing_arguments(input, config_file):
    # Check if an input-file is provided, either as argument or unit-test. If not, exit with error
    if input is None and config_file is None:
        print(
            "ERROR: Input log-file is missing. Provide it as input argument or config-file"
        )
        exit()

# %% ../nbs/02_analysis_utility.ipynb 7
def check_arguments(input, config_file):
    exit_code = 0
    error_messages = list()
    # If a config-file was provided, check that it exists. If not, exit directly.
    if config_file is not None:
        config_dir = os.path.abspath(config_file)
        isConfig = os.path.isfile(config_dir)
        if not isConfig:
            print("ERROR: The provided config-file doesnt exist: " + config_dir)
            exit()
    input_dir = os.path.abspath(input)
    isInput = os.path.isfile(input_dir)
    if not isInput:
        error_msg = "Your input log-file does not exist: " + input_dir
        error_messages.append(error_msg)
        exit_code = 1
    # Report errors and exit (if any)
    if exit_code == 1:
        print("Error: there were problems with the following script arguments:")
        for msg in error_messages:
            print(msg)
        exit()

# %% ../nbs/02_analysis_utility.ipynb 9
print(help(sample_manager))


class generic_analysis(sample_manager.sample_data):
    # def __init__(self,output_folder):
    #    self.analysis_folder = output_folder

    def Illumina_WGS_mapping(self, reference_fasta_file, output_folder):
        bam_prefix = os.path.join(output_folder, self.sample_name + "-bwamem")
        bam_file = bam_prefix + ".bam"
        vcf_file = os.path.join(output_folder, self.sample_name + ".vcf")
        self.mapping_reference = reference_fasta_file
        self.bam_file = bam_file
        self.vcf_file = vcf_file
        bwamem_cmd = f"bwa mem -R '@RG\\tID:{self.sample_name}\\tSM:{self.sample_name}'  -t 4 {reference_fasta_file} {self.Illumina_read_files[0]} {self.Illumina_read_files[1]} | samtools view -S -b -h - | samtools sort - {bam_prefix}"
        samtoolsindex_cmd = f"samtools index {bam_file}"
        gatk_cmd = f"java -Xmx10G -jar GenomeAnalysisTK.jar -T UnifiedGenotyper -dt NONE -glm BOTH -I {bam_file} -R {reference_fasta_file} -nt 4 -o {vcf_file} -out_mode EMIT_ALL_CONFIDENT_SITES -baq RECALCULATE -stand_call_conf 100 -ploidy 1"
        if os.path.exists(vcf_file):
            print(f"vcf file found at {vcf_file}. Skipping read mapping")
        else:
            if os.path.exists(bam_file + ".bai"):
                cmd = gatk_cmd
            else:
                if os.path.exists(bam_file):
                    cmd = f"{samtoolsindex_cmd}; {gatk_cmd}"
                else:
                    cmd = f"{bwamem_cmd}; {samtoolsindex_cmd}; {gatk_cmd}"
                    print(cmd)

            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                shell=True,
                encoding="utf-8",
            )
            (
                self.process_outputs["Illumina_WGS_mapping"],
                self.process_errors["Illumina_WGS_mapping"],
            ) = process.communicate()


class input_manager(sample_manager.input_manager):
    def initialize_samples(self, file_paths):
        self.samples = []
        for sample_name in file_paths:
            attributes = file_paths[sample_name].copy()
            attributes["sample_name"] = sample_name
            sample_to_add = generic_analysis(attributes, "example_output_folder")
            self.samples.append(sample_to_add)

# %% ../nbs/02_analysis_utility.ipynb 11
# print(help(input_manager))


def unit_test_1():
    example_sample = generic_analysis(
        {
            "sample_name": "GAS-2022-1029",
            "assembly_file": "../examples/GAS-2022-1029.fasta",
            "Illumina_read_files": [
                "../examples/GAS-2022-1029_S42_L555_R1_001.fastq.gz",
                "../examples/GAS-2022-1029_S42_L555_R2_001.fastq.gz",
            ],
        },
        "example_analysis_folder",
    )
    print(example_sample.__dict__)
    print(example_sample.species)


def unit_test_2():
    test = input_manager("../examples/", "regex_patterns")
    for x in test:
        print(x.__dict__)


# unit_test_1()
unit_test_2()

# %% ../nbs/02_analysis_utility.ipynb 13
@call_parse
def cli(
    # Definition of command-line arguments
    input: str = None,  # Path to log-file from rclone (required, unless using config)
    config_file: str = None,  # Config-file containing all required arguments (required, unless using input arg)
    unit_test: bool = False,  # Run unit-test on log-file in repo (optional)
) -> None:
    # Set env vars and get config variables
    config = core.get_config(config_file)
    # If unit-test requested: run unit-test and exit
    if unit_test:
        if config_file is not None:
            print(
                "ERROR: Unit-test requested together with config-file argument, which could interfere with the test! Exiting!"
            )
            exit()
        print("Unit-test requested. Will do unit-test and exit when done")
        unit_test_1(config["rclone_log_parser"]["input_test"]["test_file"])
        exit()
    # Overwrite input default values in config-file if the user has provided command-line arguments
    if input is not None:
        config["rclone_log_parser"]["input"]["log_file"] = input
    # Check if any required arguments are missing
    report_missing_arguments(input, config_file)
    # Check validity of arguments
    check_arguments(config["rclone_log_parser"]["input"]["log_file"], config_file)
    # Run commands
    transfers = log_parser(
        config["rclone_log_parser"]["input"]["log_file"]
    )  # class object, containing various info on transfer(s) parsed from logfile
    print(transfers)
    # Possible next: print some summary information to stdout about transfers found? Not sure if that is necessary in production.
    # Next: write function that adds data into transfer-db
