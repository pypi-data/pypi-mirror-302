# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import Vpsa
from Vpsa.api.settings_api import SettingsApi  # noqa: E501
from Vpsa.rest import ApiException


class TestSettingsApi(unittest.TestCase):
    """SettingsApi unit test stubs"""

    def setUp(self):
        self.api = Vpsa.api.settings_api.SettingsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_change_encryption_to_aws_kms(self):
        """Test case for change_encryption_to_aws_kms

        """
        pass

    def test_change_mtu_for_ni(self):
        """Test case for change_mtu_for_ni

        """
        pass

    def test_configure_file_access_audit(self):
        """Test case for configure_file_access_audit

        """
        pass

    def test_create_zcs_image_repository(self):
        """Test case for create_zcs_image_repository

        """
        pass

    def test_default_write_policy(self):
        """Test case for default_write_policy

        """
        pass

    def test_delete_zcs_image_repository(self):
        """Test case for delete_zcs_image_repository

        """
        pass

    def test_disable_defrag(self):
        """Test case for disable_defrag

        """
        pass

    def test_disable_file_access_audit_conf(self):
        """Test case for disable_file_access_audit_conf

        """
        pass

    def test_disable_privilege_access(self):
        """Test case for disable_privilege_access

        """
        pass

    def test_disable_trim(self):
        """Test case for disable_trim

        """
        pass

    def test_download_metering_database(self):
        """Test case for download_metering_database

        """
        pass

    def test_enable_defrag(self):
        """Test case for enable_defrag

        """
        pass

    def test_enable_privilege_access(self):
        """Test case for enable_privilege_access

        """
        pass

    def test_enable_trim(self):
        """Test case for enable_trim

        """
        pass

    def test_get_all_app_settings(self):
        """Test case for get_all_app_settings

        """
        pass

    def test_get_network(self):
        """Test case for get_network

        """
        pass

    def test_get_nfs_domain(self):
        """Test case for get_nfs_domain

        """
        pass

    def test_get_public_ip(self):
        """Test case for get_public_ip

        """
        pass

    def test_get_vpsa_flc_global(self):
        """Test case for get_vpsa_flc_global

        """
        pass

    def test_get_zcs_settings(self):
        """Test case for get_zcs_settings

        """
        pass

    def test_list_all_vc_capabilities(self):
        """Test case for list_all_vc_capabilities

        """
        pass

    def test_migrate_zcs_image_repository(self):
        """Test case for migrate_zcs_image_repository

        """
        pass

    def test_remove_encryption_kms(self):
        """Test case for remove_encryption_kms

        """
        pass

    def test_remove_encryption_password(self):
        """Test case for remove_encryption_password

        """
        pass

    def test_restore_aws_kms_store(self):
        """Test case for restore_aws_kms_store

        """
        pass

    def test_restore_encryption_password(self):
        """Test case for restore_encryption_password

        """
        pass

    def test_restore_encryption_password_kmip(self):
        """Test case for restore_encryption_password_kmip

        """
        pass

    def test_set_encription_pass(self):
        """Test case for set_encription_pass

        """
        pass

    def test_set_encription_pass_or_use_aws_kms_store(self):
        """Test case for set_encription_pass_or_use_aws_kms_store

        """
        pass

    def test_set_encryption_password_kmip(self):
        """Test case for set_encryption_password_kmip

        """
        pass

    def test_set_global_remote_vpsa_monitoring(self):
        """Test case for set_global_remote_vpsa_monitoring

        """
        pass

    def test_set_global_server_connectivity_monitoring(self):
        """Test case for set_global_server_connectivity_monitoring

        """
        pass

    def test_set_iscsi_over_public_ip(self):
        """Test case for set_iscsi_over_public_ip

        """
        pass

    def test_set_multizone_read_mode(self):
        """Test case for set_multizone_read_mode

        """
        pass

    def test_set_nfs_domain(self):
        """Test case for set_nfs_domain

        """
        pass

    def test_set_pass_policy(self):
        """Test case for set_pass_policy

        """
        pass

    def test_set_recycle_bin(self):
        """Test case for set_recycle_bin

        """
        pass

    def test_set_smb_charset(self):
        """Test case for set_smb_charset

        """
        pass

    def test_set_smb_netbios_name(self):
        """Test case for set_smb_netbios_name

        """
        pass

    def test_set_smb_trusted_domains(self):
        """Test case for set_smb_trusted_domains

        """
        pass

    def test_show_audit_conf(self):
        """Test case for show_audit_conf

        """
        pass

    def test_start_defrag(self):
        """Test case for start_defrag

        """
        pass

    def test_start_trim(self):
        """Test case for start_trim

        """
        pass

    def test_stop_defrag(self):
        """Test case for stop_defrag

        """
        pass

    def test_stop_trim(self):
        """Test case for stop_trim

        """
        pass

    def test_update_zcs_settings(self):
        """Test case for update_zcs_settings

        """
        pass


if __name__ == '__main__':
    unittest.main()
