# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200138LoadBalancer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'protection_zone': 'InlineResponse200138Protectionzone',
        'vrid': 'int',
        'master_vc': 'InlineResponse200138MasterVc',
        'ipv4': 'str',
        'ipv6': 'str',
        'vcs': 'list[InlineResponse200138Vcs]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'protection_zone': 'protection-zone',
        'vrid': 'vrid',
        'master_vc': 'master_vc',
        'ipv4': 'ipv4',
        'ipv6': 'ipv6',
        'vcs': 'vcs'
    }

    def __init__(self, id=None, name=None, protection_zone=None, vrid=None, master_vc=None, ipv4=None, ipv6=None, vcs=None, _configuration=None):  # noqa: E501
        """InlineResponse200138LoadBalancer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._protection_zone = None
        self._vrid = None
        self._master_vc = None
        self._ipv4 = None
        self._ipv6 = None
        self._vcs = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if protection_zone is not None:
            self.protection_zone = protection_zone
        if vrid is not None:
            self.vrid = vrid
        if master_vc is not None:
            self.master_vc = master_vc
        if ipv4 is not None:
            self.ipv4 = ipv4
        if ipv6 is not None:
            self.ipv6 = ipv6
        if vcs is not None:
            self.vcs = vcs

    @property
    def id(self):
        """Gets the id of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The id of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200138LoadBalancer.


        :param id: The id of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The name of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200138LoadBalancer.


        :param name: The name of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protection_zone(self):
        """Gets the protection_zone of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The protection_zone of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: InlineResponse200138Protectionzone
        """
        return self._protection_zone

    @protection_zone.setter
    def protection_zone(self, protection_zone):
        """Sets the protection_zone of this InlineResponse200138LoadBalancer.


        :param protection_zone: The protection_zone of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: InlineResponse200138Protectionzone
        """

        self._protection_zone = protection_zone

    @property
    def vrid(self):
        """Gets the vrid of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The vrid of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: int
        """
        return self._vrid

    @vrid.setter
    def vrid(self, vrid):
        """Sets the vrid of this InlineResponse200138LoadBalancer.


        :param vrid: The vrid of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: int
        """

        self._vrid = vrid

    @property
    def master_vc(self):
        """Gets the master_vc of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The master_vc of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: InlineResponse200138MasterVc
        """
        return self._master_vc

    @master_vc.setter
    def master_vc(self, master_vc):
        """Sets the master_vc of this InlineResponse200138LoadBalancer.


        :param master_vc: The master_vc of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: InlineResponse200138MasterVc
        """

        self._master_vc = master_vc

    @property
    def ipv4(self):
        """Gets the ipv4 of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The ipv4 of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: str
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this InlineResponse200138LoadBalancer.


        :param ipv4: The ipv4 of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: str
        """

        self._ipv4 = ipv4

    @property
    def ipv6(self):
        """Gets the ipv6 of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The ipv6 of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: str
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this InlineResponse200138LoadBalancer.


        :param ipv6: The ipv6 of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: str
        """

        self._ipv6 = ipv6

    @property
    def vcs(self):
        """Gets the vcs of this InlineResponse200138LoadBalancer.  # noqa: E501


        :return: The vcs of this InlineResponse200138LoadBalancer.  # noqa: E501
        :rtype: list[InlineResponse200138Vcs]
        """
        return self._vcs

    @vcs.setter
    def vcs(self, vcs):
        """Sets the vcs of this InlineResponse200138LoadBalancer.


        :param vcs: The vcs of this InlineResponse200138LoadBalancer.  # noqa: E501
        :type: list[InlineResponse200138Vcs]
        """

        self._vcs = vcs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200138LoadBalancer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200138LoadBalancer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200138LoadBalancer):
            return True

        return self.to_dict() != other.to_dict()
