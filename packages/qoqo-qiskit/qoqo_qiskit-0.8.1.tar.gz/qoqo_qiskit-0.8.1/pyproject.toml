[project]
name = "qoqo_qiskit"
version = "0.8.1"
license = { file = "LICENSE" }
authors = [
    { name = "HQS Quantum Simulation GmbH", email = "info@quantumsimulations.de" },
]
maintainers = [
    { name = "Matteo Lodi", email = "matteo.lodi@quantumsimulations.de" },
]
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "qoqo>=1.15,<1.16",
    "qoqo_qasm>=0.12.1,<0.13",  # minimum version for Pyo3 0.21 support
    "qiskit>=1.0",
    "qiskit_aer>=0.15",         # minimum version for Python 3.12 support
    "qiskit_ibm_runtime>=0.15",
    "numpy",
]

[project.optional-dependencies]
tests = ['pytest', 'pytest-cov', 'coverage']
dev = [
    'flake8',
    'flake8-bugbear',
    'flake8-pyproject',
    'flake8-pydocstyle',
    'darglint',
    'bandit',
    'mypy',
    'black',
    'ruff',
]
docs = [
    'sphinx>=2.1',
    'nbsphinx',
    'pygments',
    'recommonmark',
    'myst_parser',
    'sphinx_rtd_theme',
    'tomli',
]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.mypy]
ignore_missing_imports = true
pretty = true
follow_imports = "silent"

[tool.black]
line-length = 99
target-version = ["py39", "py310", "py311"]

[tool.coverage.run]
branch = true
omit = ["tests/*", "*test*.py"]
source = ["qoqo_qiskit"]

[tool.coverage.paths]
source = ["src", "**/site-packages"]

[tool.ruff]
line-length = 99        # same as black
target-version = "py39"
show-fixes = true
output-format = "full"
# activate the following checks
select = [
    "A",   # builtins
    "ANN", # annotations
    "ARG", # unused arguments
    "B",   # bugbear
    "C",   # comprehensions
    "C90", # mccabe complexity
    "D",   # pydocstyle
    "E",   # pycodestyle
    "ERA", # remove commented out code
    "F",   # pyflakes
    "NPY", # numpy
    "PL",  # pylint
    "RUF", # ruff
    "S",   # bandit
    "TCH", # type checking
    "W",   # Warnings
]
# ignore specific violations
ignore = [
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN401",
    "D400",
    "D401",
    # "S403",  # not implemented in ruff (yet?!)
    # "S404",  # not implemented in ruff (yet?!)
    "PLR",
    # "S101",
    "S301",
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = []
# exclude the following patterns from linting
exclude = [
    ".git",
    "__pycache__",
    "doc/conf.py",
    "old",
    "build",
    "dist",
    "test_*",
]

[tool.ruff.mccabe]
max-complexity = 20 # 5 higher than sonarqube

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.flake8]
max-line-length = 99 # same as black
ignore = [
    "E203",   # Needed for compatibility with black
    "D400",
    "D401",
    "W503",
    "ANN101",
    "ANN102",
    "ANN002",
    "ANN003",
    "ANN401",
    "S403",
    "S404",
    "S301",
]
exclude = [
    ".git",
    "__pycache__",
    "doc/conf.py",
    "old",
    "build",
    "dist",
    "test_*",
]
docstring-convention = "google"
per-file-ignores = ["__init__.py:F401"]
