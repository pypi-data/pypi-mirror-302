# Generated from QuietParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,144,1381,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,3,0,194,8,0,1,0,3,
        0,197,8,0,1,0,3,0,200,8,0,1,0,3,0,203,8,0,1,0,3,0,206,8,0,1,0,3,
        0,209,8,0,1,0,3,0,212,8,0,1,1,5,1,215,8,1,10,1,12,1,218,9,1,1,1,
        1,1,1,1,1,1,5,1,224,8,1,10,1,12,1,227,9,1,1,1,1,1,1,2,5,2,232,8,
        2,10,2,12,2,235,9,2,1,2,1,2,3,2,239,8,2,1,3,1,3,1,3,4,3,244,8,3,
        11,3,12,3,245,1,4,4,4,249,8,4,11,4,12,4,250,1,5,1,5,1,5,1,5,5,5,
        257,8,5,10,5,12,5,260,9,5,1,5,1,5,1,6,5,6,265,8,6,10,6,12,6,268,
        9,6,1,6,1,6,3,6,272,8,6,1,7,1,7,1,7,4,7,277,8,7,11,7,12,7,278,1,
        8,4,8,282,8,8,11,8,12,8,283,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,3,11,298,8,11,1,11,5,11,301,8,11,10,11,12,11,304,
        9,11,1,12,5,12,307,8,12,10,12,12,12,310,9,12,1,12,1,12,3,12,314,
        8,12,1,13,1,13,1,13,4,13,319,8,13,11,13,12,13,320,1,14,1,14,4,14,
        325,8,14,11,14,12,14,326,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,5,16,343,8,16,10,16,12,16,346,9,16,
        1,16,3,16,349,8,16,3,16,351,8,16,1,17,1,17,1,17,3,17,356,8,17,1,
        17,1,17,1,17,3,17,361,8,17,1,18,5,18,364,8,18,10,18,12,18,367,9,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,3,19,385,8,19,1,20,5,20,388,8,20,10,20,12,20,391,
        9,20,1,20,1,20,3,20,395,8,20,1,21,1,21,1,21,4,21,400,8,21,11,21,
        12,21,401,1,22,4,22,405,8,22,11,22,12,22,406,1,23,5,23,410,8,23,
        10,23,12,23,413,9,23,1,23,1,23,1,23,1,24,1,24,1,24,4,24,421,8,24,
        11,24,12,24,422,1,25,1,25,1,26,5,26,428,8,26,10,26,12,26,431,9,26,
        1,26,1,26,3,26,435,8,26,1,27,1,27,1,27,4,27,440,8,27,11,27,12,27,
        441,1,28,1,28,4,28,446,8,28,11,28,12,28,447,1,29,1,29,1,29,1,29,
        1,29,5,29,455,8,29,10,29,12,29,458,9,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,5,30,468,8,30,10,30,12,30,471,9,30,1,30,1,30,1,31,
        1,31,3,31,477,8,31,1,32,1,32,1,32,3,32,482,8,32,1,32,1,32,3,32,486,
        8,32,1,33,1,33,1,33,3,33,491,8,33,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,5,35,504,8,35,10,35,12,35,507,9,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,518,8,36,10,36,12,36,
        521,9,36,1,36,3,36,524,8,36,3,36,526,8,36,1,37,1,37,1,37,3,37,531,
        8,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,539,8,37,1,38,1,38,1,38,
        5,38,544,8,38,10,38,12,38,547,9,38,1,39,1,39,1,39,5,39,552,8,39,
        10,39,12,39,555,9,39,1,40,1,40,1,40,1,41,5,41,561,8,41,10,41,12,
        41,564,9,41,1,42,1,42,3,42,568,8,42,1,43,1,43,1,43,3,43,573,8,43,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        3,44,601,8,44,1,45,1,45,1,45,1,45,5,45,607,8,45,10,45,12,45,610,
        9,45,1,46,1,46,1,46,3,46,615,8,46,1,46,1,46,1,46,3,46,620,8,46,1,
        47,1,47,3,47,624,8,47,1,48,1,48,1,48,5,48,629,8,48,10,48,12,48,632,
        9,48,1,49,1,49,1,49,5,49,637,8,49,10,49,12,49,640,9,49,1,50,1,50,
        1,50,1,50,5,50,646,8,50,10,50,12,50,649,9,50,1,50,1,50,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,3,52,700,8,52,1,53,1,53,1,53,3,53,
        705,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
        717,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,3,55,775,8,55,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,3,56,787,8,56,1,57,1,57,1,57,3,57,
        792,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,
        804,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,832,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,890,8,60,1,61,
        1,61,3,61,894,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,927,8,62,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,3,63,983,8,63,1,64,1,64,3,64,987,8,64,1,65,1,65,1,65,1,65,1,
        65,3,65,994,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1066,8,66,1,67,1,
        67,1,67,1,68,1,68,1,68,3,68,1074,8,68,1,68,1,68,1,68,1,69,1,69,1,
        69,3,69,1082,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1141,8,70,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,3,71,1158,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
        72,3,72,1170,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1179,8,
        73,1,74,1,74,3,74,1183,8,74,1,75,1,75,3,75,1187,8,75,1,76,1,76,1,
        76,1,76,3,76,1193,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
        77,1,77,3,77,1205,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1263,8,78,1,79,1,
        79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
        79,1,79,1,79,1,79,1,79,1,79,3,79,1285,8,79,1,80,1,80,1,80,1,80,4,
        80,1291,8,80,11,80,12,80,1292,1,80,1,80,1,80,1,80,4,80,1299,8,80,
        11,80,12,80,1300,3,80,1303,8,80,1,81,1,81,1,81,3,81,1308,8,81,1,
        82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,85,1,
        86,1,86,3,86,1325,8,86,1,87,1,87,1,87,1,87,5,87,1331,8,87,10,87,
        12,87,1334,9,87,1,88,1,88,1,88,1,88,4,88,1340,8,88,11,88,12,88,1341,
        1,89,5,89,1345,8,89,10,89,12,89,1348,9,89,1,89,3,89,1351,8,89,1,
        90,1,90,1,90,3,90,1356,8,90,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,
        93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,3,94,1373,8,94,1,94,3,94,1376,
        8,94,1,95,1,95,1,95,1,95,0,0,96,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,0,4,2,0,94,95,135,135,1,0,133,
        134,1,0,37,41,2,0,133,133,135,135,1466,0,193,1,0,0,0,2,216,1,0,0,
        0,4,233,1,0,0,0,6,240,1,0,0,0,8,248,1,0,0,0,10,252,1,0,0,0,12,266,
        1,0,0,0,14,273,1,0,0,0,16,281,1,0,0,0,18,285,1,0,0,0,20,290,1,0,
        0,0,22,294,1,0,0,0,24,308,1,0,0,0,26,315,1,0,0,0,28,324,1,0,0,0,
        30,328,1,0,0,0,32,335,1,0,0,0,34,352,1,0,0,0,36,365,1,0,0,0,38,384,
        1,0,0,0,40,389,1,0,0,0,42,396,1,0,0,0,44,404,1,0,0,0,46,411,1,0,
        0,0,48,417,1,0,0,0,50,424,1,0,0,0,52,429,1,0,0,0,54,436,1,0,0,0,
        56,445,1,0,0,0,58,449,1,0,0,0,60,463,1,0,0,0,62,476,1,0,0,0,64,478,
        1,0,0,0,66,487,1,0,0,0,68,492,1,0,0,0,70,496,1,0,0,0,72,510,1,0,
        0,0,74,527,1,0,0,0,76,540,1,0,0,0,78,548,1,0,0,0,80,556,1,0,0,0,
        82,562,1,0,0,0,84,567,1,0,0,0,86,569,1,0,0,0,88,600,1,0,0,0,90,602,
        1,0,0,0,92,611,1,0,0,0,94,623,1,0,0,0,96,625,1,0,0,0,98,633,1,0,
        0,0,100,641,1,0,0,0,102,652,1,0,0,0,104,699,1,0,0,0,106,704,1,0,
        0,0,108,716,1,0,0,0,110,774,1,0,0,0,112,786,1,0,0,0,114,791,1,0,
        0,0,116,803,1,0,0,0,118,831,1,0,0,0,120,889,1,0,0,0,122,893,1,0,
        0,0,124,926,1,0,0,0,126,982,1,0,0,0,128,986,1,0,0,0,130,993,1,0,
        0,0,132,1065,1,0,0,0,134,1067,1,0,0,0,136,1070,1,0,0,0,138,1078,
        1,0,0,0,140,1140,1,0,0,0,142,1157,1,0,0,0,144,1169,1,0,0,0,146,1178,
        1,0,0,0,148,1182,1,0,0,0,150,1186,1,0,0,0,152,1192,1,0,0,0,154,1204,
        1,0,0,0,156,1262,1,0,0,0,158,1284,1,0,0,0,160,1302,1,0,0,0,162,1307,
        1,0,0,0,164,1309,1,0,0,0,166,1315,1,0,0,0,168,1317,1,0,0,0,170,1319,
        1,0,0,0,172,1324,1,0,0,0,174,1326,1,0,0,0,176,1335,1,0,0,0,178,1346,
        1,0,0,0,180,1355,1,0,0,0,182,1357,1,0,0,0,184,1359,1,0,0,0,186,1364,
        1,0,0,0,188,1375,1,0,0,0,190,1377,1,0,0,0,192,194,3,2,1,0,193,192,
        1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,197,3,4,2,0,196,195,
        1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,3,12,6,0,199,198,
        1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,203,3,24,12,0,202,201,
        1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,206,3,40,20,0,205,204,
        1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,209,3,46,23,0,208,207,
        1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,212,3,52,26,0,211,210,
        1,0,0,0,211,212,1,0,0,0,212,1,1,0,0,0,213,215,5,16,0,0,214,213,1,
        0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,
        0,0,0,218,216,1,0,0,0,219,220,5,20,0,0,220,225,5,21,0,0,221,222,
        5,8,0,0,222,224,5,21,0,0,223,221,1,0,0,0,224,227,1,0,0,0,225,223,
        1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,
        5,16,0,0,229,3,1,0,0,0,230,232,5,16,0,0,231,230,1,0,0,0,232,235,
        1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,
        1,0,0,0,236,238,3,6,3,0,237,239,3,8,4,0,238,237,1,0,0,0,238,239,
        1,0,0,0,239,5,1,0,0,0,240,241,5,22,0,0,241,243,5,7,0,0,242,244,5,
        16,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,
        0,0,0,246,7,1,0,0,0,247,249,3,10,5,0,248,247,1,0,0,0,249,250,1,0,
        0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,9,1,0,0,0,252,253,5,23,0,
        0,253,258,5,24,0,0,254,255,5,8,0,0,255,257,5,24,0,0,256,254,1,0,
        0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,
        0,0,260,258,1,0,0,0,261,262,5,16,0,0,262,11,1,0,0,0,263,265,5,16,
        0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,
        0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,271,3,14,7,0,270,272,3,16,
        8,0,271,270,1,0,0,0,271,272,1,0,0,0,272,13,1,0,0,0,273,274,5,25,
        0,0,274,276,5,7,0,0,275,277,5,16,0,0,276,275,1,0,0,0,277,278,1,0,
        0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,15,1,0,0,0,280,282,3,18,
        9,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,1,0,
        0,0,284,17,1,0,0,0,285,286,5,26,0,0,286,287,5,135,0,0,287,288,3,
        20,10,0,288,289,5,16,0,0,289,19,1,0,0,0,290,291,5,1,0,0,291,292,
        3,22,11,0,292,293,5,2,0,0,293,21,1,0,0,0,294,302,3,162,81,0,295,
        297,5,8,0,0,296,298,5,16,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,
        299,1,0,0,0,299,301,3,162,81,0,300,295,1,0,0,0,301,304,1,0,0,0,302,
        300,1,0,0,0,302,303,1,0,0,0,303,23,1,0,0,0,304,302,1,0,0,0,305,307,
        5,16,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,
        1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,313,3,26,13,0,312,314,
        3,28,14,0,313,312,1,0,0,0,313,314,1,0,0,0,314,25,1,0,0,0,315,316,
        5,31,0,0,316,318,5,7,0,0,317,319,5,16,0,0,318,317,1,0,0,0,319,320,
        1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,27,1,0,0,0,322,325,3,
        30,15,0,323,325,3,32,16,0,324,322,1,0,0,0,324,323,1,0,0,0,325,326,
        1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,29,1,0,0,0,328,329,5,
        32,0,0,329,330,5,135,0,0,330,331,5,133,0,0,331,332,5,8,0,0,332,333,
        3,20,10,0,333,334,5,16,0,0,334,31,1,0,0,0,335,336,5,33,0,0,336,337,
        3,34,17,0,337,338,5,7,0,0,338,339,5,16,0,0,339,340,3,36,18,0,340,
        350,5,30,0,0,341,343,5,16,0,0,342,341,1,0,0,0,343,346,1,0,0,0,344,
        342,1,0,0,0,344,345,1,0,0,0,345,351,1,0,0,0,346,344,1,0,0,0,347,
        349,5,0,0,1,348,347,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,
        344,1,0,0,0,350,348,1,0,0,0,351,33,1,0,0,0,352,353,5,135,0,0,353,
        355,5,3,0,0,354,356,3,76,38,0,355,354,1,0,0,0,355,356,1,0,0,0,356,
        357,1,0,0,0,357,360,5,4,0,0,358,359,5,14,0,0,359,361,3,78,39,0,360,
        358,1,0,0,0,360,361,1,0,0,0,361,35,1,0,0,0,362,364,3,38,19,0,363,
        362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,
        37,1,0,0,0,367,365,1,0,0,0,368,369,3,90,45,0,369,370,5,16,0,0,370,
        385,1,0,0,0,371,372,3,106,53,0,372,373,5,16,0,0,373,385,1,0,0,0,
        374,375,3,114,57,0,375,376,5,16,0,0,376,385,1,0,0,0,377,378,3,152,
        76,0,378,379,5,16,0,0,379,385,1,0,0,0,380,381,3,130,65,0,381,382,
        5,16,0,0,382,385,1,0,0,0,383,385,5,16,0,0,384,368,1,0,0,0,384,371,
        1,0,0,0,384,374,1,0,0,0,384,377,1,0,0,0,384,380,1,0,0,0,384,383,
        1,0,0,0,385,39,1,0,0,0,386,388,5,16,0,0,387,386,1,0,0,0,388,391,
        1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,
        1,0,0,0,392,394,3,42,21,0,393,395,3,44,22,0,394,393,1,0,0,0,394,
        395,1,0,0,0,395,41,1,0,0,0,396,397,5,27,0,0,397,399,5,7,0,0,398,
        400,5,16,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,
        402,1,0,0,0,402,43,1,0,0,0,403,405,3,72,36,0,404,403,1,0,0,0,405,
        406,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,45,1,0,0,0,408,410,
        5,16,0,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,
        1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,415,3,48,24,0,415,416,
        3,50,25,0,416,47,1,0,0,0,417,418,5,28,0,0,418,420,5,7,0,0,419,421,
        5,16,0,0,420,419,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,0,422,423,
        1,0,0,0,423,49,1,0,0,0,424,425,3,72,36,0,425,51,1,0,0,0,426,428,
        5,16,0,0,427,426,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,
        1,0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,434,3,54,27,0,433,435,
        3,56,28,0,434,433,1,0,0,0,434,435,1,0,0,0,435,53,1,0,0,0,436,437,
        5,34,0,0,437,439,5,7,0,0,438,440,5,16,0,0,439,438,1,0,0,0,440,441,
        1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,55,1,0,0,0,443,446,3,
        58,29,0,444,446,3,70,35,0,445,443,1,0,0,0,445,444,1,0,0,0,446,447,
        1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,57,1,0,0,0,449,450,5,
        35,0,0,450,451,5,1,0,0,451,456,3,190,95,0,452,453,5,8,0,0,453,455,
        3,190,95,0,454,452,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,
        1,0,0,0,457,459,1,0,0,0,458,456,1,0,0,0,459,460,5,2,0,0,460,461,
        5,7,0,0,461,462,3,60,30,0,462,59,1,0,0,0,463,464,5,5,0,0,464,469,
        3,62,31,0,465,466,5,8,0,0,466,468,3,62,31,0,467,465,1,0,0,0,468,
        471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,
        469,1,0,0,0,472,473,5,6,0,0,473,61,1,0,0,0,474,477,3,64,32,0,475,
        477,3,66,33,0,476,474,1,0,0,0,476,475,1,0,0,0,477,63,1,0,0,0,478,
        479,5,11,0,0,479,481,3,178,89,0,480,482,3,68,34,0,481,480,1,0,0,
        0,481,482,1,0,0,0,482,485,1,0,0,0,483,484,5,7,0,0,484,486,3,60,30,
        0,485,483,1,0,0,0,485,486,1,0,0,0,486,65,1,0,0,0,487,490,3,178,89,
        0,488,489,5,7,0,0,489,491,3,60,30,0,490,488,1,0,0,0,490,491,1,0,
        0,0,491,67,1,0,0,0,492,493,5,3,0,0,493,494,3,178,89,0,494,495,5,
        4,0,0,495,69,1,0,0,0,496,497,5,36,0,0,497,498,3,174,87,0,498,499,
        5,8,0,0,499,500,5,1,0,0,500,505,3,176,88,0,501,502,5,8,0,0,502,504,
        3,176,88,0,503,501,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,
        1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,5,2,0,0,509,71,1,
        0,0,0,510,511,5,29,0,0,511,512,3,74,37,0,512,513,5,7,0,0,513,514,
        5,16,0,0,514,515,3,82,41,0,515,525,5,30,0,0,516,518,5,16,0,0,517,
        516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,
        526,1,0,0,0,521,519,1,0,0,0,522,524,5,0,0,1,523,522,1,0,0,0,523,
        524,1,0,0,0,524,526,1,0,0,0,525,519,1,0,0,0,525,523,1,0,0,0,526,
        73,1,0,0,0,527,528,5,135,0,0,528,530,5,3,0,0,529,531,3,76,38,0,530,
        529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,538,5,4,0,0,533,
        534,5,14,0,0,534,535,5,3,0,0,535,536,3,78,39,0,536,537,5,4,0,0,537,
        539,1,0,0,0,538,533,1,0,0,0,538,539,1,0,0,0,539,75,1,0,0,0,540,545,
        3,80,40,0,541,542,5,8,0,0,542,544,3,80,40,0,543,541,1,0,0,0,544,
        547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,77,1,0,0,0,547,545,
        1,0,0,0,548,553,3,80,40,0,549,550,5,8,0,0,550,552,3,80,40,0,551,
        549,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,
        79,1,0,0,0,555,553,1,0,0,0,556,557,3,180,90,0,557,558,5,135,0,0,
        558,81,1,0,0,0,559,561,3,84,42,0,560,559,1,0,0,0,561,564,1,0,0,0,
        562,560,1,0,0,0,562,563,1,0,0,0,563,83,1,0,0,0,564,562,1,0,0,0,565,
        568,3,86,43,0,566,568,3,88,44,0,567,565,1,0,0,0,567,566,1,0,0,0,
        568,85,1,0,0,0,569,570,5,135,0,0,570,572,5,7,0,0,571,573,5,16,0,
        0,572,571,1,0,0,0,572,573,1,0,0,0,573,87,1,0,0,0,574,575,3,90,45,
        0,575,576,5,16,0,0,576,601,1,0,0,0,577,578,3,104,52,0,578,579,5,
        16,0,0,579,601,1,0,0,0,580,581,3,114,57,0,581,582,5,16,0,0,582,601,
        1,0,0,0,583,584,3,106,53,0,584,585,5,16,0,0,585,601,1,0,0,0,586,
        587,3,122,61,0,587,588,5,16,0,0,588,601,1,0,0,0,589,590,3,130,65,
        0,590,591,5,16,0,0,591,601,1,0,0,0,592,593,3,152,76,0,593,594,5,
        16,0,0,594,601,1,0,0,0,595,596,3,92,46,0,596,597,5,16,0,0,597,601,
        1,0,0,0,598,601,3,102,51,0,599,601,5,16,0,0,600,574,1,0,0,0,600,
        577,1,0,0,0,600,580,1,0,0,0,600,583,1,0,0,0,600,586,1,0,0,0,600,
        589,1,0,0,0,600,592,1,0,0,0,600,595,1,0,0,0,600,598,1,0,0,0,600,
        599,1,0,0,0,601,89,1,0,0,0,602,603,3,180,90,0,603,608,5,135,0,0,
        604,605,5,8,0,0,605,607,5,135,0,0,606,604,1,0,0,0,607,610,1,0,0,
        0,608,606,1,0,0,0,608,609,1,0,0,0,609,91,1,0,0,0,610,608,1,0,0,0,
        611,612,7,0,0,0,612,614,5,3,0,0,613,615,3,96,48,0,614,613,1,0,0,
        0,614,615,1,0,0,0,615,616,1,0,0,0,616,619,5,4,0,0,617,618,5,14,0,
        0,618,620,3,98,49,0,619,617,1,0,0,0,619,620,1,0,0,0,620,93,1,0,0,
        0,621,624,3,162,81,0,622,624,3,188,94,0,623,621,1,0,0,0,623,622,
        1,0,0,0,624,95,1,0,0,0,625,630,3,94,47,0,626,627,5,8,0,0,627,629,
        3,94,47,0,628,626,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,
        1,0,0,0,631,97,1,0,0,0,632,630,1,0,0,0,633,638,3,188,94,0,634,635,
        5,8,0,0,635,637,3,188,94,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,
        1,0,0,0,638,639,1,0,0,0,639,99,1,0,0,0,640,638,1,0,0,0,641,642,5,
        12,0,0,642,647,3,188,94,0,643,644,5,8,0,0,644,646,3,188,94,0,645,
        643,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,
        650,1,0,0,0,649,647,1,0,0,0,650,651,5,13,0,0,651,101,1,0,0,0,652,
        653,5,135,0,0,653,654,3,98,49,0,654,103,1,0,0,0,655,656,5,43,0,0,
        656,657,3,188,94,0,657,658,5,8,0,0,658,659,3,188,94,0,659,660,5,
        8,0,0,660,661,5,135,0,0,661,700,1,0,0,0,662,663,5,44,0,0,663,664,
        3,188,94,0,664,665,5,8,0,0,665,666,3,188,94,0,666,667,5,8,0,0,667,
        668,5,135,0,0,668,700,1,0,0,0,669,670,5,45,0,0,670,671,3,188,94,
        0,671,672,5,8,0,0,672,673,3,188,94,0,673,674,5,8,0,0,674,675,5,135,
        0,0,675,700,1,0,0,0,676,677,5,46,0,0,677,678,3,188,94,0,678,679,
        5,8,0,0,679,680,3,188,94,0,680,681,5,8,0,0,681,682,5,135,0,0,682,
        700,1,0,0,0,683,684,5,47,0,0,684,685,3,188,94,0,685,686,5,8,0,0,
        686,687,3,188,94,0,687,688,5,8,0,0,688,689,5,135,0,0,689,700,1,0,
        0,0,690,691,5,48,0,0,691,692,3,188,94,0,692,693,5,8,0,0,693,694,
        3,188,94,0,694,695,5,8,0,0,695,696,5,135,0,0,696,700,1,0,0,0,697,
        698,5,49,0,0,698,700,5,135,0,0,699,655,1,0,0,0,699,662,1,0,0,0,699,
        669,1,0,0,0,699,676,1,0,0,0,699,683,1,0,0,0,699,690,1,0,0,0,699,
        697,1,0,0,0,700,105,1,0,0,0,701,705,3,108,54,0,702,705,3,110,55,
        0,703,705,3,112,56,0,704,701,1,0,0,0,704,702,1,0,0,0,704,703,1,0,
        0,0,705,107,1,0,0,0,706,707,5,50,0,0,707,708,3,188,94,0,708,709,
        5,8,0,0,709,710,7,1,0,0,710,717,1,0,0,0,711,712,5,51,0,0,712,713,
        3,188,94,0,713,714,5,8,0,0,714,715,3,188,94,0,715,717,1,0,0,0,716,
        706,1,0,0,0,716,711,1,0,0,0,717,109,1,0,0,0,718,719,5,52,0,0,719,
        720,3,188,94,0,720,721,5,8,0,0,721,722,3,188,94,0,722,723,5,8,0,
        0,723,724,3,188,94,0,724,775,1,0,0,0,725,726,5,53,0,0,726,727,3,
        188,94,0,727,728,5,8,0,0,728,729,3,188,94,0,729,730,5,8,0,0,730,
        731,3,188,94,0,731,775,1,0,0,0,732,733,5,54,0,0,733,734,3,188,94,
        0,734,735,5,8,0,0,735,736,3,188,94,0,736,737,5,8,0,0,737,738,3,188,
        94,0,738,775,1,0,0,0,739,740,5,55,0,0,740,741,3,188,94,0,741,742,
        5,8,0,0,742,743,3,188,94,0,743,744,5,8,0,0,744,745,3,188,94,0,745,
        775,1,0,0,0,746,747,5,56,0,0,747,748,3,188,94,0,748,749,5,8,0,0,
        749,750,3,188,94,0,750,751,5,8,0,0,751,752,7,1,0,0,752,775,1,0,0,
        0,753,754,5,57,0,0,754,755,3,188,94,0,755,756,5,8,0,0,756,757,3,
        188,94,0,757,758,5,8,0,0,758,759,7,1,0,0,759,775,1,0,0,0,760,761,
        5,58,0,0,761,762,3,188,94,0,762,763,5,8,0,0,763,764,3,188,94,0,764,
        765,5,8,0,0,765,766,7,1,0,0,766,775,1,0,0,0,767,768,5,59,0,0,768,
        769,3,188,94,0,769,770,5,8,0,0,770,771,3,188,94,0,771,772,5,8,0,
        0,772,773,7,1,0,0,773,775,1,0,0,0,774,718,1,0,0,0,774,725,1,0,0,
        0,774,732,1,0,0,0,774,739,1,0,0,0,774,746,1,0,0,0,774,753,1,0,0,
        0,774,760,1,0,0,0,774,767,1,0,0,0,775,111,1,0,0,0,776,777,5,60,0,
        0,777,778,3,188,94,0,778,779,5,8,0,0,779,780,3,188,94,0,780,787,
        1,0,0,0,781,782,5,61,0,0,782,783,3,188,94,0,783,784,5,8,0,0,784,
        785,3,188,94,0,785,787,1,0,0,0,786,776,1,0,0,0,786,781,1,0,0,0,787,
        113,1,0,0,0,788,792,3,116,58,0,789,792,3,118,59,0,790,792,3,120,
        60,0,791,788,1,0,0,0,791,789,1,0,0,0,791,790,1,0,0,0,792,115,1,0,
        0,0,793,794,5,62,0,0,794,795,3,188,94,0,795,796,5,8,0,0,796,797,
        5,133,0,0,797,804,1,0,0,0,798,799,5,63,0,0,799,800,3,188,94,0,800,
        801,5,8,0,0,801,802,3,188,94,0,802,804,1,0,0,0,803,793,1,0,0,0,803,
        798,1,0,0,0,804,117,1,0,0,0,805,806,5,64,0,0,806,807,3,188,94,0,
        807,808,5,8,0,0,808,809,3,188,94,0,809,810,5,8,0,0,810,811,3,188,
        94,0,811,832,1,0,0,0,812,813,5,65,0,0,813,814,3,188,94,0,814,815,
        5,8,0,0,815,816,3,188,94,0,816,832,1,0,0,0,817,818,5,66,0,0,818,
        819,3,188,94,0,819,820,5,8,0,0,820,821,3,188,94,0,821,822,5,8,0,
        0,822,823,3,188,94,0,823,832,1,0,0,0,824,825,5,67,0,0,825,826,3,
        188,94,0,826,827,5,8,0,0,827,828,3,188,94,0,828,829,5,8,0,0,829,
        830,3,188,94,0,830,832,1,0,0,0,831,805,1,0,0,0,831,812,1,0,0,0,831,
        817,1,0,0,0,831,824,1,0,0,0,832,119,1,0,0,0,833,834,5,68,0,0,834,
        835,3,188,94,0,835,836,5,8,0,0,836,837,3,188,94,0,837,838,5,8,0,
        0,838,839,3,188,94,0,839,890,1,0,0,0,840,841,5,69,0,0,841,842,3,
        188,94,0,842,843,5,8,0,0,843,844,3,188,94,0,844,845,5,8,0,0,845,
        846,3,188,94,0,846,890,1,0,0,0,847,848,5,70,0,0,848,849,3,188,94,
        0,849,850,5,8,0,0,850,851,3,188,94,0,851,852,5,8,0,0,852,853,3,188,
        94,0,853,890,1,0,0,0,854,855,5,71,0,0,855,856,3,188,94,0,856,857,
        5,8,0,0,857,858,3,188,94,0,858,859,5,8,0,0,859,860,3,188,94,0,860,
        890,1,0,0,0,861,862,5,72,0,0,862,863,3,188,94,0,863,864,5,8,0,0,
        864,865,3,188,94,0,865,866,5,8,0,0,866,867,5,133,0,0,867,890,1,0,
        0,0,868,869,5,73,0,0,869,870,3,188,94,0,870,871,5,8,0,0,871,872,
        3,188,94,0,872,873,5,8,0,0,873,874,5,133,0,0,874,890,1,0,0,0,875,
        876,5,74,0,0,876,877,3,188,94,0,877,878,5,8,0,0,878,879,3,188,94,
        0,879,880,5,8,0,0,880,881,5,133,0,0,881,890,1,0,0,0,882,883,5,75,
        0,0,883,884,3,188,94,0,884,885,5,8,0,0,885,886,3,188,94,0,886,887,
        5,8,0,0,887,888,5,133,0,0,888,890,1,0,0,0,889,833,1,0,0,0,889,840,
        1,0,0,0,889,847,1,0,0,0,889,854,1,0,0,0,889,861,1,0,0,0,889,868,
        1,0,0,0,889,875,1,0,0,0,889,882,1,0,0,0,890,121,1,0,0,0,891,894,
        3,124,62,0,892,894,3,126,63,0,893,891,1,0,0,0,893,892,1,0,0,0,894,
        123,1,0,0,0,895,896,5,76,0,0,896,927,3,188,94,0,897,898,5,77,0,0,
        898,927,3,188,94,0,899,900,5,78,0,0,900,927,3,188,94,0,901,902,5,
        79,0,0,902,927,3,188,94,0,903,904,5,80,0,0,904,927,3,188,94,0,905,
        906,5,81,0,0,906,927,3,188,94,0,907,908,5,82,0,0,908,927,3,188,94,
        0,909,910,5,83,0,0,910,927,3,188,94,0,911,912,5,84,0,0,912,913,3,
        188,94,0,913,914,5,8,0,0,914,915,3,188,94,0,915,927,1,0,0,0,916,
        917,5,85,0,0,917,918,3,188,94,0,918,919,5,8,0,0,919,920,3,188,94,
        0,920,927,1,0,0,0,921,922,5,86,0,0,922,923,3,188,94,0,923,924,5,
        8,0,0,924,925,3,188,94,0,925,927,1,0,0,0,926,895,1,0,0,0,926,897,
        1,0,0,0,926,899,1,0,0,0,926,901,1,0,0,0,926,903,1,0,0,0,926,905,
        1,0,0,0,926,907,1,0,0,0,926,909,1,0,0,0,926,911,1,0,0,0,926,916,
        1,0,0,0,926,921,1,0,0,0,927,125,1,0,0,0,928,929,5,87,0,0,929,930,
        5,3,0,0,930,931,3,128,64,0,931,932,5,4,0,0,932,933,3,188,94,0,933,
        983,1,0,0,0,934,935,5,88,0,0,935,936,5,3,0,0,936,937,3,128,64,0,
        937,938,5,4,0,0,938,939,3,188,94,0,939,983,1,0,0,0,940,941,5,89,
        0,0,941,942,5,3,0,0,942,943,3,128,64,0,943,944,5,4,0,0,944,945,3,
        188,94,0,945,983,1,0,0,0,946,947,5,90,0,0,947,948,5,3,0,0,948,949,
        3,128,64,0,949,950,5,8,0,0,950,951,3,128,64,0,951,952,5,4,0,0,952,
        953,3,188,94,0,953,983,1,0,0,0,954,955,5,91,0,0,955,956,5,3,0,0,
        956,957,3,128,64,0,957,958,5,4,0,0,958,959,3,188,94,0,959,960,5,
        8,0,0,960,961,3,188,94,0,961,983,1,0,0,0,962,963,5,92,0,0,963,964,
        5,3,0,0,964,965,3,128,64,0,965,966,5,4,0,0,966,967,3,188,94,0,967,
        968,5,8,0,0,968,969,3,188,94,0,969,983,1,0,0,0,970,971,5,93,0,0,
        971,972,5,3,0,0,972,973,3,128,64,0,973,974,5,8,0,0,974,975,3,128,
        64,0,975,976,5,8,0,0,976,977,3,128,64,0,977,978,5,8,0,0,978,979,
        3,128,64,0,979,980,5,4,0,0,980,981,3,188,94,0,981,983,1,0,0,0,982,
        928,1,0,0,0,982,934,1,0,0,0,982,940,1,0,0,0,982,946,1,0,0,0,982,
        954,1,0,0,0,982,962,1,0,0,0,982,970,1,0,0,0,983,127,1,0,0,0,984,
        987,5,135,0,0,985,987,3,162,81,0,986,984,1,0,0,0,986,985,1,0,0,0,
        987,129,1,0,0,0,988,994,3,132,66,0,989,994,3,140,70,0,990,994,3,
        142,71,0,991,994,3,144,72,0,992,994,3,146,73,0,993,988,1,0,0,0,993,
        989,1,0,0,0,993,990,1,0,0,0,993,991,1,0,0,0,993,992,1,0,0,0,994,
        131,1,0,0,0,995,996,5,96,0,0,996,997,5,3,0,0,997,998,3,148,74,0,
        998,999,5,8,0,0,999,1000,3,150,75,0,1000,1001,5,4,0,0,1001,1002,
        3,188,94,0,1002,1066,1,0,0,0,1003,1004,5,97,0,0,1004,1005,5,3,0,
        0,1005,1006,3,148,74,0,1006,1007,5,8,0,0,1007,1008,3,148,74,0,1008,
        1009,5,8,0,0,1009,1010,3,148,74,0,1010,1011,5,8,0,0,1011,1012,3,
        150,75,0,1012,1013,5,4,0,0,1013,1014,3,188,94,0,1014,1066,1,0,0,
        0,1015,1016,5,98,0,0,1016,1017,5,3,0,0,1017,1018,3,148,74,0,1018,
        1019,5,8,0,0,1019,1020,3,148,74,0,1020,1021,5,8,0,0,1021,1022,3,
        148,74,0,1022,1023,5,8,0,0,1023,1024,3,150,75,0,1024,1025,5,4,0,
        0,1025,1026,3,188,94,0,1026,1066,1,0,0,0,1027,1028,5,99,0,0,1028,
        1029,5,3,0,0,1029,1030,3,148,74,0,1030,1031,5,8,0,0,1031,1032,3,
        148,74,0,1032,1033,5,8,0,0,1033,1034,3,148,74,0,1034,1035,5,8,0,
        0,1035,1036,3,150,75,0,1036,1037,5,4,0,0,1037,1038,3,188,94,0,1038,
        1066,1,0,0,0,1039,1040,5,100,0,0,1040,1041,5,3,0,0,1041,1042,3,148,
        74,0,1042,1043,5,8,0,0,1043,1044,3,148,74,0,1044,1045,5,8,0,0,1045,
        1046,3,148,74,0,1046,1047,5,8,0,0,1047,1048,3,148,74,0,1048,1049,
        5,8,0,0,1049,1050,3,150,75,0,1050,1051,5,4,0,0,1051,1052,3,188,94,
        0,1052,1066,1,0,0,0,1053,1054,5,101,0,0,1054,1055,5,3,0,0,1055,1056,
        3,148,74,0,1056,1057,5,8,0,0,1057,1058,3,148,74,0,1058,1059,5,8,
        0,0,1059,1060,3,150,75,0,1060,1061,5,4,0,0,1061,1062,3,188,94,0,
        1062,1066,1,0,0,0,1063,1066,3,134,67,0,1064,1066,3,136,68,0,1065,
        995,1,0,0,0,1065,1003,1,0,0,0,1065,1015,1,0,0,0,1065,1027,1,0,0,
        0,1065,1039,1,0,0,0,1065,1053,1,0,0,0,1065,1063,1,0,0,0,1065,1064,
        1,0,0,0,1066,133,1,0,0,0,1067,1068,5,135,0,0,1068,1069,3,188,94,
        0,1069,135,1,0,0,0,1070,1071,5,135,0,0,1071,1073,5,3,0,0,1072,1074,
        3,138,69,0,1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,
        1075,1076,5,4,0,0,1076,1077,3,188,94,0,1077,137,1,0,0,0,1078,1081,
        3,148,74,0,1079,1080,5,8,0,0,1080,1082,3,148,74,0,1081,1079,1,0,
        0,0,1081,1082,1,0,0,0,1082,139,1,0,0,0,1083,1084,5,102,0,0,1084,
        1085,3,188,94,0,1085,1086,5,8,0,0,1086,1087,3,188,94,0,1087,1088,
        5,8,0,0,1088,1089,3,188,94,0,1089,1141,1,0,0,0,1090,1091,5,103,0,
        0,1091,1092,3,188,94,0,1092,1093,5,8,0,0,1093,1094,3,188,94,0,1094,
        1095,5,8,0,0,1095,1096,3,188,94,0,1096,1141,1,0,0,0,1097,1098,5,
        104,0,0,1098,1099,3,188,94,0,1099,1100,5,8,0,0,1100,1101,3,188,94,
        0,1101,1102,5,8,0,0,1102,1103,3,188,94,0,1103,1141,1,0,0,0,1104,
        1105,5,105,0,0,1105,1106,3,188,94,0,1106,1107,5,8,0,0,1107,1108,
        3,188,94,0,1108,1109,5,8,0,0,1109,1110,3,188,94,0,1110,1141,1,0,
        0,0,1111,1112,5,106,0,0,1112,1113,3,188,94,0,1113,1114,5,8,0,0,1114,
        1115,3,188,94,0,1115,1116,5,8,0,0,1116,1117,3,188,94,0,1117,1141,
        1,0,0,0,1118,1119,5,107,0,0,1119,1120,3,188,94,0,1120,1121,5,8,0,
        0,1121,1122,3,188,94,0,1122,1123,5,8,0,0,1123,1124,3,188,94,0,1124,
        1141,1,0,0,0,1125,1126,5,108,0,0,1126,1127,3,188,94,0,1127,1128,
        5,8,0,0,1128,1129,3,188,94,0,1129,1141,1,0,0,0,1130,1131,5,109,0,
        0,1131,1132,5,3,0,0,1132,1133,3,170,85,0,1133,1134,5,8,0,0,1134,
        1135,3,170,85,0,1135,1136,5,4,0,0,1136,1137,3,188,94,0,1137,1138,
        5,8,0,0,1138,1139,3,188,94,0,1139,1141,1,0,0,0,1140,1083,1,0,0,0,
        1140,1090,1,0,0,0,1140,1097,1,0,0,0,1140,1104,1,0,0,0,1140,1111,
        1,0,0,0,1140,1118,1,0,0,0,1140,1125,1,0,0,0,1140,1130,1,0,0,0,1141,
        141,1,0,0,0,1142,1143,5,110,0,0,1143,1144,3,172,86,0,1144,1145,5,
        8,0,0,1145,1146,3,162,81,0,1146,1158,1,0,0,0,1147,1148,5,111,0,0,
        1148,1149,3,172,86,0,1149,1150,5,8,0,0,1150,1151,3,162,81,0,1151,
        1158,1,0,0,0,1152,1153,5,112,0,0,1153,1154,3,172,86,0,1154,1155,
        5,8,0,0,1155,1156,3,162,81,0,1156,1158,1,0,0,0,1157,1142,1,0,0,0,
        1157,1147,1,0,0,0,1157,1152,1,0,0,0,1158,143,1,0,0,0,1159,1160,5,
        113,0,0,1160,1161,3,172,86,0,1161,1162,5,8,0,0,1162,1163,3,188,94,
        0,1163,1170,1,0,0,0,1164,1165,5,114,0,0,1165,1166,3,172,86,0,1166,
        1167,5,8,0,0,1167,1168,3,188,94,0,1168,1170,1,0,0,0,1169,1159,1,
        0,0,0,1169,1164,1,0,0,0,1170,145,1,0,0,0,1171,1172,5,115,0,0,1172,
        1179,3,172,86,0,1173,1174,5,116,0,0,1174,1175,3,188,94,0,1175,1176,
        5,8,0,0,1176,1177,3,172,86,0,1177,1179,1,0,0,0,1178,1171,1,0,0,0,
        1178,1173,1,0,0,0,1179,147,1,0,0,0,1180,1183,3,162,81,0,1181,1183,
        3,188,94,0,1182,1180,1,0,0,0,1182,1181,1,0,0,0,1183,149,1,0,0,0,
        1184,1187,3,170,85,0,1185,1187,3,188,94,0,1186,1184,1,0,0,0,1186,
        1185,1,0,0,0,1187,151,1,0,0,0,1188,1193,3,154,77,0,1189,1193,3,156,
        78,0,1190,1193,3,158,79,0,1191,1193,3,160,80,0,1192,1188,1,0,0,0,
        1192,1189,1,0,0,0,1192,1190,1,0,0,0,1192,1191,1,0,0,0,1193,153,1,
        0,0,0,1194,1195,5,117,0,0,1195,1196,3,188,94,0,1196,1197,5,8,0,0,
        1197,1198,3,170,85,0,1198,1205,1,0,0,0,1199,1200,5,118,0,0,1200,
        1201,3,188,94,0,1201,1202,5,8,0,0,1202,1203,3,188,94,0,1203,1205,
        1,0,0,0,1204,1194,1,0,0,0,1204,1199,1,0,0,0,1205,155,1,0,0,0,1206,
        1207,5,119,0,0,1207,1208,3,188,94,0,1208,1209,5,8,0,0,1209,1210,
        3,188,94,0,1210,1211,5,8,0,0,1211,1212,3,170,85,0,1212,1263,1,0,
        0,0,1213,1214,5,120,0,0,1214,1215,3,188,94,0,1215,1216,5,8,0,0,1216,
        1217,3,188,94,0,1217,1218,5,8,0,0,1218,1219,3,188,94,0,1219,1263,
        1,0,0,0,1220,1221,5,121,0,0,1221,1222,3,188,94,0,1222,1223,5,8,0,
        0,1223,1224,3,188,94,0,1224,1225,5,8,0,0,1225,1226,3,170,85,0,1226,
        1263,1,0,0,0,1227,1228,5,122,0,0,1228,1229,3,188,94,0,1229,1230,
        5,8,0,0,1230,1231,3,188,94,0,1231,1232,5,8,0,0,1232,1233,3,188,94,
        0,1233,1263,1,0,0,0,1234,1235,5,123,0,0,1235,1236,3,188,94,0,1236,
        1237,5,8,0,0,1237,1238,3,188,94,0,1238,1239,5,8,0,0,1239,1240,7,
        1,0,0,1240,1263,1,0,0,0,1241,1242,5,124,0,0,1242,1243,3,188,94,0,
        1243,1244,5,8,0,0,1244,1245,3,188,94,0,1245,1246,5,8,0,0,1246,1247,
        3,188,94,0,1247,1263,1,0,0,0,1248,1249,5,125,0,0,1249,1250,3,188,
        94,0,1250,1251,5,8,0,0,1251,1252,3,188,94,0,1252,1253,5,8,0,0,1253,
        1254,7,1,0,0,1254,1263,1,0,0,0,1255,1256,5,126,0,0,1256,1257,3,188,
        94,0,1257,1258,5,8,0,0,1258,1259,3,188,94,0,1259,1260,5,8,0,0,1260,
        1261,3,188,94,0,1261,1263,1,0,0,0,1262,1206,1,0,0,0,1262,1213,1,
        0,0,0,1262,1220,1,0,0,0,1262,1227,1,0,0,0,1262,1234,1,0,0,0,1262,
        1241,1,0,0,0,1262,1248,1,0,0,0,1262,1255,1,0,0,0,1263,157,1,0,0,
        0,1264,1265,5,127,0,0,1265,1266,3,172,86,0,1266,1267,5,8,0,0,1267,
        1268,3,170,85,0,1268,1285,1,0,0,0,1269,1270,5,128,0,0,1270,1271,
        3,172,86,0,1271,1272,5,8,0,0,1272,1273,3,188,94,0,1273,1285,1,0,
        0,0,1274,1275,5,129,0,0,1275,1276,3,190,95,0,1276,1277,5,8,0,0,1277,
        1278,3,188,94,0,1278,1285,1,0,0,0,1279,1280,5,130,0,0,1280,1281,
        3,190,95,0,1281,1282,5,8,0,0,1282,1283,3,170,85,0,1283,1285,1,0,
        0,0,1284,1264,1,0,0,0,1284,1269,1,0,0,0,1284,1274,1,0,0,0,1284,1279,
        1,0,0,0,1285,159,1,0,0,0,1286,1287,5,131,0,0,1287,1290,3,172,86,
        0,1288,1289,5,8,0,0,1289,1291,3,172,86,0,1290,1288,1,0,0,0,1291,
        1292,1,0,0,0,1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,1303,1,0,0,
        0,1294,1295,5,132,0,0,1295,1298,3,190,95,0,1296,1297,5,8,0,0,1297,
        1299,3,190,95,0,1298,1296,1,0,0,0,1299,1300,1,0,0,0,1300,1298,1,
        0,0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,0,1302,1286,1,0,0,0,1302,
        1294,1,0,0,0,1303,161,1,0,0,0,1304,1308,5,133,0,0,1305,1308,5,134,
        0,0,1306,1308,3,164,82,0,1307,1304,1,0,0,0,1307,1305,1,0,0,0,1307,
        1306,1,0,0,0,1308,163,1,0,0,0,1309,1310,5,3,0,0,1310,1311,3,166,
        83,0,1311,1312,5,8,0,0,1312,1313,3,168,84,0,1313,1314,5,4,0,0,1314,
        165,1,0,0,0,1315,1316,7,1,0,0,1316,167,1,0,0,0,1317,1318,7,1,0,0,
        1318,169,1,0,0,0,1319,1320,7,1,0,0,1320,1321,5,42,0,0,1321,171,1,
        0,0,0,1322,1325,3,174,87,0,1323,1325,3,176,88,0,1324,1322,1,0,0,
        0,1324,1323,1,0,0,0,1325,173,1,0,0,0,1326,1327,5,11,0,0,1327,1332,
        3,178,89,0,1328,1329,5,7,0,0,1329,1331,3,178,89,0,1330,1328,1,0,
        0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,175,
        1,0,0,0,1334,1332,1,0,0,0,1335,1336,5,10,0,0,1336,1339,3,178,89,
        0,1337,1338,5,7,0,0,1338,1340,3,178,89,0,1339,1337,1,0,0,0,1340,
        1341,1,0,0,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,177,1,0,0,
        0,1343,1345,5,136,0,0,1344,1343,1,0,0,0,1345,1348,1,0,0,0,1346,1344,
        1,0,0,0,1346,1347,1,0,0,0,1347,1350,1,0,0,0,1348,1346,1,0,0,0,1349,
        1351,5,135,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,179,1,0,
        0,0,1352,1356,3,182,91,0,1353,1356,3,184,92,0,1354,1356,3,186,93,
        0,1355,1352,1,0,0,0,1355,1353,1,0,0,0,1355,1354,1,0,0,0,1356,181,
        1,0,0,0,1357,1358,7,2,0,0,1358,183,1,0,0,0,1359,1360,3,182,91,0,
        1360,1361,5,1,0,0,1361,1362,7,3,0,0,1362,1363,5,2,0,0,1363,185,1,
        0,0,0,1364,1365,3,182,91,0,1365,1366,5,1,0,0,1366,1367,5,2,0,0,1367,
        187,1,0,0,0,1368,1372,5,135,0,0,1369,1370,5,1,0,0,1370,1371,7,3,
        0,0,1371,1373,5,2,0,0,1372,1369,1,0,0,0,1372,1373,1,0,0,0,1373,1376,
        1,0,0,0,1374,1376,3,190,95,0,1375,1368,1,0,0,0,1375,1374,1,0,0,0,
        1376,189,1,0,0,0,1377,1378,5,10,0,0,1378,1379,3,178,89,0,1379,191,
        1,0,0,0,107,193,196,199,202,205,208,211,216,225,233,238,245,250,
        258,266,271,278,283,297,302,308,313,320,324,326,344,348,350,355,
        360,365,384,389,394,401,406,411,422,429,434,441,445,447,456,469,
        476,481,485,490,505,519,523,525,530,538,545,553,562,567,572,600,
        608,614,619,623,630,638,647,699,704,716,774,786,791,803,831,889,
        893,926,982,986,993,1065,1073,1081,1140,1157,1169,1178,1182,1186,
        1192,1204,1262,1284,1292,1300,1302,1307,1324,1332,1341,1346,1350,
        1355,1372,1375
    ]

class QuietParser ( Parser ):

    grammarFileName = "QuietParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'['", "']'", "'('", "')'", "'{'", "'}'", 
                     "':'", "','", "'.'", "'$'", "'#'", "'<'", "'>'", "'->'", 
                     "'ctrl'", "<INVALID>", "' '", "'\\t'", "<INVALID>", 
                     "'using'", "<INVALID>", "'.file'", "'include'", "<INVALID>", 
                     "'.gate'", "'define'", "'.code'", "'.entry'", "'func'", 
                     "'end'", "'.pulse'", "'customwave'", "'defwave'", "'.layout'", 
                     "'port'", "'bind'", "'int'", "'float'", "'qubit'", 
                     "'time'", "'wave'", "<INVALID>", "'bne'", "'beq'", 
                     "'blt'", "'ble'", "'bgt'", "'bge'", "'jump'", "'ldd'", 
                     "'movd'", "'addd'", "'subd'", "'muld'", "'divd'", "'adddi'", 
                     "'subdi'", "'muldi'", "'divdi'", "'casti'", "'castd'", 
                     "'ld'", "'mov'", "'land'", "'lnot'", "'lor'", "'lxor'", 
                     "'add'", "'sub'", "'mul'", "'div'", "'addi'", "'subi'", 
                     "'muli'", "'divi'", "'H'", "'X'", "'Y'", "'Z'", "'S'", 
                     "'T'", "'Sdag'", "'Tdag'", "'CNOT'", "'CZ'", "'SWAP'", 
                     "'Rx'", "'Ry'", "'Rz'", "'Rxy'", "'CP'", "'CRz'", "'U4'", 
                     "'measure'", "'reset'", "'square'", "'cos'", "'sin'", 
                     "'gaussian'", "'drag'", "'ramp'", "'addp'", "'subp'", 
                     "'mulp'", "'convp'", "'joinp'", "'scalep'", "'flipp'", 
                     "'cutp'", "'setfreq'", "'shiftphase'", "'setphase'", 
                     "'play'", "'playmod'", "'capsignal'", "'capbit'", "'ldt'", 
                     "'movt'", "'addti'", "'addt'", "'subti'", "'subt'", 
                     "'multi'", "'mult'", "'divti'", "'divt'", "'waiti'", 
                     "'wait'", "'waitq'", "'waitqi'", "'sync'", "'syncq'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'pi'", "'2_pi'", "'pi_2'", "'pi_3'", "'pi_4'", "'pi_8'", 
                     "'2_pi_3'", "'3_pi_4'" ]

    symbolicNames = [ "<INVALID>", "BracketLeft", "BracketRight", "ParenLeft", 
                      "ParenRight", "BracesLeft", "BracesRight", "Colon", 
                      "Comma", "Dot", "PhyQubitSym", "PhyPortSym", "Less", 
                      "Greater", "RightArrow", "Control", "EOL", "WS", "TAB", 
                      "Comment", "Using", "ModuleName", "DotFile", "Include", 
                      "FileName", "DotGate", "Define", "DotCode", "DotEntry", 
                      "Func", "End", "DotPulse", "CustomWave", "DefWave", 
                      "DotLayout", "Port", "Bind", "IntType", "FloatType", 
                      "QubitType", "TimeType", "WaveType", "TimeUnit", "Bne", 
                      "Beq", "Blt", "Ble", "Bgt", "Bge", "Jump", "Ldd", 
                      "Movd", "Addd", "Subd", "Muld", "Divd", "Adddi", "Subdi", 
                      "Muldi", "Divdi", "Casti", "Castd", "Ld", "Mov", "Land", 
                      "Lnot", "Lor", "Lxor", "Add", "Sub", "Mul", "Div", 
                      "Addi", "Subi", "Muli", "Divi", "H", "X", "Y", "Z", 
                      "S", "T", "Sdag", "Tdag", "CNOT", "CZ", "SWAP", "Rx", 
                      "Ry", "Rz", "Rxy", "CP", "CRz", "U4", "Measure", "Reset", 
                      "Square", "Cos", "Sin", "Gaussian", "Drag", "Ramp", 
                      "Addp", "Subp", "Mulp", "Convp", "Joinp", "Scalep", 
                      "Flipp", "Cutp", "Setfreq", "Shiftphase", "Setphase", 
                      "Play", "Playmod", "CapSignal", "CapBit", "Ldt", "Movt", 
                      "Addti", "Addt", "Subti", "Subt", "Multi", "Mult", 
                      "Divti", "Divt", "Waiti", "Wait", "Waitq", "Waitqi", 
                      "Sync", "Syncq", "IntLiteral", "FloatLiteral", "Id", 
                      "Digit", "Float_pi", "Float_2_pi", "Float_pi_2", "Float_pi_3", 
                      "Float_pi_4", "Float_pi_8", "Float_2_pi_3", "Float_3_pi_4" ]

    RULE_prog = 0
    RULE_usingModule = 1
    RULE_fileSection = 2
    RULE_fileSecDecl = 3
    RULE_fileSecContent = 4
    RULE_includeContent = 5
    RULE_gateSection = 6
    RULE_gateSecDecl = 7
    RULE_gateSecContent = 8
    RULE_gateDefinition = 9
    RULE_numberArray = 10
    RULE_numberList = 11
    RULE_pulseSection = 12
    RULE_pulseSecDecl = 13
    RULE_pulseSecContent = 14
    RULE_customWave = 15
    RULE_waveFunction = 16
    RULE_waveFuncHeader = 17
    RULE_waveFuncBody = 18
    RULE_waveInsn = 19
    RULE_codeSection = 20
    RULE_codeSecDecl = 21
    RULE_codeSecContent = 22
    RULE_entrySection = 23
    RULE_entrySecDecl = 24
    RULE_entrySecContent = 25
    RULE_layoutSection = 26
    RULE_layoutSecDecl = 27
    RULE_layoutSecContent = 28
    RULE_portDecl = 29
    RULE_subPortList = 30
    RULE_subPort = 31
    RULE_phySubPort = 32
    RULE_lgcSubPort = 33
    RULE_portAlias = 34
    RULE_bindPort = 35
    RULE_function = 36
    RULE_funcHeader = 37
    RULE_inputArgs = 38
    RULE_outputArgs = 39
    RULE_formalVariable = 40
    RULE_funcBody = 41
    RULE_insnWithLabel = 42
    RULE_label = 43
    RULE_instruction = 44
    RULE_variableDecl = 45
    RULE_callFunc = 46
    RULE_actualPara = 47
    RULE_actualParaList = 48
    RULE_actualVariableList = 49
    RULE_controlQubit = 50
    RULE_quantumOpIns = 51
    RULE_moduleCtIns = 52
    RULE_moduleFmIns = 53
    RULE_dataTransFmIns = 54
    RULE_mathOpFmIns = 55
    RULE_typeConvFmIns = 56
    RULE_moduleImIns = 57
    RULE_dataTransImIns = 58
    RULE_logicOpImIns = 59
    RULE_mathOpImIns = 60
    RULE_moduleStdIns = 61
    RULE_noParaOpIns = 62
    RULE_paraOpIns = 63
    RULE_theta = 64
    RULE_modulePmIns = 65
    RULE_waveFormIns = 66
    RULE_customWaveFormIns = 67
    RULE_defWaveFormIns = 68
    RULE_defWaveInput = 69
    RULE_waveOpIns = 70
    RULE_portCfgIns = 71
    RULE_wavePlayIns = 72
    RULE_signalCapIns = 73
    RULE_pmFloatPara = 74
    RULE_pmTimePara = 75
    RULE_moduleTmIns = 76
    RULE_dataTransTmIns = 77
    RULE_mathOpTmIns = 78
    RULE_waitOpTmIns = 79
    RULE_syncOpTmIns = 80
    RULE_number = 81
    RULE_complexLiteral = 82
    RULE_realPart = 83
    RULE_imaginaryPart = 84
    RULE_timeLiteral = 85
    RULE_portLiteral = 86
    RULE_phyPort = 87
    RULE_lgcPort = 88
    RULE_string = 89
    RULE_variableType = 90
    RULE_ordinaryType = 91
    RULE_withLengthArrayType = 92
    RULE_noLengthArrayType = 93
    RULE_variable = 94
    RULE_phyQubit = 95

    ruleNames =  [ "prog", "usingModule", "fileSection", "fileSecDecl", 
                   "fileSecContent", "includeContent", "gateSection", "gateSecDecl", 
                   "gateSecContent", "gateDefinition", "numberArray", "numberList", 
                   "pulseSection", "pulseSecDecl", "pulseSecContent", "customWave", 
                   "waveFunction", "waveFuncHeader", "waveFuncBody", "waveInsn", 
                   "codeSection", "codeSecDecl", "codeSecContent", "entrySection", 
                   "entrySecDecl", "entrySecContent", "layoutSection", "layoutSecDecl", 
                   "layoutSecContent", "portDecl", "subPortList", "subPort", 
                   "phySubPort", "lgcSubPort", "portAlias", "bindPort", 
                   "function", "funcHeader", "inputArgs", "outputArgs", 
                   "formalVariable", "funcBody", "insnWithLabel", "label", 
                   "instruction", "variableDecl", "callFunc", "actualPara", 
                   "actualParaList", "actualVariableList", "controlQubit", 
                   "quantumOpIns", "moduleCtIns", "moduleFmIns", "dataTransFmIns", 
                   "mathOpFmIns", "typeConvFmIns", "moduleImIns", "dataTransImIns", 
                   "logicOpImIns", "mathOpImIns", "moduleStdIns", "noParaOpIns", 
                   "paraOpIns", "theta", "modulePmIns", "waveFormIns", "customWaveFormIns", 
                   "defWaveFormIns", "defWaveInput", "waveOpIns", "portCfgIns", 
                   "wavePlayIns", "signalCapIns", "pmFloatPara", "pmTimePara", 
                   "moduleTmIns", "dataTransTmIns", "mathOpTmIns", "waitOpTmIns", 
                   "syncOpTmIns", "number", "complexLiteral", "realPart", 
                   "imaginaryPart", "timeLiteral", "portLiteral", "phyPort", 
                   "lgcPort", "string", "variableType", "ordinaryType", 
                   "withLengthArrayType", "noLengthArrayType", "variable", 
                   "phyQubit" ]

    EOF = Token.EOF
    BracketLeft=1
    BracketRight=2
    ParenLeft=3
    ParenRight=4
    BracesLeft=5
    BracesRight=6
    Colon=7
    Comma=8
    Dot=9
    PhyQubitSym=10
    PhyPortSym=11
    Less=12
    Greater=13
    RightArrow=14
    Control=15
    EOL=16
    WS=17
    TAB=18
    Comment=19
    Using=20
    ModuleName=21
    DotFile=22
    Include=23
    FileName=24
    DotGate=25
    Define=26
    DotCode=27
    DotEntry=28
    Func=29
    End=30
    DotPulse=31
    CustomWave=32
    DefWave=33
    DotLayout=34
    Port=35
    Bind=36
    IntType=37
    FloatType=38
    QubitType=39
    TimeType=40
    WaveType=41
    TimeUnit=42
    Bne=43
    Beq=44
    Blt=45
    Ble=46
    Bgt=47
    Bge=48
    Jump=49
    Ldd=50
    Movd=51
    Addd=52
    Subd=53
    Muld=54
    Divd=55
    Adddi=56
    Subdi=57
    Muldi=58
    Divdi=59
    Casti=60
    Castd=61
    Ld=62
    Mov=63
    Land=64
    Lnot=65
    Lor=66
    Lxor=67
    Add=68
    Sub=69
    Mul=70
    Div=71
    Addi=72
    Subi=73
    Muli=74
    Divi=75
    H=76
    X=77
    Y=78
    Z=79
    S=80
    T=81
    Sdag=82
    Tdag=83
    CNOT=84
    CZ=85
    SWAP=86
    Rx=87
    Ry=88
    Rz=89
    Rxy=90
    CP=91
    CRz=92
    U4=93
    Measure=94
    Reset=95
    Square=96
    Cos=97
    Sin=98
    Gaussian=99
    Drag=100
    Ramp=101
    Addp=102
    Subp=103
    Mulp=104
    Convp=105
    Joinp=106
    Scalep=107
    Flipp=108
    Cutp=109
    Setfreq=110
    Shiftphase=111
    Setphase=112
    Play=113
    Playmod=114
    CapSignal=115
    CapBit=116
    Ldt=117
    Movt=118
    Addti=119
    Addt=120
    Subti=121
    Subt=122
    Multi=123
    Mult=124
    Divti=125
    Divt=126
    Waiti=127
    Wait=128
    Waitq=129
    Waitqi=130
    Sync=131
    Syncq=132
    IntLiteral=133
    FloatLiteral=134
    Id=135
    Digit=136
    Float_pi=137
    Float_2_pi=138
    Float_pi_2=139
    Float_pi_3=140
    Float_pi_4=141
    Float_pi_8=142
    Float_2_pi_3=143
    Float_3_pi_4=144

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def usingModule(self):
            return self.getTypedRuleContext(QuietParser.UsingModuleContext,0)


        def fileSection(self):
            return self.getTypedRuleContext(QuietParser.FileSectionContext,0)


        def gateSection(self):
            return self.getTypedRuleContext(QuietParser.GateSectionContext,0)


        def pulseSection(self):
            return self.getTypedRuleContext(QuietParser.PulseSectionContext,0)


        def codeSection(self):
            return self.getTypedRuleContext(QuietParser.CodeSectionContext,0)


        def entrySection(self):
            return self.getTypedRuleContext(QuietParser.EntrySectionContext,0)


        def layoutSection(self):
            return self.getTypedRuleContext(QuietParser.LayoutSectionContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_prog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProg" ):
                listener.enterProg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProg" ):
                listener.exitProg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProg" ):
                return visitor.visitProg(self)
            else:
                return visitor.visitChildren(self)




    def prog(self):

        localctx = QuietParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 192
                self.usingModule()


            self.state = 196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 195
                self.fileSection()


            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 198
                self.gateSection()


            self.state = 202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 201
                self.pulseSection()


            self.state = 205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 204
                self.codeSection()


            self.state = 208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 207
                self.entrySection()


            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16 or _la==34:
                self.state = 210
                self.layoutSection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(QuietParser.Using, 0)

        def ModuleName(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.ModuleName)
            else:
                return self.getToken(QuietParser.ModuleName, i)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_usingModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingModule" ):
                listener.enterUsingModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingModule" ):
                listener.exitUsingModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingModule" ):
                return visitor.visitUsingModule(self)
            else:
                return visitor.visitChildren(self)




    def usingModule(self):

        localctx = QuietParser.UsingModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_usingModule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 213
                self.match(QuietParser.EOL)
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 219
            self.match(QuietParser.Using)
            self.state = 220
            self.match(QuietParser.ModuleName)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 221
                self.match(QuietParser.Comma)
                self.state = 222
                self.match(QuietParser.ModuleName)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self.match(QuietParser.EOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileSecDecl(self):
            return self.getTypedRuleContext(QuietParser.FileSecDeclContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def fileSecContent(self):
            return self.getTypedRuleContext(QuietParser.FileSecContentContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_fileSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSection" ):
                listener.enterFileSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSection" ):
                listener.exitFileSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileSection" ):
                return visitor.visitFileSection(self)
            else:
                return visitor.visitChildren(self)




    def fileSection(self):

        localctx = QuietParser.FileSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fileSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 230
                self.match(QuietParser.EOL)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self.fileSecDecl()
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 237
                self.fileSecContent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSecDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DotFile(self):
            return self.getToken(QuietParser.DotFile, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_fileSecDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSecDecl" ):
                listener.enterFileSecDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSecDecl" ):
                listener.exitFileSecDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileSecDecl" ):
                return visitor.visitFileSecDecl(self)
            else:
                return visitor.visitChildren(self)




    def fileSecDecl(self):

        localctx = QuietParser.FileSecDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fileSecDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(QuietParser.DotFile)
            self.state = 241
            self.match(QuietParser.Colon)
            self.state = 243 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 242
                    self.match(QuietParser.EOL)

                else:
                    raise NoViableAltException(self)
                self.state = 245 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSecContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def includeContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.IncludeContentContext)
            else:
                return self.getTypedRuleContext(QuietParser.IncludeContentContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_fileSecContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSecContent" ):
                listener.enterFileSecContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSecContent" ):
                listener.exitFileSecContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileSecContent" ):
                return visitor.visitFileSecContent(self)
            else:
                return visitor.visitChildren(self)




    def fileSecContent(self):

        localctx = QuietParser.FileSecContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fileSecContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 247
                self.includeContent()
                self.state = 250 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==23):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Include(self):
            return self.getToken(QuietParser.Include, 0)

        def FileName(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.FileName)
            else:
                return self.getToken(QuietParser.FileName, i)

        def EOL(self):
            return self.getToken(QuietParser.EOL, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_includeContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeContent" ):
                listener.enterIncludeContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeContent" ):
                listener.exitIncludeContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeContent" ):
                return visitor.visitIncludeContent(self)
            else:
                return visitor.visitChildren(self)




    def includeContent(self):

        localctx = QuietParser.IncludeContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_includeContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(QuietParser.Include)
            self.state = 253
            self.match(QuietParser.FileName)
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 254
                self.match(QuietParser.Comma)
                self.state = 255
                self.match(QuietParser.FileName)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 261
            self.match(QuietParser.EOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gateSecDecl(self):
            return self.getTypedRuleContext(QuietParser.GateSecDeclContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def gateSecContent(self):
            return self.getTypedRuleContext(QuietParser.GateSecContentContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_gateSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateSection" ):
                listener.enterGateSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateSection" ):
                listener.exitGateSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateSection" ):
                return visitor.visitGateSection(self)
            else:
                return visitor.visitChildren(self)




    def gateSection(self):

        localctx = QuietParser.GateSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_gateSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 263
                self.match(QuietParser.EOL)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 269
            self.gateSecDecl()
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 270
                self.gateSecContent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateSecDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DotGate(self):
            return self.getToken(QuietParser.DotGate, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_gateSecDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateSecDecl" ):
                listener.enterGateSecDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateSecDecl" ):
                listener.exitGateSecDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateSecDecl" ):
                return visitor.visitGateSecDecl(self)
            else:
                return visitor.visitChildren(self)




    def gateSecDecl(self):

        localctx = QuietParser.GateSecDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_gateSecDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(QuietParser.DotGate)
            self.state = 274
            self.match(QuietParser.Colon)
            self.state = 276 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 275
                    self.match(QuietParser.EOL)

                else:
                    raise NoViableAltException(self)
                self.state = 278 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateSecContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gateDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.GateDefinitionContext)
            else:
                return self.getTypedRuleContext(QuietParser.GateDefinitionContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_gateSecContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateSecContent" ):
                listener.enterGateSecContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateSecContent" ):
                listener.exitGateSecContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateSecContent" ):
                return visitor.visitGateSecContent(self)
            else:
                return visitor.visitChildren(self)




    def gateSecContent(self):

        localctx = QuietParser.GateSecContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_gateSecContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 280
                self.gateDefinition()
                self.state = 283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Define(self):
            return self.getToken(QuietParser.Define, 0)

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def numberArray(self):
            return self.getTypedRuleContext(QuietParser.NumberArrayContext,0)


        def EOL(self):
            return self.getToken(QuietParser.EOL, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_gateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateDefinition" ):
                listener.enterGateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateDefinition" ):
                listener.exitGateDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateDefinition" ):
                return visitor.visitGateDefinition(self)
            else:
                return visitor.visitChildren(self)




    def gateDefinition(self):

        localctx = QuietParser.GateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_gateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(QuietParser.Define)
            self.state = 286
            self.match(QuietParser.Id)
            self.state = 287
            self.numberArray()
            self.state = 288
            self.match(QuietParser.EOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BracketLeft(self):
            return self.getToken(QuietParser.BracketLeft, 0)

        def numberList(self):
            return self.getTypedRuleContext(QuietParser.NumberListContext,0)


        def BracketRight(self):
            return self.getToken(QuietParser.BracketRight, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_numberArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberArray" ):
                listener.enterNumberArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberArray" ):
                listener.exitNumberArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberArray" ):
                return visitor.visitNumberArray(self)
            else:
                return visitor.visitChildren(self)




    def numberArray(self):

        localctx = QuietParser.NumberArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_numberArray)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(QuietParser.BracketLeft)
            self.state = 291
            self.numberList()
            self.state = 292
            self.match(QuietParser.BracketRight)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.NumberContext)
            else:
                return self.getTypedRuleContext(QuietParser.NumberContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_numberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberList" ):
                listener.enterNumberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberList" ):
                listener.exitNumberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberList" ):
                return visitor.visitNumberList(self)
            else:
                return visitor.visitChildren(self)




    def numberList(self):

        localctx = QuietParser.NumberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_numberList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.number()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 295
                self.match(QuietParser.Comma)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 296
                    self.match(QuietParser.EOL)


                self.state = 299
                self.number()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PulseSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pulseSecDecl(self):
            return self.getTypedRuleContext(QuietParser.PulseSecDeclContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def pulseSecContent(self):
            return self.getTypedRuleContext(QuietParser.PulseSecContentContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_pulseSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPulseSection" ):
                listener.enterPulseSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPulseSection" ):
                listener.exitPulseSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPulseSection" ):
                return visitor.visitPulseSection(self)
            else:
                return visitor.visitChildren(self)




    def pulseSection(self):

        localctx = QuietParser.PulseSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pulseSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 305
                self.match(QuietParser.EOL)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            self.pulseSecDecl()
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32 or _la==33:
                self.state = 312
                self.pulseSecContent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PulseSecDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DotPulse(self):
            return self.getToken(QuietParser.DotPulse, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_pulseSecDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPulseSecDecl" ):
                listener.enterPulseSecDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPulseSecDecl" ):
                listener.exitPulseSecDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPulseSecDecl" ):
                return visitor.visitPulseSecDecl(self)
            else:
                return visitor.visitChildren(self)




    def pulseSecDecl(self):

        localctx = QuietParser.PulseSecDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pulseSecDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(QuietParser.DotPulse)
            self.state = 316
            self.match(QuietParser.Colon)
            self.state = 318 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 317
                    self.match(QuietParser.EOL)

                else:
                    raise NoViableAltException(self)
                self.state = 320 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PulseSecContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def customWave(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.CustomWaveContext)
            else:
                return self.getTypedRuleContext(QuietParser.CustomWaveContext,i)


        def waveFunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.WaveFunctionContext)
            else:
                return self.getTypedRuleContext(QuietParser.WaveFunctionContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_pulseSecContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPulseSecContent" ):
                listener.enterPulseSecContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPulseSecContent" ):
                listener.exitPulseSecContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPulseSecContent" ):
                return visitor.visitPulseSecContent(self)
            else:
                return visitor.visitChildren(self)




    def pulseSecContent(self):

        localctx = QuietParser.PulseSecContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pulseSecContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 324
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 322
                    self.customWave()
                    pass
                elif token in [33]:
                    self.state = 323
                    self.waveFunction()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 326 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==32 or _la==33):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomWaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CustomWave(self):
            return self.getToken(QuietParser.CustomWave, 0)

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def numberArray(self):
            return self.getTypedRuleContext(QuietParser.NumberArrayContext,0)


        def EOL(self):
            return self.getToken(QuietParser.EOL, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_customWave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomWave" ):
                listener.enterCustomWave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomWave" ):
                listener.exitCustomWave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomWave" ):
                return visitor.visitCustomWave(self)
            else:
                return visitor.visitChildren(self)




    def customWave(self):

        localctx = QuietParser.CustomWaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customWave)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(QuietParser.CustomWave)
            self.state = 329
            self.match(QuietParser.Id)
            self.state = 330
            self.match(QuietParser.IntLiteral)
            self.state = 331
            self.match(QuietParser.Comma)
            self.state = 332
            self.numberArray()
            self.state = 333
            self.match(QuietParser.EOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaveFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DefWave(self):
            return self.getToken(QuietParser.DefWave, 0)

        def waveFuncHeader(self):
            return self.getTypedRuleContext(QuietParser.WaveFuncHeaderContext,0)


        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def waveFuncBody(self):
            return self.getTypedRuleContext(QuietParser.WaveFuncBodyContext,0)


        def End(self):
            return self.getToken(QuietParser.End, 0)

        def EOF(self):
            return self.getToken(QuietParser.EOF, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_waveFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaveFunction" ):
                listener.enterWaveFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaveFunction" ):
                listener.exitWaveFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaveFunction" ):
                return visitor.visitWaveFunction(self)
            else:
                return visitor.visitChildren(self)




    def waveFunction(self):

        localctx = QuietParser.WaveFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_waveFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(QuietParser.DefWave)
            self.state = 336
            self.waveFuncHeader()
            self.state = 337
            self.match(QuietParser.Colon)
            self.state = 338
            self.match(QuietParser.EOL)
            self.state = 339
            self.waveFuncBody()
            self.state = 340
            self.match(QuietParser.End)
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 341
                        self.match(QuietParser.EOL) 
                    self.state = 346
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

                pass

            elif la_ == 2:
                self.state = 348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self.match(QuietParser.EOF)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaveFuncHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def inputArgs(self):
            return self.getTypedRuleContext(QuietParser.InputArgsContext,0)


        def RightArrow(self):
            return self.getToken(QuietParser.RightArrow, 0)

        def outputArgs(self):
            return self.getTypedRuleContext(QuietParser.OutputArgsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_waveFuncHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaveFuncHeader" ):
                listener.enterWaveFuncHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaveFuncHeader" ):
                listener.exitWaveFuncHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaveFuncHeader" ):
                return visitor.visitWaveFuncHeader(self)
            else:
                return visitor.visitChildren(self)




    def waveFuncHeader(self):

        localctx = QuietParser.WaveFuncHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_waveFuncHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(QuietParser.Id)
            self.state = 353
            self.match(QuietParser.ParenLeft)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4260607557632) != 0):
                self.state = 354
                self.inputArgs()


            self.state = 357
            self.match(QuietParser.ParenRight)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 358
                self.match(QuietParser.RightArrow)
                self.state = 359
                self.outputArgs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaveFuncBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def waveInsn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.WaveInsnContext)
            else:
                return self.getTypedRuleContext(QuietParser.WaveInsnContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_waveFuncBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaveFuncBody" ):
                listener.enterWaveFuncBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaveFuncBody" ):
                listener.exitWaveFuncBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaveFuncBody" ):
                return visitor.visitWaveFuncBody(self)
            else:
                return visitor.visitChildren(self)




    def waveFuncBody(self):

        localctx = QuietParser.WaveFuncBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_waveFuncBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 1152921487491989505) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 687194767359) != 0):
                self.state = 362
                self.waveInsn()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaveInsnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDecl(self):
            return self.getTypedRuleContext(QuietParser.VariableDeclContext,0)


        def EOL(self):
            return self.getToken(QuietParser.EOL, 0)

        def moduleFmIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleFmInsContext,0)


        def moduleImIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleImInsContext,0)


        def moduleTmIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleTmInsContext,0)


        def modulePmIns(self):
            return self.getTypedRuleContext(QuietParser.ModulePmInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_waveInsn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaveInsn" ):
                listener.enterWaveInsn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaveInsn" ):
                listener.exitWaveInsn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaveInsn" ):
                return visitor.visitWaveInsn(self)
            else:
                return visitor.visitChildren(self)




    def waveInsn(self):

        localctx = QuietParser.WaveInsnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_waveInsn)
        try:
            self.state = 384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37, 38, 39, 40, 41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 368
                self.variableDecl()
                self.state = 369
                self.match(QuietParser.EOL)
                pass
            elif token in [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.moduleFmIns()
                self.state = 372
                self.match(QuietParser.EOL)
                pass
            elif token in [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 374
                self.moduleImIns()
                self.state = 375
                self.match(QuietParser.EOL)
                pass
            elif token in [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132]:
                self.enterOuterAlt(localctx, 4)
                self.state = 377
                self.moduleTmIns()
                self.state = 378
                self.match(QuietParser.EOL)
                pass
            elif token in [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 135]:
                self.enterOuterAlt(localctx, 5)
                self.state = 380
                self.modulePmIns()
                self.state = 381
                self.match(QuietParser.EOL)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 383
                self.match(QuietParser.EOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeSecDecl(self):
            return self.getTypedRuleContext(QuietParser.CodeSecDeclContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def codeSecContent(self):
            return self.getTypedRuleContext(QuietParser.CodeSecContentContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_codeSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSection" ):
                listener.enterCodeSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSection" ):
                listener.exitCodeSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeSection" ):
                return visitor.visitCodeSection(self)
            else:
                return visitor.visitChildren(self)




    def codeSection(self):

        localctx = QuietParser.CodeSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_codeSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 386
                self.match(QuietParser.EOL)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 392
            self.codeSecDecl()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 393
                self.codeSecContent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeSecDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DotCode(self):
            return self.getToken(QuietParser.DotCode, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_codeSecDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSecDecl" ):
                listener.enterCodeSecDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSecDecl" ):
                listener.exitCodeSecDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeSecDecl" ):
                return visitor.visitCodeSecDecl(self)
            else:
                return visitor.visitChildren(self)




    def codeSecDecl(self):

        localctx = QuietParser.CodeSecDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_codeSecDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(QuietParser.DotCode)
            self.state = 397
            self.match(QuietParser.Colon)
            self.state = 399 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 398
                    self.match(QuietParser.EOL)

                else:
                    raise NoViableAltException(self)
                self.state = 401 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeSecContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.FunctionContext)
            else:
                return self.getTypedRuleContext(QuietParser.FunctionContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_codeSecContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSecContent" ):
                listener.enterCodeSecContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSecContent" ):
                listener.exitCodeSecContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeSecContent" ):
                return visitor.visitCodeSecContent(self)
            else:
                return visitor.visitChildren(self)




    def codeSecContent(self):

        localctx = QuietParser.CodeSecContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_codeSecContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 403
                self.function()
                self.state = 406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==29):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntrySectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entrySecDecl(self):
            return self.getTypedRuleContext(QuietParser.EntrySecDeclContext,0)


        def entrySecContent(self):
            return self.getTypedRuleContext(QuietParser.EntrySecContentContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_entrySection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntrySection" ):
                listener.enterEntrySection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntrySection" ):
                listener.exitEntrySection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntrySection" ):
                return visitor.visitEntrySection(self)
            else:
                return visitor.visitChildren(self)




    def entrySection(self):

        localctx = QuietParser.EntrySectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_entrySection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 408
                self.match(QuietParser.EOL)
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            self.entrySecDecl()
            self.state = 415
            self.entrySecContent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntrySecDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DotEntry(self):
            return self.getToken(QuietParser.DotEntry, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_entrySecDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntrySecDecl" ):
                listener.enterEntrySecDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntrySecDecl" ):
                listener.exitEntrySecDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntrySecDecl" ):
                return visitor.visitEntrySecDecl(self)
            else:
                return visitor.visitChildren(self)




    def entrySecDecl(self):

        localctx = QuietParser.EntrySecDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_entrySecDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(QuietParser.DotEntry)
            self.state = 418
            self.match(QuietParser.Colon)
            self.state = 420 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 419
                self.match(QuietParser.EOL)
                self.state = 422 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==16):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntrySecContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self):
            return self.getTypedRuleContext(QuietParser.FunctionContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_entrySecContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntrySecContent" ):
                listener.enterEntrySecContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntrySecContent" ):
                listener.exitEntrySecContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntrySecContent" ):
                return visitor.visitEntrySecContent(self)
            else:
                return visitor.visitChildren(self)




    def entrySecContent(self):

        localctx = QuietParser.EntrySecContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_entrySecContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.function()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LayoutSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def layoutSecDecl(self):
            return self.getTypedRuleContext(QuietParser.LayoutSecDeclContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def layoutSecContent(self):
            return self.getTypedRuleContext(QuietParser.LayoutSecContentContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_layoutSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayoutSection" ):
                listener.enterLayoutSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayoutSection" ):
                listener.exitLayoutSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayoutSection" ):
                return visitor.visitLayoutSection(self)
            else:
                return visitor.visitChildren(self)




    def layoutSection(self):

        localctx = QuietParser.LayoutSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_layoutSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 426
                self.match(QuietParser.EOL)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 432
            self.layoutSecDecl()
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==36:
                self.state = 433
                self.layoutSecContent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LayoutSecDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DotLayout(self):
            return self.getToken(QuietParser.DotLayout, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def getRuleIndex(self):
            return QuietParser.RULE_layoutSecDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayoutSecDecl" ):
                listener.enterLayoutSecDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayoutSecDecl" ):
                listener.exitLayoutSecDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayoutSecDecl" ):
                return visitor.visitLayoutSecDecl(self)
            else:
                return visitor.visitChildren(self)




    def layoutSecDecl(self):

        localctx = QuietParser.LayoutSecDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_layoutSecDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(QuietParser.DotLayout)
            self.state = 437
            self.match(QuietParser.Colon)
            self.state = 439 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 438
                self.match(QuietParser.EOL)
                self.state = 441 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==16):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LayoutSecContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def portDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.PortDeclContext)
            else:
                return self.getTypedRuleContext(QuietParser.PortDeclContext,i)


        def bindPort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.BindPortContext)
            else:
                return self.getTypedRuleContext(QuietParser.BindPortContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_layoutSecContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayoutSecContent" ):
                listener.enterLayoutSecContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayoutSecContent" ):
                listener.exitLayoutSecContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayoutSecContent" ):
                return visitor.visitLayoutSecContent(self)
            else:
                return visitor.visitChildren(self)




    def layoutSecContent(self):

        localctx = QuietParser.LayoutSecContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_layoutSecContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35]:
                    self.state = 443
                    self.portDecl()
                    pass
                elif token in [36]:
                    self.state = 444
                    self.bindPort()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 447 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==35 or _la==36):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PortDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Port(self):
            return self.getToken(QuietParser.Port, 0)

        def BracketLeft(self):
            return self.getToken(QuietParser.BracketLeft, 0)

        def phyQubit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.PhyQubitContext)
            else:
                return self.getTypedRuleContext(QuietParser.PhyQubitContext,i)


        def BracketRight(self):
            return self.getToken(QuietParser.BracketRight, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def subPortList(self):
            return self.getTypedRuleContext(QuietParser.SubPortListContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_portDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPortDecl" ):
                listener.enterPortDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPortDecl" ):
                listener.exitPortDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPortDecl" ):
                return visitor.visitPortDecl(self)
            else:
                return visitor.visitChildren(self)




    def portDecl(self):

        localctx = QuietParser.PortDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_portDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(QuietParser.Port)
            self.state = 450
            self.match(QuietParser.BracketLeft)
            self.state = 451
            self.phyQubit()
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 452
                self.match(QuietParser.Comma)
                self.state = 453
                self.phyQubit()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 459
            self.match(QuietParser.BracketRight)
            self.state = 460
            self.match(QuietParser.Colon)
            self.state = 461
            self.subPortList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubPortListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BracesLeft(self):
            return self.getToken(QuietParser.BracesLeft, 0)

        def subPort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.SubPortContext)
            else:
                return self.getTypedRuleContext(QuietParser.SubPortContext,i)


        def BracesRight(self):
            return self.getToken(QuietParser.BracesRight, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_subPortList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPortList" ):
                listener.enterSubPortList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPortList" ):
                listener.exitSubPortList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubPortList" ):
                return visitor.visitSubPortList(self)
            else:
                return visitor.visitChildren(self)




    def subPortList(self):

        localctx = QuietParser.SubPortListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_subPortList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(QuietParser.BracesLeft)
            self.state = 464
            self.subPort()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 465
                self.match(QuietParser.Comma)
                self.state = 466
                self.subPort()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self.match(QuietParser.BracesRight)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def phySubPort(self):
            return self.getTypedRuleContext(QuietParser.PhySubPortContext,0)


        def lgcSubPort(self):
            return self.getTypedRuleContext(QuietParser.LgcSubPortContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_subPort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPort" ):
                listener.enterSubPort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPort" ):
                listener.exitSubPort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubPort" ):
                return visitor.visitSubPort(self)
            else:
                return visitor.visitChildren(self)




    def subPort(self):

        localctx = QuietParser.SubPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_subPort)
        try:
            self.state = 476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.phySubPort()
                pass
            elif token in [6, 7, 8, 135, 136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.lgcSubPort()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhySubPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PhyPortSym(self):
            return self.getToken(QuietParser.PhyPortSym, 0)

        def string(self):
            return self.getTypedRuleContext(QuietParser.StringContext,0)


        def portAlias(self):
            return self.getTypedRuleContext(QuietParser.PortAliasContext,0)


        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def subPortList(self):
            return self.getTypedRuleContext(QuietParser.SubPortListContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_phySubPort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhySubPort" ):
                listener.enterPhySubPort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhySubPort" ):
                listener.exitPhySubPort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhySubPort" ):
                return visitor.visitPhySubPort(self)
            else:
                return visitor.visitChildren(self)




    def phySubPort(self):

        localctx = QuietParser.PhySubPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_phySubPort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(QuietParser.PhyPortSym)
            self.state = 479
            self.string()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 480
                self.portAlias()


            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 483
                self.match(QuietParser.Colon)
                self.state = 484
                self.subPortList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LgcSubPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(QuietParser.StringContext,0)


        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def subPortList(self):
            return self.getTypedRuleContext(QuietParser.SubPortListContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_lgcSubPort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgcSubPort" ):
                listener.enterLgcSubPort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgcSubPort" ):
                listener.exitLgcSubPort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgcSubPort" ):
                return visitor.visitLgcSubPort(self)
            else:
                return visitor.visitChildren(self)




    def lgcSubPort(self):

        localctx = QuietParser.LgcSubPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_lgcSubPort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.string()
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 488
                self.match(QuietParser.Colon)
                self.state = 489
                self.subPortList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PortAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def string(self):
            return self.getTypedRuleContext(QuietParser.StringContext,0)


        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_portAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPortAlias" ):
                listener.enterPortAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPortAlias" ):
                listener.exitPortAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPortAlias" ):
                return visitor.visitPortAlias(self)
            else:
                return visitor.visitChildren(self)




    def portAlias(self):

        localctx = QuietParser.PortAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_portAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(QuietParser.ParenLeft)
            self.state = 493
            self.string()
            self.state = 494
            self.match(QuietParser.ParenRight)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Bind(self):
            return self.getToken(QuietParser.Bind, 0)

        def phyPort(self):
            return self.getTypedRuleContext(QuietParser.PhyPortContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def BracketLeft(self):
            return self.getToken(QuietParser.BracketLeft, 0)

        def lgcPort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.LgcPortContext)
            else:
                return self.getTypedRuleContext(QuietParser.LgcPortContext,i)


        def BracketRight(self):
            return self.getToken(QuietParser.BracketRight, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_bindPort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindPort" ):
                listener.enterBindPort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindPort" ):
                listener.exitBindPort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBindPort" ):
                return visitor.visitBindPort(self)
            else:
                return visitor.visitChildren(self)




    def bindPort(self):

        localctx = QuietParser.BindPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_bindPort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(QuietParser.Bind)
            self.state = 497
            self.phyPort()
            self.state = 498
            self.match(QuietParser.Comma)
            self.state = 499
            self.match(QuietParser.BracketLeft)
            self.state = 500
            self.lgcPort()
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 501
                self.match(QuietParser.Comma)
                self.state = 502
                self.lgcPort()
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 508
            self.match(QuietParser.BracketRight)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Func(self):
            return self.getToken(QuietParser.Func, 0)

        def funcHeader(self):
            return self.getTypedRuleContext(QuietParser.FuncHeaderContext,0)


        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.EOL)
            else:
                return self.getToken(QuietParser.EOL, i)

        def funcBody(self):
            return self.getTypedRuleContext(QuietParser.FuncBodyContext,0)


        def End(self):
            return self.getToken(QuietParser.End, 0)

        def EOF(self):
            return self.getToken(QuietParser.EOF, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction" ):
                return visitor.visitFunction(self)
            else:
                return visitor.visitChildren(self)




    def function(self):

        localctx = QuietParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(QuietParser.Func)
            self.state = 511
            self.funcHeader()
            self.state = 512
            self.match(QuietParser.Colon)
            self.state = 513
            self.match(QuietParser.EOL)
            self.state = 514
            self.funcBody()
            self.state = 515
            self.match(QuietParser.End)
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 516
                        self.match(QuietParser.EOL) 
                    self.state = 521
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                pass

            elif la_ == 2:
                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 522
                    self.match(QuietParser.EOF)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def ParenLeft(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.ParenLeft)
            else:
                return self.getToken(QuietParser.ParenLeft, i)

        def ParenRight(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.ParenRight)
            else:
                return self.getToken(QuietParser.ParenRight, i)

        def inputArgs(self):
            return self.getTypedRuleContext(QuietParser.InputArgsContext,0)


        def RightArrow(self):
            return self.getToken(QuietParser.RightArrow, 0)

        def outputArgs(self):
            return self.getTypedRuleContext(QuietParser.OutputArgsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_funcHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncHeader" ):
                listener.enterFuncHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncHeader" ):
                listener.exitFuncHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncHeader" ):
                return visitor.visitFuncHeader(self)
            else:
                return visitor.visitChildren(self)




    def funcHeader(self):

        localctx = QuietParser.FuncHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_funcHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(QuietParser.Id)
            self.state = 528
            self.match(QuietParser.ParenLeft)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4260607557632) != 0):
                self.state = 529
                self.inputArgs()


            self.state = 532
            self.match(QuietParser.ParenRight)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 533
                self.match(QuietParser.RightArrow)
                self.state = 534
                self.match(QuietParser.ParenLeft)
                self.state = 535
                self.outputArgs()
                self.state = 536
                self.match(QuietParser.ParenRight)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.FormalVariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.FormalVariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_inputArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputArgs" ):
                listener.enterInputArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputArgs" ):
                listener.exitInputArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputArgs" ):
                return visitor.visitInputArgs(self)
            else:
                return visitor.visitChildren(self)




    def inputArgs(self):

        localctx = QuietParser.InputArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_inputArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.formalVariable()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 541
                self.match(QuietParser.Comma)
                self.state = 542
                self.formalVariable()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.FormalVariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.FormalVariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_outputArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputArgs" ):
                listener.enterOutputArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputArgs" ):
                listener.exitOutputArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputArgs" ):
                return visitor.visitOutputArgs(self)
            else:
                return visitor.visitChildren(self)




    def outputArgs(self):

        localctx = QuietParser.OutputArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_outputArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.formalVariable()
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 549
                self.match(QuietParser.Comma)
                self.state = 550
                self.formalVariable()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableType(self):
            return self.getTypedRuleContext(QuietParser.VariableTypeContext,0)


        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_formalVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalVariable" ):
                listener.enterFormalVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalVariable" ):
                listener.exitFormalVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalVariable" ):
                return visitor.visitFormalVariable(self)
            else:
                return visitor.visitChildren(self)




    def formalVariable(self):

        localctx = QuietParser.FormalVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_formalVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.variableType()
            self.state = 557
            self.match(QuietParser.Id)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insnWithLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.InsnWithLabelContext)
            else:
                return self.getTypedRuleContext(QuietParser.InsnWithLabelContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_funcBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncBody" ):
                listener.enterFuncBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncBody" ):
                listener.exitFuncBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncBody" ):
                return visitor.visitFuncBody(self)
            else:
                return visitor.visitChildren(self)




    def funcBody(self):

        localctx = QuietParser.FuncBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_funcBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & -69206015) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 45035996273704959) != 0):
                self.state = 559
                self.insnWithLabel()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsnWithLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(QuietParser.LabelContext,0)


        def instruction(self):
            return self.getTypedRuleContext(QuietParser.InstructionContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_insnWithLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsnWithLabel" ):
                listener.enterInsnWithLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsnWithLabel" ):
                listener.exitInsnWithLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsnWithLabel" ):
                return visitor.visitInsnWithLabel(self)
            else:
                return visitor.visitChildren(self)




    def insnWithLabel(self):

        localctx = QuietParser.InsnWithLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_insnWithLabel)
        try:
            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.label()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.instruction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def Colon(self):
            return self.getToken(QuietParser.Colon, 0)

        def EOL(self):
            return self.getToken(QuietParser.EOL, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = QuietParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(QuietParser.Id)
            self.state = 570
            self.match(QuietParser.Colon)
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 571
                self.match(QuietParser.EOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDecl(self):
            return self.getTypedRuleContext(QuietParser.VariableDeclContext,0)


        def EOL(self):
            return self.getToken(QuietParser.EOL, 0)

        def moduleCtIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleCtInsContext,0)


        def moduleImIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleImInsContext,0)


        def moduleFmIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleFmInsContext,0)


        def moduleStdIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleStdInsContext,0)


        def modulePmIns(self):
            return self.getTypedRuleContext(QuietParser.ModulePmInsContext,0)


        def moduleTmIns(self):
            return self.getTypedRuleContext(QuietParser.ModuleTmInsContext,0)


        def callFunc(self):
            return self.getTypedRuleContext(QuietParser.CallFuncContext,0)


        def quantumOpIns(self):
            return self.getTypedRuleContext(QuietParser.QuantumOpInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = QuietParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_instruction)
        try:
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.variableDecl()
                self.state = 575
                self.match(QuietParser.EOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.moduleCtIns()
                self.state = 578
                self.match(QuietParser.EOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 580
                self.moduleImIns()
                self.state = 581
                self.match(QuietParser.EOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 583
                self.moduleFmIns()
                self.state = 584
                self.match(QuietParser.EOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 586
                self.moduleStdIns()
                self.state = 587
                self.match(QuietParser.EOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 589
                self.modulePmIns()
                self.state = 590
                self.match(QuietParser.EOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 592
                self.moduleTmIns()
                self.state = 593
                self.match(QuietParser.EOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 595
                self.callFunc()
                self.state = 596
                self.match(QuietParser.EOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 598
                self.quantumOpIns()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 599
                self.match(QuietParser.EOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableType(self):
            return self.getTypedRuleContext(QuietParser.VariableTypeContext,0)


        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Id)
            else:
                return self.getToken(QuietParser.Id, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_variableDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDecl" ):
                listener.enterVariableDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDecl" ):
                listener.exitVariableDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDecl" ):
                return visitor.visitVariableDecl(self)
            else:
                return visitor.visitChildren(self)




    def variableDecl(self):

        localctx = QuietParser.VariableDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_variableDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.variableType()
            self.state = 603
            self.match(QuietParser.Id)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 604
                self.match(QuietParser.Comma)
                self.state = 605
                self.match(QuietParser.Id)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallFuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def Measure(self):
            return self.getToken(QuietParser.Measure, 0)

        def Reset(self):
            return self.getToken(QuietParser.Reset, 0)

        def actualParaList(self):
            return self.getTypedRuleContext(QuietParser.ActualParaListContext,0)


        def RightArrow(self):
            return self.getToken(QuietParser.RightArrow, 0)

        def actualVariableList(self):
            return self.getTypedRuleContext(QuietParser.ActualVariableListContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_callFunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallFunc" ):
                listener.enterCallFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallFunc" ):
                listener.exitCallFunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallFunc" ):
                return visitor.visitCallFunc(self)
            else:
                return visitor.visitChildren(self)




    def callFunc(self):

        localctx = QuietParser.CallFuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_callFunc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            _la = self._input.LA(1)
            if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2199023255555) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 612
            self.match(QuietParser.ParenLeft)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==10 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 7) != 0):
                self.state = 613
                self.actualParaList()


            self.state = 616
            self.match(QuietParser.ParenRight)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 617
                self.match(QuietParser.RightArrow)
                self.state = 618
                self.actualVariableList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualParaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(QuietParser.NumberContext,0)


        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_actualPara

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualPara" ):
                listener.enterActualPara(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualPara" ):
                listener.exitActualPara(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActualPara" ):
                return visitor.visitActualPara(self)
            else:
                return visitor.visitChildren(self)




    def actualPara(self):

        localctx = QuietParser.ActualParaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_actualPara)
        try:
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 133, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.number()
                pass
            elif token in [10, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualParaListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actualPara(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.ActualParaContext)
            else:
                return self.getTypedRuleContext(QuietParser.ActualParaContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_actualParaList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualParaList" ):
                listener.enterActualParaList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualParaList" ):
                listener.exitActualParaList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActualParaList" ):
                return visitor.visitActualParaList(self)
            else:
                return visitor.visitChildren(self)




    def actualParaList(self):

        localctx = QuietParser.ActualParaListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_actualParaList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.actualPara()
            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 626
                self.match(QuietParser.Comma)
                self.state = 627
                self.actualPara()
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualVariableListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_actualVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualVariableList" ):
                listener.enterActualVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualVariableList" ):
                listener.exitActualVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActualVariableList" ):
                return visitor.visitActualVariableList(self)
            else:
                return visitor.visitChildren(self)




    def actualVariableList(self):

        localctx = QuietParser.ActualVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_actualVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.variable()
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 634
                self.match(QuietParser.Comma)
                self.state = 635
                self.variable()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlQubitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Less(self):
            return self.getToken(QuietParser.Less, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Greater(self):
            return self.getToken(QuietParser.Greater, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def getRuleIndex(self):
            return QuietParser.RULE_controlQubit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlQubit" ):
                listener.enterControlQubit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlQubit" ):
                listener.exitControlQubit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlQubit" ):
                return visitor.visitControlQubit(self)
            else:
                return visitor.visitChildren(self)




    def controlQubit(self):

        localctx = QuietParser.ControlQubitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_controlQubit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(QuietParser.Less)
            self.state = 642
            self.variable()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 643
                self.match(QuietParser.Comma)
                self.state = 644
                self.variable()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            self.match(QuietParser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumOpInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def actualVariableList(self):
            return self.getTypedRuleContext(QuietParser.ActualVariableListContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_quantumOpIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumOpIns" ):
                listener.enterQuantumOpIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumOpIns" ):
                listener.exitQuantumOpIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumOpIns" ):
                return visitor.visitQuantumOpIns(self)
            else:
                return visitor.visitChildren(self)




    def quantumOpIns(self):

        localctx = QuietParser.QuantumOpInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_quantumOpIns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(QuietParser.Id)
            self.state = 653
            self.actualVariableList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleCtInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Bne(self):
            return self.getToken(QuietParser.Bne, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def Beq(self):
            return self.getToken(QuietParser.Beq, 0)

        def Blt(self):
            return self.getToken(QuietParser.Blt, 0)

        def Ble(self):
            return self.getToken(QuietParser.Ble, 0)

        def Bgt(self):
            return self.getToken(QuietParser.Bgt, 0)

        def Bge(self):
            return self.getToken(QuietParser.Bge, 0)

        def Jump(self):
            return self.getToken(QuietParser.Jump, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_moduleCtIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleCtIns" ):
                listener.enterModuleCtIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleCtIns" ):
                listener.exitModuleCtIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleCtIns" ):
                return visitor.visitModuleCtIns(self)
            else:
                return visitor.visitChildren(self)




    def moduleCtIns(self):

        localctx = QuietParser.ModuleCtInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_moduleCtIns)
        try:
            self.state = 699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.match(QuietParser.Bne)
                self.state = 656
                self.variable()
                self.state = 657
                self.match(QuietParser.Comma)
                self.state = 658
                self.variable()
                self.state = 659
                self.match(QuietParser.Comma)
                self.state = 660
                self.match(QuietParser.Id)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.match(QuietParser.Beq)
                self.state = 663
                self.variable()
                self.state = 664
                self.match(QuietParser.Comma)
                self.state = 665
                self.variable()
                self.state = 666
                self.match(QuietParser.Comma)
                self.state = 667
                self.match(QuietParser.Id)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self.match(QuietParser.Blt)
                self.state = 670
                self.variable()
                self.state = 671
                self.match(QuietParser.Comma)
                self.state = 672
                self.variable()
                self.state = 673
                self.match(QuietParser.Comma)
                self.state = 674
                self.match(QuietParser.Id)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 676
                self.match(QuietParser.Ble)
                self.state = 677
                self.variable()
                self.state = 678
                self.match(QuietParser.Comma)
                self.state = 679
                self.variable()
                self.state = 680
                self.match(QuietParser.Comma)
                self.state = 681
                self.match(QuietParser.Id)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 5)
                self.state = 683
                self.match(QuietParser.Bgt)
                self.state = 684
                self.variable()
                self.state = 685
                self.match(QuietParser.Comma)
                self.state = 686
                self.variable()
                self.state = 687
                self.match(QuietParser.Comma)
                self.state = 688
                self.match(QuietParser.Id)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 6)
                self.state = 690
                self.match(QuietParser.Bge)
                self.state = 691
                self.variable()
                self.state = 692
                self.match(QuietParser.Comma)
                self.state = 693
                self.variable()
                self.state = 694
                self.match(QuietParser.Comma)
                self.state = 695
                self.match(QuietParser.Id)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 7)
                self.state = 697
                self.match(QuietParser.Jump)
                self.state = 698
                self.match(QuietParser.Id)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleFmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataTransFmIns(self):
            return self.getTypedRuleContext(QuietParser.DataTransFmInsContext,0)


        def mathOpFmIns(self):
            return self.getTypedRuleContext(QuietParser.MathOpFmInsContext,0)


        def typeConvFmIns(self):
            return self.getTypedRuleContext(QuietParser.TypeConvFmInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_moduleFmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleFmIns" ):
                listener.enterModuleFmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleFmIns" ):
                listener.exitModuleFmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleFmIns" ):
                return visitor.visitModuleFmIns(self)
            else:
                return visitor.visitChildren(self)




    def moduleFmIns(self):

        localctx = QuietParser.ModuleFmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_moduleFmIns)
        try:
            self.state = 704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.dataTransFmIns()
                pass
            elif token in [52, 53, 54, 55, 56, 57, 58, 59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 702
                self.mathOpFmIns()
                pass
            elif token in [60, 61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 703
                self.typeConvFmIns()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTransFmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ldd(self):
            return self.getToken(QuietParser.Ldd, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def FloatLiteral(self):
            return self.getToken(QuietParser.FloatLiteral, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def Movd(self):
            return self.getToken(QuietParser.Movd, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_dataTransFmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTransFmIns" ):
                listener.enterDataTransFmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTransFmIns" ):
                listener.exitDataTransFmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTransFmIns" ):
                return visitor.visitDataTransFmIns(self)
            else:
                return visitor.visitChildren(self)




    def dataTransFmIns(self):

        localctx = QuietParser.DataTransFmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dataTransFmIns)
        self._la = 0 # Token type
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.match(QuietParser.Ldd)
                self.state = 707
                self.variable()
                self.state = 708
                self.match(QuietParser.Comma)
                self.state = 709
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.match(QuietParser.Movd)
                self.state = 712
                self.variable()
                self.state = 713
                self.match(QuietParser.Comma)
                self.state = 714
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOpFmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Addd(self):
            return self.getToken(QuietParser.Addd, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def Subd(self):
            return self.getToken(QuietParser.Subd, 0)

        def Muld(self):
            return self.getToken(QuietParser.Muld, 0)

        def Divd(self):
            return self.getToken(QuietParser.Divd, 0)

        def Adddi(self):
            return self.getToken(QuietParser.Adddi, 0)

        def FloatLiteral(self):
            return self.getToken(QuietParser.FloatLiteral, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def Subdi(self):
            return self.getToken(QuietParser.Subdi, 0)

        def Muldi(self):
            return self.getToken(QuietParser.Muldi, 0)

        def Divdi(self):
            return self.getToken(QuietParser.Divdi, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_mathOpFmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOpFmIns" ):
                listener.enterMathOpFmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOpFmIns" ):
                listener.exitMathOpFmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOpFmIns" ):
                return visitor.visitMathOpFmIns(self)
            else:
                return visitor.visitChildren(self)




    def mathOpFmIns(self):

        localctx = QuietParser.MathOpFmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_mathOpFmIns)
        self._la = 0 # Token type
        try:
            self.state = 774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.match(QuietParser.Addd)
                self.state = 719
                self.variable()
                self.state = 720
                self.match(QuietParser.Comma)
                self.state = 721
                self.variable()
                self.state = 722
                self.match(QuietParser.Comma)
                self.state = 723
                self.variable()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.match(QuietParser.Subd)
                self.state = 726
                self.variable()
                self.state = 727
                self.match(QuietParser.Comma)
                self.state = 728
                self.variable()
                self.state = 729
                self.match(QuietParser.Comma)
                self.state = 730
                self.variable()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 3)
                self.state = 732
                self.match(QuietParser.Muld)
                self.state = 733
                self.variable()
                self.state = 734
                self.match(QuietParser.Comma)
                self.state = 735
                self.variable()
                self.state = 736
                self.match(QuietParser.Comma)
                self.state = 737
                self.variable()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 4)
                self.state = 739
                self.match(QuietParser.Divd)
                self.state = 740
                self.variable()
                self.state = 741
                self.match(QuietParser.Comma)
                self.state = 742
                self.variable()
                self.state = 743
                self.match(QuietParser.Comma)
                self.state = 744
                self.variable()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 5)
                self.state = 746
                self.match(QuietParser.Adddi)
                self.state = 747
                self.variable()
                self.state = 748
                self.match(QuietParser.Comma)
                self.state = 749
                self.variable()
                self.state = 750
                self.match(QuietParser.Comma)
                self.state = 751
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 6)
                self.state = 753
                self.match(QuietParser.Subdi)
                self.state = 754
                self.variable()
                self.state = 755
                self.match(QuietParser.Comma)
                self.state = 756
                self.variable()
                self.state = 757
                self.match(QuietParser.Comma)
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 7)
                self.state = 760
                self.match(QuietParser.Muldi)
                self.state = 761
                self.variable()
                self.state = 762
                self.match(QuietParser.Comma)
                self.state = 763
                self.variable()
                self.state = 764
                self.match(QuietParser.Comma)
                self.state = 765
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 8)
                self.state = 767
                self.match(QuietParser.Divdi)
                self.state = 768
                self.variable()
                self.state = 769
                self.match(QuietParser.Comma)
                self.state = 770
                self.variable()
                self.state = 771
                self.match(QuietParser.Comma)
                self.state = 772
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConvFmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Casti(self):
            return self.getToken(QuietParser.Casti, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def Castd(self):
            return self.getToken(QuietParser.Castd, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_typeConvFmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConvFmIns" ):
                listener.enterTypeConvFmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConvFmIns" ):
                listener.exitTypeConvFmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConvFmIns" ):
                return visitor.visitTypeConvFmIns(self)
            else:
                return visitor.visitChildren(self)




    def typeConvFmIns(self):

        localctx = QuietParser.TypeConvFmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeConvFmIns)
        try:
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.match(QuietParser.Casti)
                self.state = 777
                self.variable()
                self.state = 778
                self.match(QuietParser.Comma)
                self.state = 779
                self.variable()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.match(QuietParser.Castd)
                self.state = 782
                self.variable()
                self.state = 783
                self.match(QuietParser.Comma)
                self.state = 784
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleImInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataTransImIns(self):
            return self.getTypedRuleContext(QuietParser.DataTransImInsContext,0)


        def logicOpImIns(self):
            return self.getTypedRuleContext(QuietParser.LogicOpImInsContext,0)


        def mathOpImIns(self):
            return self.getTypedRuleContext(QuietParser.MathOpImInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_moduleImIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleImIns" ):
                listener.enterModuleImIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleImIns" ):
                listener.exitModuleImIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleImIns" ):
                return visitor.visitModuleImIns(self)
            else:
                return visitor.visitChildren(self)




    def moduleImIns(self):

        localctx = QuietParser.ModuleImInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_moduleImIns)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62, 63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 788
                self.dataTransImIns()
                pass
            elif token in [64, 65, 66, 67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.logicOpImIns()
                pass
            elif token in [68, 69, 70, 71, 72, 73, 74, 75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 790
                self.mathOpImIns()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTransImInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ld(self):
            return self.getToken(QuietParser.Ld, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def Mov(self):
            return self.getToken(QuietParser.Mov, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_dataTransImIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTransImIns" ):
                listener.enterDataTransImIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTransImIns" ):
                listener.exitDataTransImIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTransImIns" ):
                return visitor.visitDataTransImIns(self)
            else:
                return visitor.visitChildren(self)




    def dataTransImIns(self):

        localctx = QuietParser.DataTransImInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_dataTransImIns)
        try:
            self.state = 803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.match(QuietParser.Ld)
                self.state = 794
                self.variable()
                self.state = 795
                self.match(QuietParser.Comma)
                self.state = 796
                self.match(QuietParser.IntLiteral)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(QuietParser.Mov)
                self.state = 799
                self.variable()
                self.state = 800
                self.match(QuietParser.Comma)
                self.state = 801
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicOpImInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Land(self):
            return self.getToken(QuietParser.Land, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def Lnot(self):
            return self.getToken(QuietParser.Lnot, 0)

        def Lor(self):
            return self.getToken(QuietParser.Lor, 0)

        def Lxor(self):
            return self.getToken(QuietParser.Lxor, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_logicOpImIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicOpImIns" ):
                listener.enterLogicOpImIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicOpImIns" ):
                listener.exitLogicOpImIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicOpImIns" ):
                return visitor.visitLogicOpImIns(self)
            else:
                return visitor.visitChildren(self)




    def logicOpImIns(self):

        localctx = QuietParser.LogicOpImInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_logicOpImIns)
        try:
            self.state = 831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.match(QuietParser.Land)
                self.state = 806
                self.variable()
                self.state = 807
                self.match(QuietParser.Comma)
                self.state = 808
                self.variable()
                self.state = 809
                self.match(QuietParser.Comma)
                self.state = 810
                self.variable()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.match(QuietParser.Lnot)
                self.state = 813
                self.variable()
                self.state = 814
                self.match(QuietParser.Comma)
                self.state = 815
                self.variable()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 817
                self.match(QuietParser.Lor)
                self.state = 818
                self.variable()
                self.state = 819
                self.match(QuietParser.Comma)
                self.state = 820
                self.variable()
                self.state = 821
                self.match(QuietParser.Comma)
                self.state = 822
                self.variable()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 4)
                self.state = 824
                self.match(QuietParser.Lxor)
                self.state = 825
                self.variable()
                self.state = 826
                self.match(QuietParser.Comma)
                self.state = 827
                self.variable()
                self.state = 828
                self.match(QuietParser.Comma)
                self.state = 829
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOpImInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Add(self):
            return self.getToken(QuietParser.Add, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def Sub(self):
            return self.getToken(QuietParser.Sub, 0)

        def Mul(self):
            return self.getToken(QuietParser.Mul, 0)

        def Div(self):
            return self.getToken(QuietParser.Div, 0)

        def Addi(self):
            return self.getToken(QuietParser.Addi, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def Subi(self):
            return self.getToken(QuietParser.Subi, 0)

        def Muli(self):
            return self.getToken(QuietParser.Muli, 0)

        def Divi(self):
            return self.getToken(QuietParser.Divi, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_mathOpImIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOpImIns" ):
                listener.enterMathOpImIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOpImIns" ):
                listener.exitMathOpImIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOpImIns" ):
                return visitor.visitMathOpImIns(self)
            else:
                return visitor.visitChildren(self)




    def mathOpImIns(self):

        localctx = QuietParser.MathOpImInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_mathOpImIns)
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.match(QuietParser.Add)
                self.state = 834
                self.variable()
                self.state = 835
                self.match(QuietParser.Comma)
                self.state = 836
                self.variable()
                self.state = 837
                self.match(QuietParser.Comma)
                self.state = 838
                self.variable()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.match(QuietParser.Sub)
                self.state = 841
                self.variable()
                self.state = 842
                self.match(QuietParser.Comma)
                self.state = 843
                self.variable()
                self.state = 844
                self.match(QuietParser.Comma)
                self.state = 845
                self.variable()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 847
                self.match(QuietParser.Mul)
                self.state = 848
                self.variable()
                self.state = 849
                self.match(QuietParser.Comma)
                self.state = 850
                self.variable()
                self.state = 851
                self.match(QuietParser.Comma)
                self.state = 852
                self.variable()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 4)
                self.state = 854
                self.match(QuietParser.Div)
                self.state = 855
                self.variable()
                self.state = 856
                self.match(QuietParser.Comma)
                self.state = 857
                self.variable()
                self.state = 858
                self.match(QuietParser.Comma)
                self.state = 859
                self.variable()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 5)
                self.state = 861
                self.match(QuietParser.Addi)
                self.state = 862
                self.variable()
                self.state = 863
                self.match(QuietParser.Comma)
                self.state = 864
                self.variable()
                self.state = 865
                self.match(QuietParser.Comma)
                self.state = 866
                self.match(QuietParser.IntLiteral)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 6)
                self.state = 868
                self.match(QuietParser.Subi)
                self.state = 869
                self.variable()
                self.state = 870
                self.match(QuietParser.Comma)
                self.state = 871
                self.variable()
                self.state = 872
                self.match(QuietParser.Comma)
                self.state = 873
                self.match(QuietParser.IntLiteral)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 7)
                self.state = 875
                self.match(QuietParser.Muli)
                self.state = 876
                self.variable()
                self.state = 877
                self.match(QuietParser.Comma)
                self.state = 878
                self.variable()
                self.state = 879
                self.match(QuietParser.Comma)
                self.state = 880
                self.match(QuietParser.IntLiteral)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 8)
                self.state = 882
                self.match(QuietParser.Divi)
                self.state = 883
                self.variable()
                self.state = 884
                self.match(QuietParser.Comma)
                self.state = 885
                self.variable()
                self.state = 886
                self.match(QuietParser.Comma)
                self.state = 887
                self.match(QuietParser.IntLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleStdInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noParaOpIns(self):
            return self.getTypedRuleContext(QuietParser.NoParaOpInsContext,0)


        def paraOpIns(self):
            return self.getTypedRuleContext(QuietParser.ParaOpInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_moduleStdIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleStdIns" ):
                listener.enterModuleStdIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleStdIns" ):
                listener.exitModuleStdIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleStdIns" ):
                return visitor.visitModuleStdIns(self)
            else:
                return visitor.visitChildren(self)




    def moduleStdIns(self):

        localctx = QuietParser.ModuleStdInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_moduleStdIns)
        try:
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.noParaOpIns()
                pass
            elif token in [87, 88, 89, 90, 91, 92, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.paraOpIns()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoParaOpInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def H(self):
            return self.getToken(QuietParser.H, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def X(self):
            return self.getToken(QuietParser.X, 0)

        def Y(self):
            return self.getToken(QuietParser.Y, 0)

        def Z(self):
            return self.getToken(QuietParser.Z, 0)

        def S(self):
            return self.getToken(QuietParser.S, 0)

        def T(self):
            return self.getToken(QuietParser.T, 0)

        def Sdag(self):
            return self.getToken(QuietParser.Sdag, 0)

        def Tdag(self):
            return self.getToken(QuietParser.Tdag, 0)

        def CNOT(self):
            return self.getToken(QuietParser.CNOT, 0)

        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def CZ(self):
            return self.getToken(QuietParser.CZ, 0)

        def SWAP(self):
            return self.getToken(QuietParser.SWAP, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_noParaOpIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoParaOpIns" ):
                listener.enterNoParaOpIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoParaOpIns" ):
                listener.exitNoParaOpIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoParaOpIns" ):
                return visitor.visitNoParaOpIns(self)
            else:
                return visitor.visitChildren(self)




    def noParaOpIns(self):

        localctx = QuietParser.NoParaOpInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_noParaOpIns)
        try:
            self.state = 926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.match(QuietParser.H)
                self.state = 896
                self.variable()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.match(QuietParser.X)
                self.state = 898
                self.variable()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 899
                self.match(QuietParser.Y)
                self.state = 900
                self.variable()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.match(QuietParser.Z)
                self.state = 902
                self.variable()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 5)
                self.state = 903
                self.match(QuietParser.S)
                self.state = 904
                self.variable()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 6)
                self.state = 905
                self.match(QuietParser.T)
                self.state = 906
                self.variable()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 7)
                self.state = 907
                self.match(QuietParser.Sdag)
                self.state = 908
                self.variable()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 8)
                self.state = 909
                self.match(QuietParser.Tdag)
                self.state = 910
                self.variable()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 9)
                self.state = 911
                self.match(QuietParser.CNOT)
                self.state = 912
                self.variable()
                self.state = 913
                self.match(QuietParser.Comma)
                self.state = 914
                self.variable()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 10)
                self.state = 916
                self.match(QuietParser.CZ)
                self.state = 917
                self.variable()
                self.state = 918
                self.match(QuietParser.Comma)
                self.state = 919
                self.variable()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 11)
                self.state = 921
                self.match(QuietParser.SWAP)
                self.state = 922
                self.variable()
                self.state = 923
                self.match(QuietParser.Comma)
                self.state = 924
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParaOpInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rx(self):
            return self.getToken(QuietParser.Rx, 0)

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def theta(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.ThetaContext)
            else:
                return self.getTypedRuleContext(QuietParser.ThetaContext,i)


        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Ry(self):
            return self.getToken(QuietParser.Ry, 0)

        def Rz(self):
            return self.getToken(QuietParser.Rz, 0)

        def Rxy(self):
            return self.getToken(QuietParser.Rxy, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def CP(self):
            return self.getToken(QuietParser.CP, 0)

        def CRz(self):
            return self.getToken(QuietParser.CRz, 0)

        def U4(self):
            return self.getToken(QuietParser.U4, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_paraOpIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParaOpIns" ):
                listener.enterParaOpIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParaOpIns" ):
                listener.exitParaOpIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParaOpIns" ):
                return visitor.visitParaOpIns(self)
            else:
                return visitor.visitChildren(self)




    def paraOpIns(self):

        localctx = QuietParser.ParaOpInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_paraOpIns)
        try:
            self.state = 982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.match(QuietParser.Rx)
                self.state = 929
                self.match(QuietParser.ParenLeft)
                self.state = 930
                self.theta()
                self.state = 931
                self.match(QuietParser.ParenRight)
                self.state = 932
                self.variable()
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.match(QuietParser.Ry)
                self.state = 935
                self.match(QuietParser.ParenLeft)
                self.state = 936
                self.theta()
                self.state = 937
                self.match(QuietParser.ParenRight)
                self.state = 938
                self.variable()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 3)
                self.state = 940
                self.match(QuietParser.Rz)
                self.state = 941
                self.match(QuietParser.ParenLeft)
                self.state = 942
                self.theta()
                self.state = 943
                self.match(QuietParser.ParenRight)
                self.state = 944
                self.variable()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 4)
                self.state = 946
                self.match(QuietParser.Rxy)
                self.state = 947
                self.match(QuietParser.ParenLeft)
                self.state = 948
                self.theta()
                self.state = 949
                self.match(QuietParser.Comma)
                self.state = 950
                self.theta()
                self.state = 951
                self.match(QuietParser.ParenRight)
                self.state = 952
                self.variable()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 5)
                self.state = 954
                self.match(QuietParser.CP)
                self.state = 955
                self.match(QuietParser.ParenLeft)
                self.state = 956
                self.theta()
                self.state = 957
                self.match(QuietParser.ParenRight)
                self.state = 958
                self.variable()
                self.state = 959
                self.match(QuietParser.Comma)
                self.state = 960
                self.variable()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 6)
                self.state = 962
                self.match(QuietParser.CRz)
                self.state = 963
                self.match(QuietParser.ParenLeft)
                self.state = 964
                self.theta()
                self.state = 965
                self.match(QuietParser.ParenRight)
                self.state = 966
                self.variable()
                self.state = 967
                self.match(QuietParser.Comma)
                self.state = 968
                self.variable()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 7)
                self.state = 970
                self.match(QuietParser.U4)
                self.state = 971
                self.match(QuietParser.ParenLeft)
                self.state = 972
                self.theta()
                self.state = 973
                self.match(QuietParser.Comma)
                self.state = 974
                self.theta()
                self.state = 975
                self.match(QuietParser.Comma)
                self.state = 976
                self.theta()
                self.state = 977
                self.match(QuietParser.Comma)
                self.state = 978
                self.theta()
                self.state = 979
                self.match(QuietParser.ParenRight)
                self.state = 980
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def number(self):
            return self.getTypedRuleContext(QuietParser.NumberContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_theta

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheta" ):
                listener.enterTheta(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheta" ):
                listener.exitTheta(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheta" ):
                return visitor.visitTheta(self)
            else:
                return visitor.visitChildren(self)




    def theta(self):

        localctx = QuietParser.ThetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_theta)
        try:
            self.state = 986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.match(QuietParser.Id)
                pass
            elif token in [3, 133, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModulePmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def waveFormIns(self):
            return self.getTypedRuleContext(QuietParser.WaveFormInsContext,0)


        def waveOpIns(self):
            return self.getTypedRuleContext(QuietParser.WaveOpInsContext,0)


        def portCfgIns(self):
            return self.getTypedRuleContext(QuietParser.PortCfgInsContext,0)


        def wavePlayIns(self):
            return self.getTypedRuleContext(QuietParser.WavePlayInsContext,0)


        def signalCapIns(self):
            return self.getTypedRuleContext(QuietParser.SignalCapInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_modulePmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulePmIns" ):
                listener.enterModulePmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulePmIns" ):
                listener.exitModulePmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModulePmIns" ):
                return visitor.visitModulePmIns(self)
            else:
                return visitor.visitChildren(self)




    def modulePmIns(self):

        localctx = QuietParser.ModulePmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_modulePmIns)
        try:
            self.state = 993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96, 97, 98, 99, 100, 101, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.waveFormIns()
                pass
            elif token in [102, 103, 104, 105, 106, 107, 108, 109]:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                self.waveOpIns()
                pass
            elif token in [110, 111, 112]:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.portCfgIns()
                pass
            elif token in [113, 114]:
                self.enterOuterAlt(localctx, 4)
                self.state = 991
                self.wavePlayIns()
                pass
            elif token in [115, 116]:
                self.enterOuterAlt(localctx, 5)
                self.state = 992
                self.signalCapIns()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaveFormInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Square(self):
            return self.getToken(QuietParser.Square, 0)

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def pmFloatPara(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.PmFloatParaContext)
            else:
                return self.getTypedRuleContext(QuietParser.PmFloatParaContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def pmTimePara(self):
            return self.getTypedRuleContext(QuietParser.PmTimeParaContext,0)


        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def Cos(self):
            return self.getToken(QuietParser.Cos, 0)

        def Sin(self):
            return self.getToken(QuietParser.Sin, 0)

        def Gaussian(self):
            return self.getToken(QuietParser.Gaussian, 0)

        def Drag(self):
            return self.getToken(QuietParser.Drag, 0)

        def Ramp(self):
            return self.getToken(QuietParser.Ramp, 0)

        def customWaveFormIns(self):
            return self.getTypedRuleContext(QuietParser.CustomWaveFormInsContext,0)


        def defWaveFormIns(self):
            return self.getTypedRuleContext(QuietParser.DefWaveFormInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_waveFormIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaveFormIns" ):
                listener.enterWaveFormIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaveFormIns" ):
                listener.exitWaveFormIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaveFormIns" ):
                return visitor.visitWaveFormIns(self)
            else:
                return visitor.visitChildren(self)




    def waveFormIns(self):

        localctx = QuietParser.WaveFormInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_waveFormIns)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.match(QuietParser.Square)
                self.state = 996
                self.match(QuietParser.ParenLeft)
                self.state = 997
                self.pmFloatPara()
                self.state = 998
                self.match(QuietParser.Comma)
                self.state = 999
                self.pmTimePara()
                self.state = 1000
                self.match(QuietParser.ParenRight)
                self.state = 1001
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(QuietParser.Cos)
                self.state = 1004
                self.match(QuietParser.ParenLeft)
                self.state = 1005
                self.pmFloatPara()
                self.state = 1006
                self.match(QuietParser.Comma)
                self.state = 1007
                self.pmFloatPara()
                self.state = 1008
                self.match(QuietParser.Comma)
                self.state = 1009
                self.pmFloatPara()
                self.state = 1010
                self.match(QuietParser.Comma)
                self.state = 1011
                self.pmTimePara()
                self.state = 1012
                self.match(QuietParser.ParenRight)
                self.state = 1013
                self.variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1015
                self.match(QuietParser.Sin)
                self.state = 1016
                self.match(QuietParser.ParenLeft)
                self.state = 1017
                self.pmFloatPara()
                self.state = 1018
                self.match(QuietParser.Comma)
                self.state = 1019
                self.pmFloatPara()
                self.state = 1020
                self.match(QuietParser.Comma)
                self.state = 1021
                self.pmFloatPara()
                self.state = 1022
                self.match(QuietParser.Comma)
                self.state = 1023
                self.pmTimePara()
                self.state = 1024
                self.match(QuietParser.ParenRight)
                self.state = 1025
                self.variable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1027
                self.match(QuietParser.Gaussian)
                self.state = 1028
                self.match(QuietParser.ParenLeft)
                self.state = 1029
                self.pmFloatPara()
                self.state = 1030
                self.match(QuietParser.Comma)
                self.state = 1031
                self.pmFloatPara()
                self.state = 1032
                self.match(QuietParser.Comma)
                self.state = 1033
                self.pmFloatPara()
                self.state = 1034
                self.match(QuietParser.Comma)
                self.state = 1035
                self.pmTimePara()
                self.state = 1036
                self.match(QuietParser.ParenRight)
                self.state = 1037
                self.variable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1039
                self.match(QuietParser.Drag)
                self.state = 1040
                self.match(QuietParser.ParenLeft)
                self.state = 1041
                self.pmFloatPara()
                self.state = 1042
                self.match(QuietParser.Comma)
                self.state = 1043
                self.pmFloatPara()
                self.state = 1044
                self.match(QuietParser.Comma)
                self.state = 1045
                self.pmFloatPara()
                self.state = 1046
                self.match(QuietParser.Comma)
                self.state = 1047
                self.pmFloatPara()
                self.state = 1048
                self.match(QuietParser.Comma)
                self.state = 1049
                self.pmTimePara()
                self.state = 1050
                self.match(QuietParser.ParenRight)
                self.state = 1051
                self.variable()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1053
                self.match(QuietParser.Ramp)
                self.state = 1054
                self.match(QuietParser.ParenLeft)
                self.state = 1055
                self.pmFloatPara()
                self.state = 1056
                self.match(QuietParser.Comma)
                self.state = 1057
                self.pmFloatPara()
                self.state = 1058
                self.match(QuietParser.Comma)
                self.state = 1059
                self.pmTimePara()
                self.state = 1060
                self.match(QuietParser.ParenRight)
                self.state = 1061
                self.variable()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1063
                self.customWaveFormIns()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1064
                self.defWaveFormIns()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomWaveFormInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_customWaveFormIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomWaveFormIns" ):
                listener.enterCustomWaveFormIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomWaveFormIns" ):
                listener.exitCustomWaveFormIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomWaveFormIns" ):
                return visitor.visitCustomWaveFormIns(self)
            else:
                return visitor.visitChildren(self)




    def customWaveFormIns(self):

        localctx = QuietParser.CustomWaveFormInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_customWaveFormIns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(QuietParser.Id)
            self.state = 1068
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefWaveFormInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def defWaveInput(self):
            return self.getTypedRuleContext(QuietParser.DefWaveInputContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_defWaveFormIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefWaveFormIns" ):
                listener.enterDefWaveFormIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefWaveFormIns" ):
                listener.exitDefWaveFormIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefWaveFormIns" ):
                return visitor.visitDefWaveFormIns(self)
            else:
                return visitor.visitChildren(self)




    def defWaveFormIns(self):

        localctx = QuietParser.DefWaveFormInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_defWaveFormIns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(QuietParser.Id)
            self.state = 1071
            self.match(QuietParser.ParenLeft)
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==10 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 7) != 0):
                self.state = 1072
                self.defWaveInput()


            self.state = 1075
            self.match(QuietParser.ParenRight)
            self.state = 1076
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefWaveInputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmFloatPara(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.PmFloatParaContext)
            else:
                return self.getTypedRuleContext(QuietParser.PmFloatParaContext,i)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_defWaveInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefWaveInput" ):
                listener.enterDefWaveInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefWaveInput" ):
                listener.exitDefWaveInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefWaveInput" ):
                return visitor.visitDefWaveInput(self)
            else:
                return visitor.visitChildren(self)




    def defWaveInput(self):

        localctx = QuietParser.DefWaveInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_defWaveInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.pmFloatPara()
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1079
                self.match(QuietParser.Comma)
                self.state = 1080
                self.pmFloatPara()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaveOpInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Addp(self):
            return self.getToken(QuietParser.Addp, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def Subp(self):
            return self.getToken(QuietParser.Subp, 0)

        def Mulp(self):
            return self.getToken(QuietParser.Mulp, 0)

        def Convp(self):
            return self.getToken(QuietParser.Convp, 0)

        def Joinp(self):
            return self.getToken(QuietParser.Joinp, 0)

        def Scalep(self):
            return self.getToken(QuietParser.Scalep, 0)

        def Flipp(self):
            return self.getToken(QuietParser.Flipp, 0)

        def Cutp(self):
            return self.getToken(QuietParser.Cutp, 0)

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def timeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.TimeLiteralContext)
            else:
                return self.getTypedRuleContext(QuietParser.TimeLiteralContext,i)


        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_waveOpIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaveOpIns" ):
                listener.enterWaveOpIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaveOpIns" ):
                listener.exitWaveOpIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaveOpIns" ):
                return visitor.visitWaveOpIns(self)
            else:
                return visitor.visitChildren(self)




    def waveOpIns(self):

        localctx = QuietParser.WaveOpInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_waveOpIns)
        try:
            self.state = 1140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.match(QuietParser.Addp)
                self.state = 1084
                self.variable()
                self.state = 1085
                self.match(QuietParser.Comma)
                self.state = 1086
                self.variable()
                self.state = 1087
                self.match(QuietParser.Comma)
                self.state = 1088
                self.variable()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.match(QuietParser.Subp)
                self.state = 1091
                self.variable()
                self.state = 1092
                self.match(QuietParser.Comma)
                self.state = 1093
                self.variable()
                self.state = 1094
                self.match(QuietParser.Comma)
                self.state = 1095
                self.variable()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1097
                self.match(QuietParser.Mulp)
                self.state = 1098
                self.variable()
                self.state = 1099
                self.match(QuietParser.Comma)
                self.state = 1100
                self.variable()
                self.state = 1101
                self.match(QuietParser.Comma)
                self.state = 1102
                self.variable()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1104
                self.match(QuietParser.Convp)
                self.state = 1105
                self.variable()
                self.state = 1106
                self.match(QuietParser.Comma)
                self.state = 1107
                self.variable()
                self.state = 1108
                self.match(QuietParser.Comma)
                self.state = 1109
                self.variable()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1111
                self.match(QuietParser.Joinp)
                self.state = 1112
                self.variable()
                self.state = 1113
                self.match(QuietParser.Comma)
                self.state = 1114
                self.variable()
                self.state = 1115
                self.match(QuietParser.Comma)
                self.state = 1116
                self.variable()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1118
                self.match(QuietParser.Scalep)
                self.state = 1119
                self.variable()
                self.state = 1120
                self.match(QuietParser.Comma)
                self.state = 1121
                self.variable()
                self.state = 1122
                self.match(QuietParser.Comma)
                self.state = 1123
                self.variable()
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1125
                self.match(QuietParser.Flipp)
                self.state = 1126
                self.variable()
                self.state = 1127
                self.match(QuietParser.Comma)
                self.state = 1128
                self.variable()
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1130
                self.match(QuietParser.Cutp)
                self.state = 1131
                self.match(QuietParser.ParenLeft)
                self.state = 1132
                self.timeLiteral()
                self.state = 1133
                self.match(QuietParser.Comma)
                self.state = 1134
                self.timeLiteral()
                self.state = 1135
                self.match(QuietParser.ParenRight)
                self.state = 1136
                self.variable()
                self.state = 1137
                self.match(QuietParser.Comma)
                self.state = 1138
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PortCfgInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Setfreq(self):
            return self.getToken(QuietParser.Setfreq, 0)

        def portLiteral(self):
            return self.getTypedRuleContext(QuietParser.PortLiteralContext,0)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def number(self):
            return self.getTypedRuleContext(QuietParser.NumberContext,0)


        def Shiftphase(self):
            return self.getToken(QuietParser.Shiftphase, 0)

        def Setphase(self):
            return self.getToken(QuietParser.Setphase, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_portCfgIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPortCfgIns" ):
                listener.enterPortCfgIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPortCfgIns" ):
                listener.exitPortCfgIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPortCfgIns" ):
                return visitor.visitPortCfgIns(self)
            else:
                return visitor.visitChildren(self)




    def portCfgIns(self):

        localctx = QuietParser.PortCfgInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_portCfgIns)
        try:
            self.state = 1157
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.match(QuietParser.Setfreq)
                self.state = 1143
                self.portLiteral()
                self.state = 1144
                self.match(QuietParser.Comma)
                self.state = 1145
                self.number()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.match(QuietParser.Shiftphase)
                self.state = 1148
                self.portLiteral()
                self.state = 1149
                self.match(QuietParser.Comma)
                self.state = 1150
                self.number()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1152
                self.match(QuietParser.Setphase)
                self.state = 1153
                self.portLiteral()
                self.state = 1154
                self.match(QuietParser.Comma)
                self.state = 1155
                self.number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WavePlayInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Play(self):
            return self.getToken(QuietParser.Play, 0)

        def portLiteral(self):
            return self.getTypedRuleContext(QuietParser.PortLiteralContext,0)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def Playmod(self):
            return self.getToken(QuietParser.Playmod, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_wavePlayIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWavePlayIns" ):
                listener.enterWavePlayIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWavePlayIns" ):
                listener.exitWavePlayIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWavePlayIns" ):
                return visitor.visitWavePlayIns(self)
            else:
                return visitor.visitChildren(self)




    def wavePlayIns(self):

        localctx = QuietParser.WavePlayInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_wavePlayIns)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.match(QuietParser.Play)
                self.state = 1160
                self.portLiteral()
                self.state = 1161
                self.match(QuietParser.Comma)
                self.state = 1162
                self.variable()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1164
                self.match(QuietParser.Playmod)
                self.state = 1165
                self.portLiteral()
                self.state = 1166
                self.match(QuietParser.Comma)
                self.state = 1167
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalCapInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CapSignal(self):
            return self.getToken(QuietParser.CapSignal, 0)

        def portLiteral(self):
            return self.getTypedRuleContext(QuietParser.PortLiteralContext,0)


        def CapBit(self):
            return self.getToken(QuietParser.CapBit, 0)

        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_signalCapIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalCapIns" ):
                listener.enterSignalCapIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalCapIns" ):
                listener.exitSignalCapIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignalCapIns" ):
                return visitor.visitSignalCapIns(self)
            else:
                return visitor.visitChildren(self)




    def signalCapIns(self):

        localctx = QuietParser.SignalCapInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_signalCapIns)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1171
                self.match(QuietParser.CapSignal)
                self.state = 1172
                self.portLiteral()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.match(QuietParser.CapBit)
                self.state = 1174
                self.variable()
                self.state = 1175
                self.match(QuietParser.Comma)
                self.state = 1176
                self.portLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmFloatParaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(QuietParser.NumberContext,0)


        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_pmFloatPara

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmFloatPara" ):
                listener.enterPmFloatPara(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmFloatPara" ):
                listener.exitPmFloatPara(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmFloatPara" ):
                return visitor.visitPmFloatPara(self)
            else:
                return visitor.visitChildren(self)




    def pmFloatPara(self):

        localctx = QuietParser.PmFloatParaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pmFloatPara)
        try:
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 133, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.number()
                pass
            elif token in [10, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmTimeParaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeLiteral(self):
            return self.getTypedRuleContext(QuietParser.TimeLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_pmTimePara

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmTimePara" ):
                listener.enterPmTimePara(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmTimePara" ):
                listener.exitPmTimePara(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmTimePara" ):
                return visitor.visitPmTimePara(self)
            else:
                return visitor.visitChildren(self)




    def pmTimePara(self):

        localctx = QuietParser.PmTimeParaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_pmTimePara)
        try:
            self.state = 1186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                self.timeLiteral()
                pass
            elif token in [10, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleTmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataTransTmIns(self):
            return self.getTypedRuleContext(QuietParser.DataTransTmInsContext,0)


        def mathOpTmIns(self):
            return self.getTypedRuleContext(QuietParser.MathOpTmInsContext,0)


        def waitOpTmIns(self):
            return self.getTypedRuleContext(QuietParser.WaitOpTmInsContext,0)


        def syncOpTmIns(self):
            return self.getTypedRuleContext(QuietParser.SyncOpTmInsContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_moduleTmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleTmIns" ):
                listener.enterModuleTmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleTmIns" ):
                listener.exitModuleTmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleTmIns" ):
                return visitor.visitModuleTmIns(self)
            else:
                return visitor.visitChildren(self)




    def moduleTmIns(self):

        localctx = QuietParser.ModuleTmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_moduleTmIns)
        try:
            self.state = 1192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1188
                self.dataTransTmIns()
                pass
            elif token in [119, 120, 121, 122, 123, 124, 125, 126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.mathOpTmIns()
                pass
            elif token in [127, 128, 129, 130]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1190
                self.waitOpTmIns()
                pass
            elif token in [131, 132]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1191
                self.syncOpTmIns()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTransTmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ldt(self):
            return self.getToken(QuietParser.Ldt, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def timeLiteral(self):
            return self.getTypedRuleContext(QuietParser.TimeLiteralContext,0)


        def Movt(self):
            return self.getToken(QuietParser.Movt, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_dataTransTmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTransTmIns" ):
                listener.enterDataTransTmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTransTmIns" ):
                listener.exitDataTransTmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTransTmIns" ):
                return visitor.visitDataTransTmIns(self)
            else:
                return visitor.visitChildren(self)




    def dataTransTmIns(self):

        localctx = QuietParser.DataTransTmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dataTransTmIns)
        try:
            self.state = 1204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.match(QuietParser.Ldt)
                self.state = 1195
                self.variable()
                self.state = 1196
                self.match(QuietParser.Comma)
                self.state = 1197
                self.timeLiteral()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.match(QuietParser.Movt)
                self.state = 1200
                self.variable()
                self.state = 1201
                self.match(QuietParser.Comma)
                self.state = 1202
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOpTmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Addti(self):
            return self.getToken(QuietParser.Addti, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.VariableContext)
            else:
                return self.getTypedRuleContext(QuietParser.VariableContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def timeLiteral(self):
            return self.getTypedRuleContext(QuietParser.TimeLiteralContext,0)


        def Addt(self):
            return self.getToken(QuietParser.Addt, 0)

        def Subti(self):
            return self.getToken(QuietParser.Subti, 0)

        def Subt(self):
            return self.getToken(QuietParser.Subt, 0)

        def Multi(self):
            return self.getToken(QuietParser.Multi, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def FloatLiteral(self):
            return self.getToken(QuietParser.FloatLiteral, 0)

        def Mult(self):
            return self.getToken(QuietParser.Mult, 0)

        def Divti(self):
            return self.getToken(QuietParser.Divti, 0)

        def Divt(self):
            return self.getToken(QuietParser.Divt, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_mathOpTmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOpTmIns" ):
                listener.enterMathOpTmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOpTmIns" ):
                listener.exitMathOpTmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOpTmIns" ):
                return visitor.visitMathOpTmIns(self)
            else:
                return visitor.visitChildren(self)




    def mathOpTmIns(self):

        localctx = QuietParser.MathOpTmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_mathOpTmIns)
        self._la = 0 # Token type
        try:
            self.state = 1262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self.match(QuietParser.Addti)
                self.state = 1207
                self.variable()
                self.state = 1208
                self.match(QuietParser.Comma)
                self.state = 1209
                self.variable()
                self.state = 1210
                self.match(QuietParser.Comma)
                self.state = 1211
                self.timeLiteral()
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.match(QuietParser.Addt)
                self.state = 1214
                self.variable()
                self.state = 1215
                self.match(QuietParser.Comma)
                self.state = 1216
                self.variable()
                self.state = 1217
                self.match(QuietParser.Comma)
                self.state = 1218
                self.variable()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1220
                self.match(QuietParser.Subti)
                self.state = 1221
                self.variable()
                self.state = 1222
                self.match(QuietParser.Comma)
                self.state = 1223
                self.variable()
                self.state = 1224
                self.match(QuietParser.Comma)
                self.state = 1225
                self.timeLiteral()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1227
                self.match(QuietParser.Subt)
                self.state = 1228
                self.variable()
                self.state = 1229
                self.match(QuietParser.Comma)
                self.state = 1230
                self.variable()
                self.state = 1231
                self.match(QuietParser.Comma)
                self.state = 1232
                self.variable()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1234
                self.match(QuietParser.Multi)
                self.state = 1235
                self.variable()
                self.state = 1236
                self.match(QuietParser.Comma)
                self.state = 1237
                self.variable()
                self.state = 1238
                self.match(QuietParser.Comma)
                self.state = 1239
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1241
                self.match(QuietParser.Mult)
                self.state = 1242
                self.variable()
                self.state = 1243
                self.match(QuietParser.Comma)
                self.state = 1244
                self.variable()
                self.state = 1245
                self.match(QuietParser.Comma)
                self.state = 1246
                self.variable()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1248
                self.match(QuietParser.Divti)
                self.state = 1249
                self.variable()
                self.state = 1250
                self.match(QuietParser.Comma)
                self.state = 1251
                self.variable()
                self.state = 1252
                self.match(QuietParser.Comma)
                self.state = 1253
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1255
                self.match(QuietParser.Divt)
                self.state = 1256
                self.variable()
                self.state = 1257
                self.match(QuietParser.Comma)
                self.state = 1258
                self.variable()
                self.state = 1259
                self.match(QuietParser.Comma)
                self.state = 1260
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitOpTmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Waiti(self):
            return self.getToken(QuietParser.Waiti, 0)

        def portLiteral(self):
            return self.getTypedRuleContext(QuietParser.PortLiteralContext,0)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def timeLiteral(self):
            return self.getTypedRuleContext(QuietParser.TimeLiteralContext,0)


        def Wait(self):
            return self.getToken(QuietParser.Wait, 0)

        def variable(self):
            return self.getTypedRuleContext(QuietParser.VariableContext,0)


        def Waitq(self):
            return self.getToken(QuietParser.Waitq, 0)

        def phyQubit(self):
            return self.getTypedRuleContext(QuietParser.PhyQubitContext,0)


        def Waitqi(self):
            return self.getToken(QuietParser.Waitqi, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_waitOpTmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitOpTmIns" ):
                listener.enterWaitOpTmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitOpTmIns" ):
                listener.exitWaitOpTmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitOpTmIns" ):
                return visitor.visitWaitOpTmIns(self)
            else:
                return visitor.visitChildren(self)




    def waitOpTmIns(self):

        localctx = QuietParser.WaitOpTmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_waitOpTmIns)
        try:
            self.state = 1284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1264
                self.match(QuietParser.Waiti)
                self.state = 1265
                self.portLiteral()
                self.state = 1266
                self.match(QuietParser.Comma)
                self.state = 1267
                self.timeLiteral()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.match(QuietParser.Wait)
                self.state = 1270
                self.portLiteral()
                self.state = 1271
                self.match(QuietParser.Comma)
                self.state = 1272
                self.variable()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1274
                self.match(QuietParser.Waitq)
                self.state = 1275
                self.phyQubit()
                self.state = 1276
                self.match(QuietParser.Comma)
                self.state = 1277
                self.variable()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1279
                self.match(QuietParser.Waitqi)
                self.state = 1280
                self.phyQubit()
                self.state = 1281
                self.match(QuietParser.Comma)
                self.state = 1282
                self.timeLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyncOpTmInsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sync(self):
            return self.getToken(QuietParser.Sync, 0)

        def portLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.PortLiteralContext)
            else:
                return self.getTypedRuleContext(QuietParser.PortLiteralContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Comma)
            else:
                return self.getToken(QuietParser.Comma, i)

        def Syncq(self):
            return self.getToken(QuietParser.Syncq, 0)

        def phyQubit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.PhyQubitContext)
            else:
                return self.getTypedRuleContext(QuietParser.PhyQubitContext,i)


        def getRuleIndex(self):
            return QuietParser.RULE_syncOpTmIns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyncOpTmIns" ):
                listener.enterSyncOpTmIns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyncOpTmIns" ):
                listener.exitSyncOpTmIns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSyncOpTmIns" ):
                return visitor.visitSyncOpTmIns(self)
            else:
                return visitor.visitChildren(self)




    def syncOpTmIns(self):

        localctx = QuietParser.SyncOpTmInsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_syncOpTmIns)
        self._la = 0 # Token type
        try:
            self.state = 1302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1286
                self.match(QuietParser.Sync)
                self.state = 1287
                self.portLiteral()
                self.state = 1290 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1288
                    self.match(QuietParser.Comma)
                    self.state = 1289
                    self.portLiteral()
                    self.state = 1292 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==8):
                        break

                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1294
                self.match(QuietParser.Syncq)
                self.state = 1295
                self.phyQubit()
                self.state = 1298 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1296
                    self.match(QuietParser.Comma)
                    self.state = 1297
                    self.phyQubit()
                    self.state = 1300 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==8):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def FloatLiteral(self):
            return self.getToken(QuietParser.FloatLiteral, 0)

        def complexLiteral(self):
            return self.getTypedRuleContext(QuietParser.ComplexLiteralContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = QuietParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_number)
        try:
            self.state = 1307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1304
                self.match(QuietParser.IntLiteral)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.match(QuietParser.FloatLiteral)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1306
                self.complexLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParenLeft(self):
            return self.getToken(QuietParser.ParenLeft, 0)

        def realPart(self):
            return self.getTypedRuleContext(QuietParser.RealPartContext,0)


        def Comma(self):
            return self.getToken(QuietParser.Comma, 0)

        def imaginaryPart(self):
            return self.getTypedRuleContext(QuietParser.ImaginaryPartContext,0)


        def ParenRight(self):
            return self.getToken(QuietParser.ParenRight, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_complexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexLiteral" ):
                listener.enterComplexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexLiteral" ):
                listener.exitComplexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexLiteral" ):
                return visitor.visitComplexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def complexLiteral(self):

        localctx = QuietParser.ComplexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_complexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(QuietParser.ParenLeft)
            self.state = 1310
            self.realPart()
            self.state = 1311
            self.match(QuietParser.Comma)
            self.state = 1312
            self.imaginaryPart()
            self.state = 1313
            self.match(QuietParser.ParenRight)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatLiteral(self):
            return self.getToken(QuietParser.FloatLiteral, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_realPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealPart" ):
                listener.enterRealPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealPart" ):
                listener.exitRealPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealPart" ):
                return visitor.visitRealPart(self)
            else:
                return visitor.visitChildren(self)




    def realPart(self):

        localctx = QuietParser.RealPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_realPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            _la = self._input.LA(1)
            if not(_la==133 or _la==134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImaginaryPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatLiteral(self):
            return self.getToken(QuietParser.FloatLiteral, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_imaginaryPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginaryPart" ):
                listener.enterImaginaryPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginaryPart" ):
                listener.exitImaginaryPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginaryPart" ):
                return visitor.visitImaginaryPart(self)
            else:
                return visitor.visitChildren(self)




    def imaginaryPart(self):

        localctx = QuietParser.ImaginaryPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_imaginaryPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            _la = self._input.LA(1)
            if not(_la==133 or _la==134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimeUnit(self):
            return self.getToken(QuietParser.TimeUnit, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def FloatLiteral(self):
            return self.getToken(QuietParser.FloatLiteral, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_timeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeLiteral" ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeLiteral" ):
                listener.exitTimeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeLiteral" ):
                return visitor.visitTimeLiteral(self)
            else:
                return visitor.visitChildren(self)




    def timeLiteral(self):

        localctx = QuietParser.TimeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_timeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            _la = self._input.LA(1)
            if not(_la==133 or _la==134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1320
            self.match(QuietParser.TimeUnit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PortLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def phyPort(self):
            return self.getTypedRuleContext(QuietParser.PhyPortContext,0)


        def lgcPort(self):
            return self.getTypedRuleContext(QuietParser.LgcPortContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_portLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPortLiteral" ):
                listener.enterPortLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPortLiteral" ):
                listener.exitPortLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPortLiteral" ):
                return visitor.visitPortLiteral(self)
            else:
                return visitor.visitChildren(self)




    def portLiteral(self):

        localctx = QuietParser.PortLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_portLiteral)
        try:
            self.state = 1324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.phyPort()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.lgcPort()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhyPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PhyPortSym(self):
            return self.getToken(QuietParser.PhyPortSym, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.StringContext)
            else:
                return self.getTypedRuleContext(QuietParser.StringContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Colon)
            else:
                return self.getToken(QuietParser.Colon, i)

        def getRuleIndex(self):
            return QuietParser.RULE_phyPort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhyPort" ):
                listener.enterPhyPort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhyPort" ):
                listener.exitPhyPort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhyPort" ):
                return visitor.visitPhyPort(self)
            else:
                return visitor.visitChildren(self)




    def phyPort(self):

        localctx = QuietParser.PhyPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_phyPort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(QuietParser.PhyPortSym)
            self.state = 1327
            self.string()
            self.state = 1332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 1328
                self.match(QuietParser.Colon)
                self.state = 1329
                self.string()
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LgcPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PhyQubitSym(self):
            return self.getToken(QuietParser.PhyQubitSym, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(QuietParser.StringContext)
            else:
                return self.getTypedRuleContext(QuietParser.StringContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Colon)
            else:
                return self.getToken(QuietParser.Colon, i)

        def getRuleIndex(self):
            return QuietParser.RULE_lgcPort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgcPort" ):
                listener.enterLgcPort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgcPort" ):
                listener.exitLgcPort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgcPort" ):
                return visitor.visitLgcPort(self)
            else:
                return visitor.visitChildren(self)




    def lgcPort(self):

        localctx = QuietParser.LgcPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lgcPort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(QuietParser.PhyQubitSym)
            self.state = 1336
            self.string()
            self.state = 1339 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1337
                self.match(QuietParser.Colon)
                self.state = 1338
                self.string()
                self.state = 1341 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Digit(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Digit)
            else:
                return self.getToken(QuietParser.Digit, i)

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = QuietParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1343
                self.match(QuietParser.Digit)
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1349
                self.match(QuietParser.Id)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinaryType(self):
            return self.getTypedRuleContext(QuietParser.OrdinaryTypeContext,0)


        def withLengthArrayType(self):
            return self.getTypedRuleContext(QuietParser.WithLengthArrayTypeContext,0)


        def noLengthArrayType(self):
            return self.getTypedRuleContext(QuietParser.NoLengthArrayTypeContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_variableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableType" ):
                listener.enterVariableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableType" ):
                listener.exitVariableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableType" ):
                return visitor.visitVariableType(self)
            else:
                return visitor.visitChildren(self)




    def variableType(self):

        localctx = QuietParser.VariableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_variableType)
        try:
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1352
                self.ordinaryType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.withLengthArrayType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1354
                self.noLengthArrayType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrdinaryTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntType(self):
            return self.getToken(QuietParser.IntType, 0)

        def FloatType(self):
            return self.getToken(QuietParser.FloatType, 0)

        def QubitType(self):
            return self.getToken(QuietParser.QubitType, 0)

        def TimeType(self):
            return self.getToken(QuietParser.TimeType, 0)

        def WaveType(self):
            return self.getToken(QuietParser.WaveType, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_ordinaryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinaryType" ):
                listener.enterOrdinaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinaryType" ):
                listener.exitOrdinaryType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdinaryType" ):
                return visitor.visitOrdinaryType(self)
            else:
                return visitor.visitChildren(self)




    def ordinaryType(self):

        localctx = QuietParser.OrdinaryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_ordinaryType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4260607557632) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithLengthArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinaryType(self):
            return self.getTypedRuleContext(QuietParser.OrdinaryTypeContext,0)


        def BracketLeft(self):
            return self.getToken(QuietParser.BracketLeft, 0)

        def BracketRight(self):
            return self.getToken(QuietParser.BracketRight, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def Id(self):
            return self.getToken(QuietParser.Id, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_withLengthArrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithLengthArrayType" ):
                listener.enterWithLengthArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithLengthArrayType" ):
                listener.exitWithLengthArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithLengthArrayType" ):
                return visitor.visitWithLengthArrayType(self)
            else:
                return visitor.visitChildren(self)




    def withLengthArrayType(self):

        localctx = QuietParser.WithLengthArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_withLengthArrayType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.ordinaryType()

            self.state = 1360
            self.match(QuietParser.BracketLeft)
            self.state = 1361
            _la = self._input.LA(1)
            if not(_la==133 or _la==135):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1362
            self.match(QuietParser.BracketRight)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoLengthArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinaryType(self):
            return self.getTypedRuleContext(QuietParser.OrdinaryTypeContext,0)


        def BracketLeft(self):
            return self.getToken(QuietParser.BracketLeft, 0)

        def BracketRight(self):
            return self.getToken(QuietParser.BracketRight, 0)

        def getRuleIndex(self):
            return QuietParser.RULE_noLengthArrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoLengthArrayType" ):
                listener.enterNoLengthArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoLengthArrayType" ):
                listener.exitNoLengthArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoLengthArrayType" ):
                return visitor.visitNoLengthArrayType(self)
            else:
                return visitor.visitChildren(self)




    def noLengthArrayType(self):

        localctx = QuietParser.NoLengthArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_noLengthArrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.ordinaryType()
            self.state = 1365
            self.match(QuietParser.BracketLeft)
            self.state = 1366
            self.match(QuietParser.BracketRight)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(QuietParser.Id)
            else:
                return self.getToken(QuietParser.Id, i)

        def BracketLeft(self):
            return self.getToken(QuietParser.BracketLeft, 0)

        def BracketRight(self):
            return self.getToken(QuietParser.BracketRight, 0)

        def IntLiteral(self):
            return self.getToken(QuietParser.IntLiteral, 0)

        def phyQubit(self):
            return self.getTypedRuleContext(QuietParser.PhyQubitContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = QuietParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.state = 1375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1368
                self.match(QuietParser.Id)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 1369
                    self.match(QuietParser.BracketLeft)
                    self.state = 1370
                    _la = self._input.LA(1)
                    if not(_la==133 or _la==135):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1371
                    self.match(QuietParser.BracketRight)


                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.phyQubit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhyQubitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PhyQubitSym(self):
            return self.getToken(QuietParser.PhyQubitSym, 0)

        def string(self):
            return self.getTypedRuleContext(QuietParser.StringContext,0)


        def getRuleIndex(self):
            return QuietParser.RULE_phyQubit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhyQubit" ):
                listener.enterPhyQubit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhyQubit" ):
                listener.exitPhyQubit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhyQubit" ):
                return visitor.visitPhyQubit(self)
            else:
                return visitor.visitChildren(self)




    def phyQubit(self):

        localctx = QuietParser.PhyQubitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_phyQubit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(QuietParser.PhyQubitSym)
            self.state = 1378
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





