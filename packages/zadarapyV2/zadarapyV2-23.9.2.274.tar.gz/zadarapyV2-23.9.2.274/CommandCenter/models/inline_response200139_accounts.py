# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200139Accounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'enabled': 'bool',
        'users': 'int',
        'containers': 'int',
        'objects': 'int',
        'used_capacity': 'int'
    }

    attribute_map = {
        'name': 'name',
        'enabled': 'enabled',
        'users': 'users',
        'containers': 'containers',
        'objects': 'objects',
        'used_capacity': 'used_capacity'
    }

    def __init__(self, name=None, enabled=None, users=None, containers=None, objects=None, used_capacity=None, _configuration=None):  # noqa: E501
        """InlineResponse200139Accounts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._enabled = None
        self._users = None
        self._containers = None
        self._objects = None
        self._used_capacity = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if enabled is not None:
            self.enabled = enabled
        if users is not None:
            self.users = users
        if containers is not None:
            self.containers = containers
        if objects is not None:
            self.objects = objects
        if used_capacity is not None:
            self.used_capacity = used_capacity

    @property
    def name(self):
        """Gets the name of this InlineResponse200139Accounts.  # noqa: E501


        :return: The name of this InlineResponse200139Accounts.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200139Accounts.


        :param name: The name of this InlineResponse200139Accounts.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse200139Accounts.  # noqa: E501


        :return: The enabled of this InlineResponse200139Accounts.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse200139Accounts.


        :param enabled: The enabled of this InlineResponse200139Accounts.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def users(self):
        """Gets the users of this InlineResponse200139Accounts.  # noqa: E501


        :return: The users of this InlineResponse200139Accounts.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this InlineResponse200139Accounts.


        :param users: The users of this InlineResponse200139Accounts.  # noqa: E501
        :type: int
        """

        self._users = users

    @property
    def containers(self):
        """Gets the containers of this InlineResponse200139Accounts.  # noqa: E501


        :return: The containers of this InlineResponse200139Accounts.  # noqa: E501
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this InlineResponse200139Accounts.


        :param containers: The containers of this InlineResponse200139Accounts.  # noqa: E501
        :type: int
        """

        self._containers = containers

    @property
    def objects(self):
        """Gets the objects of this InlineResponse200139Accounts.  # noqa: E501


        :return: The objects of this InlineResponse200139Accounts.  # noqa: E501
        :rtype: int
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this InlineResponse200139Accounts.


        :param objects: The objects of this InlineResponse200139Accounts.  # noqa: E501
        :type: int
        """

        self._objects = objects

    @property
    def used_capacity(self):
        """Gets the used_capacity of this InlineResponse200139Accounts.  # noqa: E501


        :return: The used_capacity of this InlineResponse200139Accounts.  # noqa: E501
        :rtype: int
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this InlineResponse200139Accounts.


        :param used_capacity: The used_capacity of this InlineResponse200139Accounts.  # noqa: E501
        :type: int
        """

        self._used_capacity = used_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200139Accounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200139Accounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200139Accounts):
            return True

        return self.to_dict() != other.to_dict()
