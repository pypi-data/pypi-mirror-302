# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class Snapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'managed_for': 'str',
        'volume_capacity_mb': 'int',
        'volume_display_name': 'str',
        'volume_ext_name': 'str',
        'name': 'str',
        'status': 'str',
        'display_name': 'str',
        'cg_display_name': 'str',
        'cg_name': 'str',
        'pool_name': 'str',
        'application': 'str',
        'snapshot_set_id': 'str',
        'created_at': 'str',
        'modified_at': 'str'
    }

    attribute_map = {
        'managed_for': 'managed_for',
        'volume_capacity_mb': 'volume_capacity_mb',
        'volume_display_name': 'volume_display_name',
        'volume_ext_name': 'volume_ext_name',
        'name': 'name',
        'status': 'status',
        'display_name': 'display_name',
        'cg_display_name': 'cg_display_name',
        'cg_name': 'cg_name',
        'pool_name': 'pool_name',
        'application': 'application',
        'snapshot_set_id': 'snapshot_set_id',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, managed_for=None, volume_capacity_mb=None, volume_display_name=None, volume_ext_name=None, name=None, status=None, display_name=None, cg_display_name=None, cg_name=None, pool_name=None, application=None, snapshot_set_id=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """Snapshot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._managed_for = None
        self._volume_capacity_mb = None
        self._volume_display_name = None
        self._volume_ext_name = None
        self._name = None
        self._status = None
        self._display_name = None
        self._cg_display_name = None
        self._cg_name = None
        self._pool_name = None
        self._application = None
        self._snapshot_set_id = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if managed_for is not None:
            self.managed_for = managed_for
        if volume_capacity_mb is not None:
            self.volume_capacity_mb = volume_capacity_mb
        if volume_display_name is not None:
            self.volume_display_name = volume_display_name
        if volume_ext_name is not None:
            self.volume_ext_name = volume_ext_name
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if display_name is not None:
            self.display_name = display_name
        if cg_display_name is not None:
            self.cg_display_name = cg_display_name
        if cg_name is not None:
            self.cg_name = cg_name
        if pool_name is not None:
            self.pool_name = pool_name
        if application is not None:
            self.application = application
        if snapshot_set_id is not None:
            self.snapshot_set_id = snapshot_set_id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def managed_for(self):
        """Gets the managed_for of this Snapshot.  # noqa: E501


        :return: The managed_for of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._managed_for

    @managed_for.setter
    def managed_for(self, managed_for):
        """Sets the managed_for of this Snapshot.


        :param managed_for: The managed_for of this Snapshot.  # noqa: E501
        :type: str
        """

        self._managed_for = managed_for

    @property
    def volume_capacity_mb(self):
        """Gets the volume_capacity_mb of this Snapshot.  # noqa: E501


        :return: The volume_capacity_mb of this Snapshot.  # noqa: E501
        :rtype: int
        """
        return self._volume_capacity_mb

    @volume_capacity_mb.setter
    def volume_capacity_mb(self, volume_capacity_mb):
        """Sets the volume_capacity_mb of this Snapshot.


        :param volume_capacity_mb: The volume_capacity_mb of this Snapshot.  # noqa: E501
        :type: int
        """

        self._volume_capacity_mb = volume_capacity_mb

    @property
    def volume_display_name(self):
        """Gets the volume_display_name of this Snapshot.  # noqa: E501


        :return: The volume_display_name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._volume_display_name

    @volume_display_name.setter
    def volume_display_name(self, volume_display_name):
        """Sets the volume_display_name of this Snapshot.


        :param volume_display_name: The volume_display_name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._volume_display_name = volume_display_name

    @property
    def volume_ext_name(self):
        """Gets the volume_ext_name of this Snapshot.  # noqa: E501


        :return: The volume_ext_name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._volume_ext_name

    @volume_ext_name.setter
    def volume_ext_name(self, volume_ext_name):
        """Sets the volume_ext_name of this Snapshot.


        :param volume_ext_name: The volume_ext_name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._volume_ext_name = volume_ext_name

    @property
    def name(self):
        """Gets the name of this Snapshot.  # noqa: E501


        :return: The name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Snapshot.


        :param name: The name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Snapshot.  # noqa: E501


        :return: The status of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Snapshot.


        :param status: The status of this Snapshot.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def display_name(self):
        """Gets the display_name of this Snapshot.  # noqa: E501


        :return: The display_name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Snapshot.


        :param display_name: The display_name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def cg_display_name(self):
        """Gets the cg_display_name of this Snapshot.  # noqa: E501


        :return: The cg_display_name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._cg_display_name

    @cg_display_name.setter
    def cg_display_name(self, cg_display_name):
        """Sets the cg_display_name of this Snapshot.


        :param cg_display_name: The cg_display_name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._cg_display_name = cg_display_name

    @property
    def cg_name(self):
        """Gets the cg_name of this Snapshot.  # noqa: E501


        :return: The cg_name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._cg_name

    @cg_name.setter
    def cg_name(self, cg_name):
        """Sets the cg_name of this Snapshot.


        :param cg_name: The cg_name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._cg_name = cg_name

    @property
    def pool_name(self):
        """Gets the pool_name of this Snapshot.  # noqa: E501


        :return: The pool_name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this Snapshot.


        :param pool_name: The pool_name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def application(self):
        """Gets the application of this Snapshot.  # noqa: E501


        :return: The application of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this Snapshot.


        :param application: The application of this Snapshot.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def snapshot_set_id(self):
        """Gets the snapshot_set_id of this Snapshot.  # noqa: E501


        :return: The snapshot_set_id of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_set_id

    @snapshot_set_id.setter
    def snapshot_set_id(self, snapshot_set_id):
        """Sets the snapshot_set_id of this Snapshot.


        :param snapshot_set_id: The snapshot_set_id of this Snapshot.  # noqa: E501
        :type: str
        """

        self._snapshot_set_id = snapshot_set_id

    @property
    def created_at(self):
        """Gets the created_at of this Snapshot.  # noqa: E501


        :return: The created_at of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Snapshot.


        :param created_at: The created_at of this Snapshot.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Snapshot.  # noqa: E501


        :return: The modified_at of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Snapshot.


        :param modified_at: The modified_at of this Snapshot.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Snapshot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Snapshot):
            return True

        return self.to_dict() != other.to_dict()
