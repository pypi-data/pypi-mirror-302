# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class CategoryGrowthRates(pydantic_v1.BaseModel):
    date: str = pydantic_v1.Field()
    """
    The date of the entry.
    """

    category: str = pydantic_v1.Field()
    """
    The category of the entry.
    """

    cmgr_3: typing.Optional[float] = pydantic_v1.Field(alias="cmgr3", default=None)
    """
    3-month category growth rate, for monthly frequency.
    """

    cmgr_6: typing.Optional[float] = pydantic_v1.Field(alias="cmgr6", default=None)
    """
    6-month category growth rate, for monthly frequency.
    """

    cmgr_12: typing.Optional[float] = pydantic_v1.Field(alias="cmgr12", default=None)
    """
    12-month category growth rate, for monthly frequency.
    """

    cqgr_1: typing.Optional[float] = pydantic_v1.Field(alias="cqgr1", default=None)
    """
    1-quarter category growth rate, for quarterly frequency.
    """

    cqgr_2: typing.Optional[float] = pydantic_v1.Field(alias="cqgr2", default=None)
    """
    2-quarter category growth rate, for quarterly frequency.
    """

    cqgr_4: typing.Optional[float] = pydantic_v1.Field(alias="cqgr4", default=None)
    """
    4-quarter category growth rate, for quarterly frequency.
    """

    cagr_1: typing.Optional[float] = pydantic_v1.Field(alias="cagr1", default=None)
    """
    1-year category growth rate, for annual frequency.
    """

    cagr_2: typing.Optional[float] = pydantic_v1.Field(alias="cagr2", default=None)
    """
    2-year category growth rate, for annual frequency.
    """

    cagr_4: typing.Optional[float] = pydantic_v1.Field(alias="cagr4", default=None)
    """
    4-year category growth rate, for annual frequency.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
