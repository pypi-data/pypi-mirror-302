# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class SetTicketSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'expiration_date': 'str',
        'priority': 'str',
        'zsnap': 'str',
        'to_user': 'str',
        'rate_limit': 'int',
        'comment': 'str'
    }

    attribute_map = {
        'message_id': 'message_id',
        'expiration_date': 'expiration_date',
        'priority': 'priority',
        'zsnap': 'zsnap',
        'to_user': 'to_user',
        'rate_limit': 'rate_limit',
        'comment': 'comment'
    }

    def __init__(self, message_id=None, expiration_date=None, priority=None, zsnap=None, to_user=None, rate_limit=None, comment=None, _configuration=None):  # noqa: E501
        """SetTicketSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message_id = None
        self._expiration_date = None
        self._priority = None
        self._zsnap = None
        self._to_user = None
        self._rate_limit = None
        self._comment = None
        self.discriminator = None

        self.message_id = message_id
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if priority is not None:
            self.priority = priority
        if zsnap is not None:
            self.zsnap = zsnap
        if to_user is not None:
            self.to_user = to_user
        if rate_limit is not None:
            self.rate_limit = rate_limit
        self.comment = comment

    @property
    def message_id(self):
        """Gets the message_id of this SetTicketSettings.  # noqa: E501

        Message id up to 120 characters  # noqa: E501

        :return: The message_id of this SetTicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this SetTicketSettings.

        Message id up to 120 characters  # noqa: E501

        :param message_id: The message_id of this SetTicketSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SetTicketSettings.  # noqa: E501

        Support ticket suppression expiration date and time (UTC)  # noqa: E501

        :return: The expiration_date of this SetTicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SetTicketSettings.

        Support ticket suppression expiration date and time (UTC)  # noqa: E501

        :param expiration_date: The expiration_date of this SetTicketSettings.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def priority(self):
        """Gets the priority of this SetTicketSettings.  # noqa: E501

        Support ticket priority (empty string for default)  # noqa: E501

        :return: The priority of this SetTicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SetTicketSettings.

        Support ticket priority (empty string for default)  # noqa: E501

        :param priority: The priority of this SetTicketSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["low", "normal", "high", "urgent"]  # noqa: E501
        if (self._configuration.client_side_validation and
                priority not in allowed_values):
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def zsnap(self):
        """Gets the zsnap of this SetTicketSettings.  # noqa: E501

        Support ticket zsnap (empty string for default)  # noqa: E501

        :return: The zsnap of this SetTicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._zsnap

    @zsnap.setter
    def zsnap(self, zsnap):
        """Sets the zsnap of this SetTicketSettings.

        Support ticket zsnap (empty string for default)  # noqa: E501

        :param zsnap: The zsnap of this SetTicketSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes", "no", "lite"]  # noqa: E501
        if (self._configuration.client_side_validation and
                zsnap not in allowed_values):
            raise ValueError(
                "Invalid value for `zsnap` ({0}), must be one of {1}"  # noqa: E501
                .format(zsnap, allowed_values)
            )

        self._zsnap = zsnap

    @property
    def to_user(self):
        """Gets the to_user of this SetTicketSettings.  # noqa: E501

        Support ticket send to users (empty string for default)  # noqa: E501

        :return: The to_user of this SetTicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._to_user

    @to_user.setter
    def to_user(self, to_user):
        """Sets the to_user of this SetTicketSettings.

        Support ticket send to users (empty string for default)  # noqa: E501

        :param to_user: The to_user of this SetTicketSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes", "no"]  # noqa: E501
        if (self._configuration.client_side_validation and
                to_user not in allowed_values):
            raise ValueError(
                "Invalid value for `to_user` ({0}), must be one of {1}"  # noqa: E501
                .format(to_user, allowed_values)
            )

        self._to_user = to_user

    @property
    def rate_limit(self):
        """Gets the rate_limit of this SetTicketSettings.  # noqa: E501

        Rate limit must be at least 1  # noqa: E501

        :return: The rate_limit of this SetTicketSettings.  # noqa: E501
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this SetTicketSettings.

        Rate limit must be at least 1  # noqa: E501

        :param rate_limit: The rate_limit of this SetTicketSettings.  # noqa: E501
        :type: int
        """

        self._rate_limit = rate_limit

    @property
    def comment(self):
        """Gets the comment of this SetTicketSettings.  # noqa: E501

        Comment text up to 120 characters  # noqa: E501

        :return: The comment of this SetTicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SetTicketSettings.

        Comment text up to 120 characters  # noqa: E501

        :param comment: The comment of this SetTicketSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetTicketSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetTicketSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetTicketSettings):
            return True

        return self.to_dict() != other.to_dict()
