# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import Vpsa
from Vpsa.api.mirroring_and_cloning_api import MirroringAndCloningApi  # noqa: E501
from Vpsa.rest import ApiException


class TestMirroringAndCloningApi(unittest.TestCase):
    """MirroringAndCloningApi unit test stubs"""

    def setUp(self):
        self.api = Vpsa.api.mirroring_and_cloning_api.MirroringAndCloningApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_mirror_snapshot_policy(self):
        """Test case for add_mirror_snapshot_policy

        """
        pass

    def test_attach_snapshot_policy_to_vpsa_mirror_job(self):
        """Test case for attach_snapshot_policy_to_vpsa_mirror_job

        """
        pass

    def test_break_remote_clone_job(self):
        """Test case for break_remote_clone_job

        """
        pass

    def test_break_vpsa_mirror_job(self):
        """Test case for break_vpsa_mirror_job

        """
        pass

    def test_clone_mirror_job(self):
        """Test case for clone_mirror_job

        """
        pass

    def test_continue_vpsa_mirror_job(self):
        """Test case for continue_vpsa_mirror_job

        """
        pass

    def test_create_remote_clone(self):
        """Test case for create_remote_clone

        """
        pass

    def test_detach_snapshot_policy_from_vol(self):
        """Test case for detach_snapshot_policy_from_vol

        """
        pass

    def test_discover_remote_vpsa(self):
        """Test case for discover_remote_vpsa

        """
        pass

    def test_get_all_remote_clones(self):
        """Test case for get_all_remote_clones

        """
        pass

    def test_get_remote_clone(self):
        """Test case for get_remote_clone

        """
        pass

    def test_get_remote_vpsa_pools(self):
        """Test case for get_remote_vpsa_pools

        """
        pass

    def test_get_snapshots(self):
        """Test case for get_snapshots

        """
        pass

    def test_get_suggested_mirror_jobs(self):
        """Test case for get_suggested_mirror_jobs

        """
        pass

    def test_pause_remote_clone(self):
        """Test case for pause_remote_clone

        """
        pass

    def test_pause_vpsa_mirror_job(self):
        """Test case for pause_vpsa_mirror_job

        """
        pass

    def test_refresh_remote_vpsa(self):
        """Test case for refresh_remote_vpsa

        """
        pass

    def test_remove_remote_vpsa(self):
        """Test case for remove_remote_vpsa

        """
        pass

    def test_resume_broken_mirror(self):
        """Test case for resume_broken_mirror

        """
        pass

    def test_resume_remote_clone_job(self):
        """Test case for resume_remote_clone_job

        """
        pass

    def test_show_remote_cgs(self):
        """Test case for show_remote_cgs

        """
        pass

    def test_show_remote_mirror_job(self):
        """Test case for show_remote_mirror_job

        """
        pass

    def test_show_remote_snapshots_on_cg(self):
        """Test case for show_remote_snapshots_on_cg

        """
        pass

    def test_show_remote_vpsa(self):
        """Test case for show_remote_vpsa

        """
        pass

    def test_show_remote_vpsas(self):
        """Test case for show_remote_vpsas

        """
        pass

    def test_show_vpsa_mirror_jobs(self):
        """Test case for show_vpsa_mirror_jobs

        """
        pass

    def test_switch_remote_clone_mode(self):
        """Test case for switch_remote_clone_mode

        """
        pass

    def test_update_mirror_rate_limit(self):
        """Test case for update_mirror_rate_limit

        """
        pass

    def test_update_mirror_wan_optimization(self):
        """Test case for update_mirror_wan_optimization

        """
        pass

    def test_update_remote_vpsa_configuration(self):
        """Test case for update_remote_vpsa_configuration

        """
        pass

    def test_update_remote_vpsa_rate(self):
        """Test case for update_remote_vpsa_rate

        """
        pass


if __name__ == '__main__':
    unittest.main()
