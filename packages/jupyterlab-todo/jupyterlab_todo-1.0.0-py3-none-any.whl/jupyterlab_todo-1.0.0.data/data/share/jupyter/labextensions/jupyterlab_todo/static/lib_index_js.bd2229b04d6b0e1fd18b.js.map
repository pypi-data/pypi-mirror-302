{"version":3,"file":"lib_index_js.bd2229b04d6b0e1fd18b.js","mappings":";;;;;;;;;;;;;;;;;AAO8B;AAGsB;AAEpD,0CAA0C;AAC1C,MAAM,YAAY,GAAW,6BAA6B,CAAC;AAI3D;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,iBAAiB;IACrB,WAAW,EAAE,0CAA0C;IACvD,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,kEAAgB,CAAC;IAC5B,QAAQ,EAAE,CAAC,GAAoB,EAAE,OAAyB,EAAE,EAAE;QAC5D,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;QAClE,MAAM,aAAa,GAAG,KAAK,IAAI,EAAE;;YAC/B,gBAAgB;YAChB,MAAM,eAAe,GAAG,OAAO,CAAC,aAA8B,CAAC;YAC/D,IAAI,CAAC,sBAAe,CAAC,OAAO,CAAC,aAAa,0CAAE,IAAI;gBAAE,OAAO;YACzD,oDAAoD;YACpD,MAAM,QAAQ,GAAG,qBAAe,CAAC,OAAO,CAAC,KAAK,0CAAE,KAAK;YACrD,IAAI,CAAC,QAAQ;gBAAE,OAAO;YAEtB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAC;gBACnD,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC/B,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC/F,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAC/D,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACtB,8DAAY,CAAC,IAAI,CAAC,qCAAqC,EAAE,SAAS,EAAE,EAAC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE;4BAC7F,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE;oCAC/B,eAAe,CAAC,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC;oCAChD,IAAI,eAAe,CAAC,OAAO,CAAC,UAAU,EAAC;wCACrC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE;wCAC7C,eAAe,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;qCAC1E;gCACH,CAAC,EAAE;yBACJ,GAAE,CAAC,CAAC;oBACL,MAAM;iBACL;aACF;QACL,CAAC;QACD,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE;YAClC,aAAa,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,EAAE;YACpC,KAAK,EAAE,iBAAiB;YACxB,OAAO,EAAE,aAAa;YACtB,SAAS,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,aAAa,KAAI,IAAI;SAC/C,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC;YACzB,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,CAAC,QAAQ,CAAC;YAChB,QAAQ,EAAE,cAAc;SACzB,CAAC,CAAC;IAEL,CAAC;CAGF,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab_todo/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport {\n  INotebookTracker\n} from '@jupyterlab/notebook';\n\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { Notification } from '@jupyterlab/apputils';\n\n// Create a new command for your extension\nconst TODO_COMMAND: string = 'jupyterlab_todo:check-todos';\n\n\n\n/**\n * Initialization data for the jupyterlab_todo extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab_todo',\n  description: 'Pop up your to-do\\'s in opened notebook.',\n  autoStart: true,\n  requires: [INotebookTracker],\n  activate: (app: JupyterFrontEnd, tracker: INotebookTracker) => {\n    console.log('JupyterLab extension jupyterlab_todo is activated!');\n    const checkForTodos = async () => {\n      // Open notebook\n      const currentNotebook = tracker.currentWidget as NotebookPanel;\n      if (!currentNotebook.context.contentsModel?.name) return;\n      // const cellList = currentNotebook.content.widgets;\n      const cellList = currentNotebook.content.model?.cells\n      if (!cellList) return;\n\n      for (let index = 0; index < cellList.length; index++){\n        const cell = cellList.get(index);\n        const cellJson = cell.toJSON();\n        const cellText = Array.isArray(cellJson.source) ? cellJson.source.join('\\n') : cellJson.source; \n        const todoMatches = cellText.match(/TODO:|todo:|To do|ToDo/gi);\n        if (todoMatches && todoMatches.length > 0) {\n          console.log(cellJson);\n          Notification.emit(`Found TODOs in the current notebook`, \"warning\", {autoClose: 3000, actions: [\n            { label: 'Go to', callback: () => {\n              currentNotebook.content.activeCellIndex = index;\n              if (currentNotebook.content.activeCell){\n                currentNotebook.content.activeCell.activate()\n                currentNotebook.content.scrollToCell(currentNotebook.content.activeCell);\n              }\n            } }\n          ],});  \n          break;\n          }\n        }\n    }\n    tracker.currentChanged.connect(() => {\n      checkForTodos();\n    });\n    app.commands.addCommand(TODO_COMMAND, {\n      label: 'Check for TODOs',\n      execute: checkForTodos,\n      isVisible: () => tracker.currentWidget !==null\n    });\n\n    app.commands.addKeyBinding({\n      command: TODO_COMMAND,\n      keys: ['Ctrl Y'],\n      selector: '.jp-Notebook'\n    });\n    \n  }\n\n  \n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}