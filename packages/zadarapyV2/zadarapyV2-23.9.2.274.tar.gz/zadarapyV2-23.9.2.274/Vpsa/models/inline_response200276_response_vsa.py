# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200276ResponseVsa(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'int',
        'url': 'str',
        'display_name': 'str',
        'service_mode': 'int',
        'version': 'str',
        'created_at': 'str',
        'modified_at': 'str',
        'snapshot_creation_overload_protection': 'str',
        'create_server_on_login': 'str'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'display_name': 'display_name',
        'service_mode': 'service_mode',
        'version': 'version',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'snapshot_creation_overload_protection': 'snapshot_creation_overload_protection',
        'create_server_on_login': 'create_server_on_login'
    }

    def __init__(self, name=None, url=None, display_name=None, service_mode=None, version=None, created_at=None, modified_at=None, snapshot_creation_overload_protection=None, create_server_on_login=None, _configuration=None):  # noqa: E501
        """InlineResponse200276ResponseVsa - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._url = None
        self._display_name = None
        self._service_mode = None
        self._version = None
        self._created_at = None
        self._modified_at = None
        self._snapshot_creation_overload_protection = None
        self._create_server_on_login = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if display_name is not None:
            self.display_name = display_name
        if service_mode is not None:
            self.service_mode = service_mode
        if version is not None:
            self.version = version
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if snapshot_creation_overload_protection is not None:
            self.snapshot_creation_overload_protection = snapshot_creation_overload_protection
        if create_server_on_login is not None:
            self.create_server_on_login = create_server_on_login

    @property
    def name(self):
        """Gets the name of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The name of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: int
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200276ResponseVsa.


        :param name: The name of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: int
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The url of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse200276ResponseVsa.


        :param url: The url of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The display_name of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200276ResponseVsa.


        :param display_name: The display_name of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def service_mode(self):
        """Gets the service_mode of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The service_mode of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: int
        """
        return self._service_mode

    @service_mode.setter
    def service_mode(self, service_mode):
        """Sets the service_mode of this InlineResponse200276ResponseVsa.


        :param service_mode: The service_mode of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: int
        """

        self._service_mode = service_mode

    @property
    def version(self):
        """Gets the version of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The version of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse200276ResponseVsa.


        :param version: The version of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The created_at of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200276ResponseVsa.


        :param created_at: The created_at of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The modified_at of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200276ResponseVsa.


        :param modified_at: The modified_at of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def snapshot_creation_overload_protection(self):
        """Gets the snapshot_creation_overload_protection of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The snapshot_creation_overload_protection of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_creation_overload_protection

    @snapshot_creation_overload_protection.setter
    def snapshot_creation_overload_protection(self, snapshot_creation_overload_protection):
        """Sets the snapshot_creation_overload_protection of this InlineResponse200276ResponseVsa.


        :param snapshot_creation_overload_protection: The snapshot_creation_overload_protection of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: str
        """

        self._snapshot_creation_overload_protection = snapshot_creation_overload_protection

    @property
    def create_server_on_login(self):
        """Gets the create_server_on_login of this InlineResponse200276ResponseVsa.  # noqa: E501


        :return: The create_server_on_login of this InlineResponse200276ResponseVsa.  # noqa: E501
        :rtype: str
        """
        return self._create_server_on_login

    @create_server_on_login.setter
    def create_server_on_login(self, create_server_on_login):
        """Sets the create_server_on_login of this InlineResponse200276ResponseVsa.


        :param create_server_on_login: The create_server_on_login of this InlineResponse200276ResponseVsa.  # noqa: E501
        :type: str
        """

        self._create_server_on_login = create_server_on_login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200276ResponseVsa, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200276ResponseVsa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200276ResponseVsa):
            return True

        return self.to_dict() != other.to_dict()
