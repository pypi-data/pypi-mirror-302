"""Calculate and plot velocity distributions using the backtrace method.

    How to run
    ----------
    $ python vdist-solver1d.py -d <directory> -index <index> -i <ispec> -o output.png
"""
from argparse import ArgumentParser
from pathlib import Path
import pickle as pkl

import matplotlib.pyplot as plt
import numpy as np
import scipy.constants as cn

from vdsolver.core import PhaseGrid, VSolveTarget
from vdsolver.sims.essimulator import ChargedParticle
from vdsolver.tools.hybrid import create_simulation_for_hybrid


def parse_args():
    parser = ArgumentParser()

    parser.add_argument('--directory', '-d', default='./')
    parser.add_argument('--index', '-index', default=105, type=int)

    parser.add_argument('--name', '-name', default=None)

    parser.add_argument('--ispec', '-i', default=0, type=int)

    parser.add_argument('--dt', '-dt', default=1.0, type=float)
    parser.add_argument('--maxstep', '-ms', default=10000, type=int)

    parser.add_argument('--output', '-o', default=None)

    parser.add_argument('--max_workers', '-mw', default=8, type=int)
    parser.add_argument('--chunksize', '-chk', default=100, type=int)

    parser.add_argument('--use_mpi', '-mpi', action='store_true')

    return parser.parse_args()


def create_simulator(*args, **kwargs):
    sim = None
    return sim


def main():
    args = parse_args()

    # Set up general simulation parameters.
    dx = 1.0
    dt = 1.0*args.dt
    coef_ef = 1.0
    coef_bf = 1.0

    # Set up plasma particle parameters.
    if args.ispec == 0:  # for electron
        q = -cn.e
        m = cn.m_e
        T = 1e5
        vth = np.sqrt(cn.k*T/m)
        vdri = 1e6
        n0 = 1.0

    elif args.ispec == 1:  # for ion
        q = cn.e
        m = cn.m_e*1836.15
        T = 1e5
        vth = np.sqrt(cn.k*T/m)
        vdri = 1e6
        n0 = 1.0

    q_m = q/m

    # Set up a phase space grid paramters.
    N{C1} = 100

    phase_grid = PhaseGrid(
        {phase}
    )

    # Create simulator
    pkl_name = args.name+'-'+'args.ispec'+'.pkl'
    if args.name and Path(pkl_name).exists():
        with open(pkl_name, 'rb') as f:
            sim = pkl.load(f)
    else:
        sim = create_simulation_for_hybrid(Path(args.directory),
                                        index=args.index,
                                        dx=dx,
                                        vth=vth,
                                        vdri=vdri,
                                        n0=n0,
                                        coef_ef=coef_ef,
                                        coef_bf=coef_bf,
                                        )
        # sim = create_simulator()
        if args.name:
            with open(pkl_name, 'wb') as f:
                pkl.dump(sim, f)

    # Solve velocity distribution.
    pcl_prototype = ChargedParticle.create_prototype(q_m)
    target = VSolveTarget(sim,
                          pcl_prototype,
                          dt,
                          phase_grid,
                          args.maxstep,
                          args.max_workers,
                          args.chunksize,
                          show_progress=True,
                          use_mpi=args.use_mpi,
                          )

    phases, probs = target.solve()

    # Prepare data for visualisation.
    phases = phases.reshape(N{C1}, 6)
    {C1} = phases[:, {i1}]
    probs = probs.reshape(N{C1})

    # Plot velocity distribution.
    plt.plot({C1}, probs)
    plt.xlabel('{C1}')
    plt.ylabel('Probability')

    if args.output is None:
        plt.show()
    else:
        plt.gcf().savefig(args.output)


if __name__ == '__main__':
    main()
