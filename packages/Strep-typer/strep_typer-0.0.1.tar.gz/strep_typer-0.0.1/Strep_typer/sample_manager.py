# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_sample_manager.ipynb.

# %% auto 0
__all__ = ['sample_data', 'input_manager', 'get_abs_file_path', 'unit_test_single', 'unit_test_single_2', 'unit_test_from_folder',
           'unit_test_from_samplesheet']

# %% ../nbs/01_sample_manager.ipynb 2
# That export there, it makes sure this code goes into the module.

# standard libs
import os
import re

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv  # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml  # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore  # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore import (
    test,
)
from fastcore.script import (
    call_parse,
)  # for @call_parse, https://fastcore.fast.ai/script
import json  # for nicely printing json and yaml
from fastcore import test
from fastcore.script import call_parse
from Strep_typer import (
    core,
)
from pathlib import Path  # to be able write :Path in cli function

# Project specific libraries

# %% ../nbs/01_sample_manager.ipynb 6
class sample_data:

    species = "Unspecified"

    def __init__(self, attributes, input_folder):
        attributes = attributes.copy()
        try:
            self.input_folder = os.path.abspath(input_folder)
        except TypeError:
            self.input_folder = None
        try:
            self.sample_name: str = attributes["sample_name"]
        except KeyError:
            self.sample_name = None
        try:
            self.assembly_file = get_abs_file_path(
                self.input_folder, attributes["assembly_file"]
            )
        except KeyError:
            self.assembly_file = None
        try:
            if isinstance(attributes["Illumina_read_files"], str):
                Illumina_read_files = attributes["Illumina_read_files"].split(",")
            elif isinstance(attributes["Illumina_read_files"], list):
                Illumina_read_files = attributes["Illumina_read_files"]
            self.Illumina_read_files = [
                get_abs_file_path(self.input_folder, Illumina_read_files[0]),
                get_abs_file_path(self.input_folder, Illumina_read_files[1]),
            ]
        except KeyError:
            self.Illumina_read_files = None
        try:
            self.Nanopore_read_file: Path = get_abs_file_path(
                self.input_folder, attributes["Nanopore_read_file"]
            )
        except KeyError:
            self.Nanopore_read_file = None
        self.metadata: dict = attributes


class input_manager:

    def __init__(self, input_config):
        try:
            self.base_input_folder: Path = os.path.abspath(input_config["input_folder"])
        except:
            self.base_input_folder: Path = "./"
        if input_config["load_from_samplesheet"]:
            if not input_config["input_folder"] or input_config["input_folder"] is None:
                self.base_input_folder = os.path.dirname(input_config["samplesheet"])
            self.add_samples_from_samplesheet(input_config)
        elif input_config["load_from_folder"]:
            self.add_samples_from_folder(input_config)

    ### TODO: figure out how to deal with duplicate sample names. Just a warning?

    def add_sample(self, attributes):
        self.samples.append(sample_data(attributes, self.base_input_folder))
        return

    def add_samples(self, file_paths):
        self.samples = []
        for sample_name in file_paths:
            attributes = file_paths[sample_name].copy()
            attributes["sample_name"] = sample_name
            self.add_sample(attributes)
        return file_paths

    def add_samples_from_samplesheet(self, input_config):
        file_paths = self.get_input_from_samplesheet(input_config)
        self.add_samples(file_paths)

    def add_samples_from_folder(self, input_config):
        file_paths = self.get_input_from_folder(input_config)
        self.add_samples(file_paths)

    def get_input_from_folder(self, input_config):
        illumina_regex = re.compile(input_config["file_patterns"]["Illumina_read_file"])
        nanopore_regex = re.compile(input_config["file_patterns"]["Nanopore_read_file"])
        assembly_regex = re.compile(
            input_config["file_patterns"]["assembly_fasta_file"]
        )
        input_folder = input_config["input_folder"]
        file_paths = {}
        files = os.listdir(input_folder)
        for file in files:
            sample_name = False
            if file.endswith((".tsv", ".txt", ".tab")):
                metadata_file = os.path.join(input_folder, file)
                self.metadata_file = metadata_file
                # metadata = self.parse_metadata()
            elif file.endswith((".fa", ".fasta", ".fna")):
                sample_name = re.match(assembly_regex, file).group("sample_name")
                if sample_name in file_paths:
                    file_paths[sample_name]["assembly_file"] = file
                else:
                    file_paths[sample_name] = {"assembly_file": file}

            elif file.endswith(".fastq.gz"):
                re_match = re.match(illumina_regex, file)
                if re_match:
                    sample_name = re_match.group("sample_name")
                    read_number = re_match.group("paired_read_number")
                    if read_number == "R1":
                        if sample_name in file_paths:
                            if "Illumina_read_files" in file_paths[sample_name]:
                                file_paths[sample_name]["Illumina_read_files"] = (
                                    file
                                    + ","
                                    + file_paths[sample_name]["Illumina_read_files"]
                                )
                            else:
                                file_paths[sample_name]["Illumina_read_files"] = file
                        else:
                            file_paths[sample_name] = {"Illumina_read_files": file}
                    elif read_number == "R2":
                        if sample_name in file_paths:
                            if "Illumina_read_files" in file_paths[sample_name]:
                                file_paths[sample_name]["Illumina_read_files"] = (
                                    file_paths[sample_name]["Illumina_read_files"]
                                    + ","
                                    + file
                                )
                            else:
                                file_paths[sample_name]["Illumina_read_files"] = file
                        else:
                            file_paths[sample_name] = {"Illumina_read_files": file}

                #### TODO: Logic for nanopore read data, need file naming conventions
                else:
                    re_match = re.match(nanopore_regex, file)
                    if re_match:
                        sample_name = re_match.group("sample_name")
                        if sample_name in file_paths:
                            file_paths[sample_name]["Nanopore_read_file"] = file
                        else:
                            file_paths[sample_name] = {"Nanopore_read_file": file}
        return file_paths

    def get_input_from_samplesheet(self, input_config):
        df = core.get_samplesheet({"path": input_config["samplesheet"]})
        df.set_index("sample_name", inplace=True)
        df_dict = df.to_dict("index")
        return df_dict

    def __iter__(self):
        for sample in self.samples:
            yield (sample)

    def __len__(self):
        return len(self.samples)


def get_abs_file_path(input_folder, file_path):
    if file_path == os.path.abspath(file_path):
        abs_file_path = file_path
    if input_folder:
        abs_file_path = os.path.abspath(os.path.join(input_folder, file_path))
    else:
        abs_file_path = os.path.abspath(file_path)
    if not os.path.exists(abs_file_path):
        print(f"WARNING: {abs_file_path} does not exist")
    return abs_file_path

# %% ../nbs/01_sample_manager.ipynb 9
def unit_test_single():
    config = core.get_config()
    example_sample = sample_data(
        {
            "sample_name": "GAS-2022-1029",
            "assembly_file": "examples/GAS-2022-1029.fasta",
            "Illumina_read_files": [
                "examples/GAS-2022-1029_S42_L555_R1_001.fastq.gz",
                "examples/GAS-2022-1029_S42_L555_R2_001.fastq.gz",
            ],
        },
        input_folder=False,
    )
    assert example_sample.sample_name == "GAS-2022-1029"
    assert len(example_sample.Illumina_read_files) == 2
    assert not example_sample.Nanopore_read_file
    print(example_sample.__dict__)


def unit_test_single_2():
    config = core.get_config()
    example_sample = sample_data(
        {
            "sample_name": "GAS-2024-0773",
            "assembly_file": "GAS-2024-0773.fasta",
            "Illumina_read_files": [
                "GAS-2024-0773_S35_L555_R1_001.fastq.gz",
                "GAS-2024-0773_S35_L555_R2_001.fastq.gz",
            ],
        },
        input_folder="examples",
    )
    assert example_sample.sample_name == "GAS-2024-0773"
    assert len(example_sample.Illumina_read_files) == 2
    assert not example_sample.Nanopore_read_file
    print(example_sample.__dict__)


def unit_test_from_folder():
    config = core.get_config()
    input_config = config["input_manager"]
    input_config["load_from_folder"] = True
    input_config["input_folder"] = "examples/"
    test = input_manager(input_config)
    # for x in test:
    #    print(x.metadata["Illumina_read_files"])


def unit_test_from_samplesheet():
    config = core.get_config()
    input_config = config["input_manager"]
    input_config["load_from_samplesheet"] = True
    input_config["samplesheet"] = "examples/samplesheet.tsv"
    test = input_manager(input_config)
    for x in test:
        print(x.metadata["Illumina_read_files"])
