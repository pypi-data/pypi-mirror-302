# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class UserAccountingResponse(pydantic_v1.BaseModel):
    """
    Represents the basic growth accounting metrics for the user count.
    """

    date: str = pydantic_v1.Field()
    """
    The date of the entry.
    """

    active_users: int = pydantic_v1.Field()
    """
    The number of active users in the period.
    """

    retained: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The number of retained users from the last period in the current period.
    """

    new: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The number of new users in the period.
    """

    resurrected: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The number of resurrected users in the period.
    """

    churned: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The number of churned users in the period.
    """

    cmgr_3: typing.Optional[float] = pydantic_v1.Field(alias="cmgr3", default=None)
    """
    3-month user count growth rate, for monthly frequency.
    """

    cmgr_6: typing.Optional[float] = pydantic_v1.Field(alias="cmgr6", default=None)
    """
    6-month user count growth rate, for monthly frequency.
    """

    cmgr_12: typing.Optional[float] = pydantic_v1.Field(alias="cmgr12", default=None)
    """
    12-month user count growth rate, for monthly frequency.
    """

    cqgr_1: typing.Optional[float] = pydantic_v1.Field(alias="cqgr1", default=None)
    """
    1-quarter user count growth rate, for quarterly frequency.
    """

    cqgr_2: typing.Optional[float] = pydantic_v1.Field(alias="cqgr2", default=None)
    """
    2-quarter user count growth rate, for quarterly frequency.
    """

    cqgr_4: typing.Optional[float] = pydantic_v1.Field(alias="cqgr4", default=None)
    """
    4-quarter user count growth rate, for quarterly frequency.
    """

    logo_retention: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The logo retention rate, defined as retained / active over last period.
    """

    quick_ratio: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The quick ratio, defined as (resurrected + new) / churned.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
