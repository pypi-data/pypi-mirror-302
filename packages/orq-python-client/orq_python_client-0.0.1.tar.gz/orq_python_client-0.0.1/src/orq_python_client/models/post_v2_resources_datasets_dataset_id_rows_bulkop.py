"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from orq_python_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_python_client.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class PostV2ResourcesDatasetsDatasetIDRowsBulkRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesType(str, Enum):
    IMAGE_URL = "image_url"


class PostV2ResourcesDatasetsDatasetIDRowsBulk2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2ResourcesDatasetsDatasetIDRowsBulk2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2ResourcesDatasetsDatasetIDRowsBulk22TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesType
    image_url: PostV2ResourcesDatasetsDatasetIDRowsBulk2ImageURLTypedDict


class PostV2ResourcesDatasetsDatasetIDRowsBulk22(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesType

    image_url: PostV2ResourcesDatasetsDatasetIDRowsBulk2ImageURL


class PostV2ResourcesDatasetsDatasetIDRowsBulk2Type(str, Enum):
    TEXT = "text"


class PostV2ResourcesDatasetsDatasetIDRowsBulk21TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2Type
    text: str


class PostV2ResourcesDatasetsDatasetIDRowsBulk21(BaseModel):
    r"""Text content part of a prompt message"""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2Type

    text: str


PostV2ResourcesDatasetsDatasetIDRowsBulkContent2TypedDict = Union[
    PostV2ResourcesDatasetsDatasetIDRowsBulk21TypedDict,
    PostV2ResourcesDatasetsDatasetIDRowsBulk22TypedDict,
]


PostV2ResourcesDatasetsDatasetIDRowsBulkContent2 = Union[
    PostV2ResourcesDatasetsDatasetIDRowsBulk21,
    PostV2ResourcesDatasetsDatasetIDRowsBulk22,
]


PostV2ResourcesDatasetsDatasetIDRowsBulkContentTypedDict = Union[
    str, List[PostV2ResourcesDatasetsDatasetIDRowsBulkContent2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


PostV2ResourcesDatasetsDatasetIDRowsBulkContent = Union[
    str, List[PostV2ResourcesDatasetsDatasetIDRowsBulkContent2]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class PostV2ResourcesDatasetsDatasetIDRowsBulkType(str, Enum):
    FUNCTION = "function"


class PostV2ResourcesDatasetsDatasetIDRowsBulkFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2ResourcesDatasetsDatasetIDRowsBulkFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2ResourcesDatasetsDatasetIDRowsBulkToolCallsTypedDict(TypedDict):
    type: PostV2ResourcesDatasetsDatasetIDRowsBulkType
    function: PostV2ResourcesDatasetsDatasetIDRowsBulkFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class PostV2ResourcesDatasetsDatasetIDRowsBulkToolCalls(BaseModel):
    type: PostV2ResourcesDatasetsDatasetIDRowsBulkType

    function: PostV2ResourcesDatasetsDatasetIDRowsBulkFunction

    id: Optional[str] = None

    index: Optional[float] = None


class PostV2ResourcesDatasetsDatasetIDRowsBulkMessagesTypedDict(TypedDict):
    role: PostV2ResourcesDatasetsDatasetIDRowsBulkRole
    r"""The role of the prompt message"""
    content: PostV2ResourcesDatasetsDatasetIDRowsBulkContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[
        List[PostV2ResourcesDatasetsDatasetIDRowsBulkToolCallsTypedDict]
    ]


class PostV2ResourcesDatasetsDatasetIDRowsBulkMessages(BaseModel):
    role: PostV2ResourcesDatasetsDatasetIDRowsBulkRole
    r"""The role of the prompt message"""

    content: PostV2ResourcesDatasetsDatasetIDRowsBulkContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[PostV2ResourcesDatasetsDatasetIDRowsBulkToolCalls]] = None


class DatasetRowsTypedDict(TypedDict):
    r"""Expected dataset row model when talking to the API."""

    messages: List[PostV2ResourcesDatasetsDatasetIDRowsBulkMessagesTypedDict]
    r"""Input message(s) of the dataset row"""
    expected_output: NotRequired[Nullable[str]]
    r"""Reference of the dataset row"""


class DatasetRows(BaseModel):
    r"""Expected dataset row model when talking to the API."""

    messages: List[PostV2ResourcesDatasetsDatasetIDRowsBulkMessages]
    r"""Input message(s) of the dataset row"""

    expected_output: OptionalNullable[str] = UNSET
    r"""Reference of the dataset row"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["expected_output"]
        nullable_fields = ["expected_output"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PostV2ResourcesDatasetsDatasetIDRowsBulkRequestBodyTypedDict(TypedDict):
    dataset_rows: List[DatasetRowsTypedDict]


class PostV2ResourcesDatasetsDatasetIDRowsBulkRequestBody(BaseModel):
    dataset_rows: Annotated[List[DatasetRows], pydantic.Field(alias="datasetRows")]


class PostV2ResourcesDatasetsDatasetIDRowsBulkRequestTypedDict(TypedDict):
    dataset_id: str
    r"""Dataset ID"""
    request_body: NotRequired[
        PostV2ResourcesDatasetsDatasetIDRowsBulkRequestBodyTypedDict
    ]


class PostV2ResourcesDatasetsDatasetIDRowsBulkRequest(BaseModel):
    dataset_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Dataset ID"""

    request_body: Annotated[
        Optional[PostV2ResourcesDatasetsDatasetIDRowsBulkRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesPublicResponseType(str, Enum):
    IMAGE_URL = "image_url"


class PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    id: NotRequired[str]
    r"""The orq.ai id of the image"""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    id: Optional[str] = None
    r"""The orq.ai id of the image"""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources2TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesPublicResponseType
    image_url: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesImageURLTypedDict


class PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources2(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesPublicResponseType

    image_url: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesImageURL


class PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesPublicType(str, Enum):
    TEXT = "text"


class PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources1TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesPublicType
    text: str


class PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources1(BaseModel):
    r"""Text content part of a prompt message"""

    type: PostV2ResourcesDatasetsDatasetIDRowsBulk2ResourcesPublicType

    text: str


PostV2ResourcesDatasetsDatasetIDRowsBulkContentResources2TypedDict = Union[
    PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources1TypedDict,
    PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources2TypedDict,
]


PostV2ResourcesDatasetsDatasetIDRowsBulkContentResources2 = Union[
    PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources1,
    PostV2ResourcesDatasetsDatasetIDRowsBulk2Resources2,
]


PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesContentTypedDict = Union[
    str, List[PostV2ResourcesDatasetsDatasetIDRowsBulkContentResources2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesContent = Union[
    str, List[PostV2ResourcesDatasetsDatasetIDRowsBulkContentResources2]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesType(str, Enum):
    FUNCTION = "function"


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesToolCallsTypedDict(TypedDict):
    type: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesType
    function: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesToolCalls(BaseModel):
    type: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesType

    function: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesFunction

    id: Optional[str] = None

    index: Optional[float] = None


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesMessagesTypedDict(TypedDict):
    role: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesRole
    r"""The role of the prompt message"""
    content: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[
        List[PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesToolCallsTypedDict]
    ]


class PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesMessages(BaseModel):
    role: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesRole
    r"""The role of the prompt message"""

    content: PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[
        List[PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesToolCalls]
    ] = None


class PostV2ResourcesDatasetsDatasetIDRowsBulkResponseBodyTypedDict(TypedDict):
    r"""Expected dataset row model when talking to the API."""

    id: str
    r"""The id of the resource"""
    messages: List[PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesMessagesTypedDict]
    r"""Input message(s) of the dataset row"""
    expected_output: NotRequired[Nullable[str]]
    r"""Reference of the dataset row"""


class PostV2ResourcesDatasetsDatasetIDRowsBulkResponseBody(BaseModel):
    r"""Expected dataset row model when talking to the API."""

    id: str
    r"""The id of the resource"""

    messages: List[PostV2ResourcesDatasetsDatasetIDRowsBulkResourcesMessages]
    r"""Input message(s) of the dataset row"""

    expected_output: OptionalNullable[str] = UNSET
    r"""Reference of the dataset row"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["expected_output"]
        nullable_fields = ["expected_output"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
