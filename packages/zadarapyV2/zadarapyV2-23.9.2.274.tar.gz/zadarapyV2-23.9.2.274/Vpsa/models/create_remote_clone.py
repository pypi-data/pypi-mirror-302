# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class CreateRemoteClone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'displayname': 'str',
        'volname': 'str',
        'poolname': 'str',
        'remote_clone_mode': 'str',
        'vpsaname': 'str',
        'snapname': 'str',
        'dedupe': 'str',
        'compress': 'str',
        'encrypted': 'str'
    }

    attribute_map = {
        'displayname': 'displayname',
        'volname': 'volname',
        'poolname': 'poolname',
        'remote_clone_mode': 'remote_clone_mode',
        'vpsaname': 'vpsaname',
        'snapname': 'snapname',
        'dedupe': 'dedupe',
        'compress': 'compress',
        'encrypted': 'encrypted'
    }

    def __init__(self, displayname=None, volname=None, poolname=None, remote_clone_mode=None, vpsaname=None, snapname=None, dedupe=None, compress=None, encrypted=None, _configuration=None):  # noqa: E501
        """CreateRemoteClone - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._displayname = None
        self._volname = None
        self._poolname = None
        self._remote_clone_mode = None
        self._vpsaname = None
        self._snapname = None
        self._dedupe = None
        self._compress = None
        self._encrypted = None
        self.discriminator = None

        self.displayname = displayname
        self.volname = volname
        self.poolname = poolname
        self.remote_clone_mode = remote_clone_mode
        self.vpsaname = vpsaname
        self.snapname = snapname
        if dedupe is not None:
            self.dedupe = dedupe
        if compress is not None:
            self.compress = compress
        if encrypted is not None:
            self.encrypted = encrypted

    @property
    def displayname(self):
        """Gets the displayname of this CreateRemoteClone.  # noqa: E501

        The new remote clone name  # noqa: E501

        :return: The displayname of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this CreateRemoteClone.

        The new remote clone name  # noqa: E501

        :param displayname: The displayname of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and displayname is None:
            raise ValueError("Invalid value for `displayname`, must not be `None`")  # noqa: E501

        self._displayname = displayname

    @property
    def volname(self):
        """Gets the volname of this CreateRemoteClone.  # noqa: E501

        Destination volume name  # noqa: E501

        :return: The volname of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._volname

    @volname.setter
    def volname(self, volname):
        """Sets the volname of this CreateRemoteClone.

        Destination volume name  # noqa: E501

        :param volname: The volname of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and volname is None:
            raise ValueError("Invalid value for `volname`, must not be `None`")  # noqa: E501

        self._volname = volname

    @property
    def poolname(self):
        """Gets the poolname of this CreateRemoteClone.  # noqa: E501

        Pool to create remote clone  # noqa: E501

        :return: The poolname of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._poolname

    @poolname.setter
    def poolname(self, poolname):
        """Sets the poolname of this CreateRemoteClone.

        Pool to create remote clone  # noqa: E501

        :param poolname: The poolname of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and poolname is None:
            raise ValueError("Invalid value for `poolname`, must not be `None`")  # noqa: E501

        self._poolname = poolname

    @property
    def remote_clone_mode(self):
        """Gets the remote_clone_mode of this CreateRemoteClone.  # noqa: E501

        Remote Clone mode  # noqa: E501

        :return: The remote_clone_mode of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._remote_clone_mode

    @remote_clone_mode.setter
    def remote_clone_mode(self, remote_clone_mode):
        """Sets the remote_clone_mode of this CreateRemoteClone.

        Remote Clone mode  # noqa: E501

        :param remote_clone_mode: The remote_clone_mode of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and remote_clone_mode is None:
            raise ValueError("Invalid value for `remote_clone_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["clone", "retrieve"]  # noqa: E501
        if (self._configuration.client_side_validation and
                remote_clone_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `remote_clone_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_clone_mode, allowed_values)
            )

        self._remote_clone_mode = remote_clone_mode

    @property
    def vpsaname(self):
        """Gets the vpsaname of this CreateRemoteClone.  # noqa: E501

        The source vpsa name  # noqa: E501

        :return: The vpsaname of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._vpsaname

    @vpsaname.setter
    def vpsaname(self, vpsaname):
        """Sets the vpsaname of this CreateRemoteClone.

        The source vpsa name  # noqa: E501

        :param vpsaname: The vpsaname of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and vpsaname is None:
            raise ValueError("Invalid value for `vpsaname`, must not be `None`")  # noqa: E501

        self._vpsaname = vpsaname

    @property
    def snapname(self):
        """Gets the snapname of this CreateRemoteClone.  # noqa: E501

        The source snapshot name  # noqa: E501

        :return: The snapname of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._snapname

    @snapname.setter
    def snapname(self, snapname):
        """Sets the snapname of this CreateRemoteClone.

        The source snapshot name  # noqa: E501

        :param snapname: The snapname of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and snapname is None:
            raise ValueError("Invalid value for `snapname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                snapname is not None and not re.search(r'^snap-[0-9a-f]{8}$', snapname)):  # noqa: E501
            raise ValueError(r"Invalid value for `snapname`, must be a follow pattern or equal to `/^snap-[0-9a-f]{8}$/`")  # noqa: E501

        self._snapname = snapname

    @property
    def dedupe(self):
        """Gets the dedupe of this CreateRemoteClone.  # noqa: E501

        Enable Dedupe For Remote Clone.  # noqa: E501

        :return: The dedupe of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._dedupe

    @dedupe.setter
    def dedupe(self, dedupe):
        """Sets the dedupe of this CreateRemoteClone.

        Enable Dedupe For Remote Clone.  # noqa: E501

        :param dedupe: The dedupe of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                dedupe not in allowed_values):
            raise ValueError(
                "Invalid value for `dedupe` ({0}), must be one of {1}"  # noqa: E501
                .format(dedupe, allowed_values)
            )

        self._dedupe = dedupe

    @property
    def compress(self):
        """Gets the compress of this CreateRemoteClone.  # noqa: E501

        Enable compress For Remote Clone.  # noqa: E501

        :return: The compress of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this CreateRemoteClone.

        Enable compress For Remote Clone.  # noqa: E501

        :param compress: The compress of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                compress not in allowed_values):
            raise ValueError(
                "Invalid value for `compress` ({0}), must be one of {1}"  # noqa: E501
                .format(compress, allowed_values)
            )

        self._compress = compress

    @property
    def encrypted(self):
        """Gets the encrypted of this CreateRemoteClone.  # noqa: E501

        Enable encryption for this Remote Clone.  # noqa: E501

        :return: The encrypted of this CreateRemoteClone.  # noqa: E501
        :rtype: str
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this CreateRemoteClone.

        Enable encryption for this Remote Clone.  # noqa: E501

        :param encrypted: The encrypted of this CreateRemoteClone.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                encrypted not in allowed_values):
            raise ValueError(
                "Invalid value for `encrypted` ({0}), must be one of {1}"  # noqa: E501
                .format(encrypted, allowed_values)
            )

        self._encrypted = encrypted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateRemoteClone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateRemoteClone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateRemoteClone):
            return True

        return self.to_dict() != other.to_dict()
