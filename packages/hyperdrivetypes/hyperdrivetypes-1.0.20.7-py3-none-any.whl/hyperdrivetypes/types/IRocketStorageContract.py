"""A web3.py Contract class for the IRocketStorage contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class IRocketStorageAddUintContractFunction(ContractFunction):
    """ContractFunction for the addUint method."""

    def __call__(self, key: bytes, amount: int) -> IRocketStorageAddUintContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(amount)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageConfirmGuardianContractFunction(ContractFunction):
    """ContractFunction for the confirmGuardian method."""

    def __call__(self) -> IRocketStorageConfirmGuardianContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageConfirmWithdrawalAddressContractFunction(ContractFunction):
    """ContractFunction for the confirmWithdrawalAddress method."""

    def __call__(self, nodeAddress: str) -> IRocketStorageConfirmWithdrawalAddressContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(nodeAddress))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageDeleteAddressContractFunction(ContractFunction):
    """ContractFunction for the deleteAddress method."""

    def __call__(self, key: bytes) -> IRocketStorageDeleteAddressContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageDeleteBoolContractFunction(ContractFunction):
    """ContractFunction for the deleteBool method."""

    def __call__(self, key: bytes) -> IRocketStorageDeleteBoolContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageDeleteBytesContractFunction(ContractFunction):
    """ContractFunction for the deleteBytes method."""

    def __call__(self, key: bytes) -> IRocketStorageDeleteBytesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageDeleteBytes32ContractFunction(ContractFunction):
    """ContractFunction for the deleteBytes32 method."""

    def __call__(self, key: bytes) -> IRocketStorageDeleteBytes32ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageDeleteIntContractFunction(ContractFunction):
    """ContractFunction for the deleteInt method."""

    def __call__(self, key: bytes) -> IRocketStorageDeleteIntContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageDeleteStringContractFunction(ContractFunction):
    """ContractFunction for the deleteString method."""

    def __call__(self, key: bytes) -> IRocketStorageDeleteStringContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageDeleteUintContractFunction(ContractFunction):
    """ContractFunction for the deleteUint method."""

    def __call__(self, key: bytes) -> IRocketStorageDeleteUintContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageGetAddressContractFunction(ContractFunction):
    """ContractFunction for the getAddress method."""

    def __call__(self, key: bytes) -> IRocketStorageGetAddressContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetBoolContractFunction(ContractFunction):
    """ContractFunction for the getBool method."""

    def __call__(self, key: bytes) -> IRocketStorageGetBoolContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetBytesContractFunction(ContractFunction):
    """ContractFunction for the getBytes method."""

    def __call__(self, key: bytes) -> IRocketStorageGetBytesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetBytes32ContractFunction(ContractFunction):
    """ContractFunction for the getBytes32 method."""

    def __call__(self, key: bytes) -> IRocketStorageGetBytes32ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetDeployedStatusContractFunction(ContractFunction):
    """ContractFunction for the getDeployedStatus method."""

    def __call__(self) -> IRocketStorageGetDeployedStatusContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetGuardianContractFunction(ContractFunction):
    """ContractFunction for the getGuardian method."""

    def __call__(self) -> IRocketStorageGetGuardianContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetIntContractFunction(ContractFunction):
    """ContractFunction for the getInt method."""

    def __call__(self, key: bytes) -> IRocketStorageGetIntContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetNodePendingWithdrawalAddressContractFunction(
    ContractFunction
):
    """ContractFunction for the getNodePendingWithdrawalAddress method."""

    def __call__(self, nodeAddress: str) -> IRocketStorageGetNodePendingWithdrawalAddressContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(nodeAddress))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetNodeWithdrawalAddressContractFunction(ContractFunction):
    """ContractFunction for the getNodeWithdrawalAddress method."""

    def __call__(self, nodeAddress: str) -> IRocketStorageGetNodeWithdrawalAddressContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(nodeAddress))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetStringContractFunction(ContractFunction):
    """ContractFunction for the getString method."""

    def __call__(self, key: bytes) -> IRocketStorageGetStringContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageGetUintContractFunction(ContractFunction):
    """ContractFunction for the getUint method."""

    def __call__(self, key: bytes) -> IRocketStorageGetUintContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(key))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IRocketStorageSetAddressContractFunction(ContractFunction):
    """ContractFunction for the setAddress method."""

    def __call__(self, key: bytes, value: str) -> IRocketStorageSetAddressContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetBoolContractFunction(ContractFunction):
    """ContractFunction for the setBool method."""

    def __call__(self, key: bytes, value: bool) -> IRocketStorageSetBoolContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetBytesContractFunction(ContractFunction):
    """ContractFunction for the setBytes method."""

    def __call__(self, key: bytes, value: bytes) -> IRocketStorageSetBytesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetBytes32ContractFunction(ContractFunction):
    """ContractFunction for the setBytes32 method."""

    def __call__(self, key: bytes, value: bytes) -> IRocketStorageSetBytes32ContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetGuardianContractFunction(ContractFunction):
    """ContractFunction for the setGuardian method."""

    def __call__(self, newAddress: str) -> IRocketStorageSetGuardianContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(newAddress))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetIntContractFunction(ContractFunction):
    """ContractFunction for the setInt method."""

    def __call__(self, key: bytes, value: int) -> IRocketStorageSetIntContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetStringContractFunction(ContractFunction):
    """ContractFunction for the setString method."""

    def __call__(self, key: bytes, value: str) -> IRocketStorageSetStringContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetUintContractFunction(ContractFunction):
    """ContractFunction for the setUint method."""

    def __call__(self, key: bytes, value: int) -> IRocketStorageSetUintContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSetWithdrawalAddressContractFunction(ContractFunction):
    """ContractFunction for the setWithdrawalAddress method."""

    def __call__(self, nodeAddress: str, newWithdrawalAddress: str, confirm: bool) -> IRocketStorageSetWithdrawalAddressContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(nodeAddress),
            dataclass_to_tuple(newWithdrawalAddress),
            dataclass_to_tuple(confirm),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageSubUintContractFunction(ContractFunction):
    """ContractFunction for the subUint method."""

    def __call__(self, key: bytes, amount: int) -> IRocketStorageSubUintContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(key), dataclass_to_tuple(amount)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IRocketStorageContractFunctions(ContractFunctions):
    """ContractFunctions for the IRocketStorage contract."""

    addUint: IRocketStorageAddUintContractFunction

    confirmGuardian: IRocketStorageConfirmGuardianContractFunction

    confirmWithdrawalAddress: (
        IRocketStorageConfirmWithdrawalAddressContractFunction
    )

    deleteAddress: IRocketStorageDeleteAddressContractFunction

    deleteBool: IRocketStorageDeleteBoolContractFunction

    deleteBytes: IRocketStorageDeleteBytesContractFunction

    deleteBytes32: IRocketStorageDeleteBytes32ContractFunction

    deleteInt: IRocketStorageDeleteIntContractFunction

    deleteString: IRocketStorageDeleteStringContractFunction

    deleteUint: IRocketStorageDeleteUintContractFunction

    getAddress: IRocketStorageGetAddressContractFunction

    getBool: IRocketStorageGetBoolContractFunction

    getBytes: IRocketStorageGetBytesContractFunction

    getBytes32: IRocketStorageGetBytes32ContractFunction

    getDeployedStatus: IRocketStorageGetDeployedStatusContractFunction

    getGuardian: IRocketStorageGetGuardianContractFunction

    getInt: IRocketStorageGetIntContractFunction

    getNodePendingWithdrawalAddress: (
        IRocketStorageGetNodePendingWithdrawalAddressContractFunction
    )

    getNodeWithdrawalAddress: (
        IRocketStorageGetNodeWithdrawalAddressContractFunction
    )

    getString: IRocketStorageGetStringContractFunction

    getUint: IRocketStorageGetUintContractFunction

    setAddress: IRocketStorageSetAddressContractFunction

    setBool: IRocketStorageSetBoolContractFunction

    setBytes: IRocketStorageSetBytesContractFunction

    setBytes32: IRocketStorageSetBytes32ContractFunction

    setGuardian: IRocketStorageSetGuardianContractFunction

    setInt: IRocketStorageSetIntContractFunction

    setString: IRocketStorageSetStringContractFunction

    setUint: IRocketStorageSetUintContractFunction

    setWithdrawalAddress: IRocketStorageSetWithdrawalAddressContractFunction

    subUint: IRocketStorageSubUintContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addUint = IRocketStorageAddUintContractFunction.factory(
            "addUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="addUint",
        )
        self.confirmGuardian = (
            IRocketStorageConfirmGuardianContractFunction.factory(
                "confirmGuardian",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="confirmGuardian",
            )
        )
        self.confirmWithdrawalAddress = (
            IRocketStorageConfirmWithdrawalAddressContractFunction.factory(
                "confirmWithdrawalAddress",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="confirmWithdrawalAddress",
            )
        )
        self.deleteAddress = (
            IRocketStorageDeleteAddressContractFunction.factory(
                "deleteAddress",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deleteAddress",
            )
        )
        self.deleteBool = IRocketStorageDeleteBoolContractFunction.factory(
            "deleteBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deleteBool",
        )
        self.deleteBytes = IRocketStorageDeleteBytesContractFunction.factory(
            "deleteBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deleteBytes",
        )
        self.deleteBytes32 = (
            IRocketStorageDeleteBytes32ContractFunction.factory(
                "deleteBytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deleteBytes32",
            )
        )
        self.deleteInt = IRocketStorageDeleteIntContractFunction.factory(
            "deleteInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deleteInt",
        )
        self.deleteString = IRocketStorageDeleteStringContractFunction.factory(
            "deleteString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deleteString",
        )
        self.deleteUint = IRocketStorageDeleteUintContractFunction.factory(
            "deleteUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deleteUint",
        )
        self.getAddress = IRocketStorageGetAddressContractFunction.factory(
            "getAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getAddress",
        )
        self.getBool = IRocketStorageGetBoolContractFunction.factory(
            "getBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getBool",
        )
        self.getBytes = IRocketStorageGetBytesContractFunction.factory(
            "getBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getBytes",
        )
        self.getBytes32 = IRocketStorageGetBytes32ContractFunction.factory(
            "getBytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getBytes32",
        )
        self.getDeployedStatus = (
            IRocketStorageGetDeployedStatusContractFunction.factory(
                "getDeployedStatus",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getDeployedStatus",
            )
        )
        self.getGuardian = IRocketStorageGetGuardianContractFunction.factory(
            "getGuardian",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getGuardian",
        )
        self.getInt = IRocketStorageGetIntContractFunction.factory(
            "getInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getInt",
        )
        self.getNodePendingWithdrawalAddress = IRocketStorageGetNodePendingWithdrawalAddressContractFunction.factory(
            "getNodePendingWithdrawalAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNodePendingWithdrawalAddress",
        )
        self.getNodeWithdrawalAddress = (
            IRocketStorageGetNodeWithdrawalAddressContractFunction.factory(
                "getNodeWithdrawalAddress",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getNodeWithdrawalAddress",
            )
        )
        self.getString = IRocketStorageGetStringContractFunction.factory(
            "getString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getString",
        )
        self.getUint = IRocketStorageGetUintContractFunction.factory(
            "getUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getUint",
        )
        self.setAddress = IRocketStorageSetAddressContractFunction.factory(
            "setAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setAddress",
        )
        self.setBool = IRocketStorageSetBoolContractFunction.factory(
            "setBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setBool",
        )
        self.setBytes = IRocketStorageSetBytesContractFunction.factory(
            "setBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setBytes",
        )
        self.setBytes32 = IRocketStorageSetBytes32ContractFunction.factory(
            "setBytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setBytes32",
        )
        self.setGuardian = IRocketStorageSetGuardianContractFunction.factory(
            "setGuardian",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setGuardian",
        )
        self.setInt = IRocketStorageSetIntContractFunction.factory(
            "setInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setInt",
        )
        self.setString = IRocketStorageSetStringContractFunction.factory(
            "setString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setString",
        )
        self.setUint = IRocketStorageSetUintContractFunction.factory(
            "setUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setUint",
        )
        self.setWithdrawalAddress = (
            IRocketStorageSetWithdrawalAddressContractFunction.factory(
                "setWithdrawalAddress",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setWithdrawalAddress",
            )
        )
        self.subUint = IRocketStorageSubUintContractFunction.factory(
            "subUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="subUint",
        )


irocketstorage_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "addUint",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "confirmGuardian",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "confirmWithdrawalAddress",
            "inputs": [
                {
                    "name": "_nodeAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deleteAddress",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deleteBool",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deleteBytes",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deleteBytes32",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deleteInt",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deleteString",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deleteUint",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getAddress",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBool",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBytes",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBytes32",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployedStatus",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getGuardian",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInt",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [
                {"name": "", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNodePendingWithdrawalAddress",
            "inputs": [
                {
                    "name": "_nodeAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNodeWithdrawalAddress",
            "inputs": [
                {
                    "name": "_nodeAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getString",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getUint",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setAddress",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_value",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setBool",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_value", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setBytes",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_value", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setBytes32",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_value",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setGuardian",
            "inputs": [
                {
                    "name": "_newAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setInt",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_value", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setString",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_value", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setUint",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_value",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setWithdrawalAddress",
            "inputs": [
                {
                    "name": "_nodeAddress",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_newWithdrawalAddress",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "_confirm", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "subUint",
            "inputs": [
                {"name": "_key", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class IRocketStorageContract(Contract):
    """A web3.py Contract class for the IRocketStorage contract."""

    abi: ABI = irocketstorage_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IRocketStorageContractFunctions(irocketstorage_abi, self.w3, address)  # type: ignore

    functions: IRocketStorageContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IRocketStorageContractFunctions(
            irocketstorage_abi, w3, None
        )

        return contract
