# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .scaling import Scaling
from .unit import Unit


class ColumnMetadata(pydantic_v1.BaseModel):
    name: str = pydantic_v1.Field()
    """
    The name of the column.
    """

    friendly_name: str = pydantic_v1.Field()
    """
    The friendly displayable name of the column.
    """

    unit: Unit = pydantic_v1.Field()
    """
    The unit of the category.
    """

    scaling: Scaling = pydantic_v1.Field()
    """
    The scaling type of the column. Geometric indicates exponential changes are expected, while arithmetic indicates linear changes.
    """

    reverse: bool = pydantic_v1.Field()
    """
    Whether the column is expected to be higher or lower for better performance. False means higher is better, True means lower is better.
    """

    cutoff: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The **suggested** cutoff value for the column. This is a guideline for when the absolute value of the column is considered saturated.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
