from io import TextIOWrapper
from typing import Callable

import pandas as pd
from fsspec import AbstractFileSystem
from fsspec.spec import AbstractBufferedFile

class Storage(AbstractFileSystem):
    def __init__(
        self, logging_function: Callable | None = None, *args, **storage_options
    ): ...
    def get_file(self, remote_path: str, local_path: str): ...
    def put(self, local_path: str, remote_path: str): ...
    def open_for_writing(
        self, path: str, text: bool = False, *, log: bool = True
    ) -> TextIOWrapper | AbstractBufferedFile: ...
    def open_for_reading(
        self, path: str, text: bool = False, *, log: bool = True
    ) -> TextIOWrapper | AbstractBufferedFile: ...
    def move(self, source_path: str, destination_path: str): ...
    def list_files(
        self, path: str, recursive: bool = False, include_root_folder: bool = True
    ) -> list[str]: ...
    def remove_files(self, paths: str | list[str], recursive: bool = False): ...
    def read_dataset_from_parquet(self, path: str) -> pd.DataFrame: ...
    def write_dataframe_to_parquet(self, path: str, df: pd.DataFrame): ...
    def loader(self, path: str, load_method: Callable, text: bool = False): ...
    def write_to_file(self, path: str, content: str | bytes): ...

def filesystem(
    protocol: str, logging_function: Callable | None = None, **storage_options
) -> Storage: ...
