# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CRFPP
else:
    import _CRFPP

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def crfpp_learn(argc):
    return _CRFPP.crfpp_learn(argc)

def crfpp_test(argc):
    return _CRFPP.crfpp_test(argc)
class Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTemplate(self):
        return _CRFPP.Model_getTemplate(self)

    def createTagger(self):
        return _CRFPP.Model_createTagger(self)

    def what(self):
        return _CRFPP.Model_what(self)
    __swig_destroy__ = _CRFPP.delete_Model

    def __init__(self, arg):
        _CRFPP.Model_swiginit(self, _CRFPP.new_Model(arg))

# Register Model in _CRFPP:
_CRFPP.Model_swigregister(Model)

class Tagger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_model(self, model):
        return _CRFPP.Tagger_set_model(self, model)

    def set_vlevel(self, vlevel):
        return _CRFPP.Tagger_set_vlevel(self, vlevel)

    def vlevel(self):
        return _CRFPP.Tagger_vlevel(self)

    def set_cost_factor(self, cost_factor):
        return _CRFPP.Tagger_set_cost_factor(self, cost_factor)

    def cost_factor(self):
        return _CRFPP.Tagger_cost_factor(self)

    def set_nbest(self, nbest):
        return _CRFPP.Tagger_set_nbest(self, nbest)

    def nbest(self):
        return _CRFPP.Tagger_nbest(self)

    def add(self, str):
        return _CRFPP.Tagger_add(self, str)

    def size(self):
        return _CRFPP.Tagger_size(self)

    def xsize(self):
        return _CRFPP.Tagger_xsize(self)

    def dsize(self):
        return _CRFPP.Tagger_dsize(self)

    def result(self, i):
        return _CRFPP.Tagger_result(self, i)

    def answer(self, i):
        return _CRFPP.Tagger_answer(self, i)

    def y(self, i):
        return _CRFPP.Tagger_y(self, i)

    def y2(self, i):
        return _CRFPP.Tagger_y2(self, i)

    def yname(self, i):
        return _CRFPP.Tagger_yname(self, i)

    def x(self, i, j):
        return _CRFPP.Tagger_x(self, i, j)

    def ysize(self):
        return _CRFPP.Tagger_ysize(self)

    def prob(self, *args):
        return _CRFPP.Tagger_prob(self, *args)

    def set_penalty(self, i, j, penalty):
        return _CRFPP.Tagger_set_penalty(self, i, j, penalty)

    def penalty(self, i, j):
        return _CRFPP.Tagger_penalty(self, i, j)

    def alpha(self, i, j):
        return _CRFPP.Tagger_alpha(self, i, j)

    def beta(self, i, j):
        return _CRFPP.Tagger_beta(self, i, j)

    def emission_cost(self, i, j):
        return _CRFPP.Tagger_emission_cost(self, i, j)

    def next_transition_cost(self, i, j, k):
        return _CRFPP.Tagger_next_transition_cost(self, i, j, k)

    def prev_transition_cost(self, i, j, k):
        return _CRFPP.Tagger_prev_transition_cost(self, i, j, k)

    def best_cost(self, i, j):
        return _CRFPP.Tagger_best_cost(self, i, j)

    def Z(self):
        return _CRFPP.Tagger_Z(self)

    def empty(self):
        return _CRFPP.Tagger_empty(self)

    def clear(self):
        return _CRFPP.Tagger_clear(self)

    def next(self):
        return _CRFPP.Tagger_next(self)

    def parse(self, *args):
        return _CRFPP.Tagger_parse(self, *args)

    def what(self):
        return _CRFPP.Tagger_what(self)
    __swig_destroy__ = _CRFPP.delete_Tagger

    def __init__(self, arg):
        _CRFPP.Tagger_swiginit(self, _CRFPP.new_Tagger(arg))

# Register Tagger in _CRFPP:
_CRFPP.Tagger_swigregister(Tagger)

VERSION = _CRFPP.VERSION


