# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20029EngineTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'internal_type': 'str',
        'internal_id': 'int',
        'ram': 'int',
        'vcpus': 'int',
        'vpsas_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'internal_type': 'internal_type',
        'internal_id': 'internal_id',
        'ram': 'ram',
        'vcpus': 'vcpus',
        'vpsas_count': 'vpsas_count'
    }

    def __init__(self, name=None, internal_type=None, internal_id=None, ram=None, vcpus=None, vpsas_count=None, _configuration=None):  # noqa: E501
        """InlineResponse20029EngineTypes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._internal_type = None
        self._internal_id = None
        self._ram = None
        self._vcpus = None
        self._vpsas_count = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if internal_type is not None:
            self.internal_type = internal_type
        if internal_id is not None:
            self.internal_id = internal_id
        if ram is not None:
            self.ram = ram
        if vcpus is not None:
            self.vcpus = vcpus
        if vpsas_count is not None:
            self.vpsas_count = vpsas_count

    @property
    def name(self):
        """Gets the name of this InlineResponse20029EngineTypes.  # noqa: E501


        :return: The name of this InlineResponse20029EngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20029EngineTypes.


        :param name: The name of this InlineResponse20029EngineTypes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def internal_type(self):
        """Gets the internal_type of this InlineResponse20029EngineTypes.  # noqa: E501


        :return: The internal_type of this InlineResponse20029EngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._internal_type

    @internal_type.setter
    def internal_type(self, internal_type):
        """Sets the internal_type of this InlineResponse20029EngineTypes.


        :param internal_type: The internal_type of this InlineResponse20029EngineTypes.  # noqa: E501
        :type: str
        """

        self._internal_type = internal_type

    @property
    def internal_id(self):
        """Gets the internal_id of this InlineResponse20029EngineTypes.  # noqa: E501


        :return: The internal_id of this InlineResponse20029EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this InlineResponse20029EngineTypes.


        :param internal_id: The internal_id of this InlineResponse20029EngineTypes.  # noqa: E501
        :type: int
        """

        self._internal_id = internal_id

    @property
    def ram(self):
        """Gets the ram of this InlineResponse20029EngineTypes.  # noqa: E501


        :return: The ram of this InlineResponse20029EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this InlineResponse20029EngineTypes.


        :param ram: The ram of this InlineResponse20029EngineTypes.  # noqa: E501
        :type: int
        """

        self._ram = ram

    @property
    def vcpus(self):
        """Gets the vcpus of this InlineResponse20029EngineTypes.  # noqa: E501


        :return: The vcpus of this InlineResponse20029EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this InlineResponse20029EngineTypes.


        :param vcpus: The vcpus of this InlineResponse20029EngineTypes.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def vpsas_count(self):
        """Gets the vpsas_count of this InlineResponse20029EngineTypes.  # noqa: E501


        :return: The vpsas_count of this InlineResponse20029EngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._vpsas_count

    @vpsas_count.setter
    def vpsas_count(self, vpsas_count):
        """Sets the vpsas_count of this InlineResponse20029EngineTypes.


        :param vpsas_count: The vpsas_count of this InlineResponse20029EngineTypes.  # noqa: E501
        :type: int
        """

        self._vpsas_count = vpsas_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20029EngineTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20029EngineTypes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20029EngineTypes):
            return True

        return self.to_dict() != other.to_dict()
