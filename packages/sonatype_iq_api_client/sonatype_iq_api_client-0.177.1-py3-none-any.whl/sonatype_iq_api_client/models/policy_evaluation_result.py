# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.177.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from sonatype_iq_api_client.models.policy_alert import PolicyAlert
from typing import Optional, Set
from typing_extensions import Self

class PolicyEvaluationResult(BaseModel):
    """
    PolicyEvaluationResult
    """ # noqa: E501
    affected_component_count: Optional[StrictInt] = Field(default=None, alias="affectedComponentCount")
    alerts: Optional[List[PolicyAlert]] = None
    critical_component_count: Optional[StrictInt] = Field(default=None, alias="criticalComponentCount")
    critical_policy_violation_count: Optional[StrictInt] = Field(default=None, alias="criticalPolicyViolationCount")
    grandfathered_policy_violation_count: Optional[StrictInt] = Field(default=None, alias="grandfatheredPolicyViolationCount")
    legacy_violation_count: Optional[StrictInt] = Field(default=None, alias="legacyViolationCount")
    moderate_component_count: Optional[StrictInt] = Field(default=None, alias="moderateComponentCount")
    moderate_policy_violation_count: Optional[StrictInt] = Field(default=None, alias="moderatePolicyViolationCount")
    severe_component_count: Optional[StrictInt] = Field(default=None, alias="severeComponentCount")
    severe_policy_violation_count: Optional[StrictInt] = Field(default=None, alias="severePolicyViolationCount")
    total_component_count: Optional[StrictInt] = Field(default=None, alias="totalComponentCount")
    __properties: ClassVar[List[str]] = ["affectedComponentCount", "alerts", "criticalComponentCount", "criticalPolicyViolationCount", "grandfatheredPolicyViolationCount", "legacyViolationCount", "moderateComponentCount", "moderatePolicyViolationCount", "severeComponentCount", "severePolicyViolationCount", "totalComponentCount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyEvaluationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alerts (list)
        _items = []
        if self.alerts:
            for _item in self.alerts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['alerts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyEvaluationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affectedComponentCount": obj.get("affectedComponentCount"),
            "alerts": [PolicyAlert.from_dict(_item) for _item in obj["alerts"]] if obj.get("alerts") is not None else None,
            "criticalComponentCount": obj.get("criticalComponentCount"),
            "criticalPolicyViolationCount": obj.get("criticalPolicyViolationCount"),
            "grandfatheredPolicyViolationCount": obj.get("grandfatheredPolicyViolationCount"),
            "legacyViolationCount": obj.get("legacyViolationCount"),
            "moderateComponentCount": obj.get("moderateComponentCount"),
            "moderatePolicyViolationCount": obj.get("moderatePolicyViolationCount"),
            "severeComponentCount": obj.get("severeComponentCount"),
            "severePolicyViolationCount": obj.get("severePolicyViolationCount"),
            "totalComponentCount": obj.get("totalComponentCount")
        })
        return _obj


